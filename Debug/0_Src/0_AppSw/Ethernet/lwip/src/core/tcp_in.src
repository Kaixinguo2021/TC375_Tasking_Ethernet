	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\.tcp_in.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc37x -D__CPU_TC37X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c'

	
$TC162
	
	.sdecl	'.text.tcp_in.tcp_input',code,cluster('tcp_input')
	.sect	'.text.tcp_in.tcp_input'
	.align	2
	
	.global	tcp_input

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	     3   * Transmission Control Protocol, incoming traffic
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	     4   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	     5   * The input processing functions of the TCP layer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	     6   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	     7   * These functions are generally called in the order (ip_input() ->)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	     8   * tcp_input() -> * tcp_process() -> tcp_receive() (-> application).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	     9   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    10   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    11  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    12  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    13   * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    14   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    15   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    16   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    17   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    18   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    19   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    20   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    21   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    22   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    23   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    24   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    25   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    26   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    27   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    28   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    29   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    30   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    31   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    32   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    33   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    34   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    35   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    36   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    37   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    38   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    39   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    40   * Author: Adam Dunkels <adam@sics.se>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    41   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    42   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    43  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    44  #include "lwip/opt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    45  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    46  #if LWIP_TCP /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    47  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    48  #include "lwip/priv/tcp_priv.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    49  #include "lwip/def.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    50  #include "lwip/ip_addr.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    51  #include "lwip/netif.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    52  #include "lwip/mem.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    53  #include "lwip/memp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    54  #include "lwip/inet_chksum.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    55  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    56  #include "lwip/ip6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    57  #include "lwip/ip6_addr.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    58  #if LWIP_ND6_TCP_REACHABILITY_HINTS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    59  #include "lwip/nd6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    60  #endif /* LWIP_ND6_TCP_REACHABILITY_HINTS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    61  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    62  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    63  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    64  #ifdef LWIP_HOOK_FILENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    65  #include LWIP_HOOK_FILENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    66  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    67  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    68  /** Initial CWND calculation as defined RFC 2581 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    69  #define LWIP_TCP_CALC_INITIAL_CWND(mss) ((tcpwnd_size_t)LWIP_MIN((4U * (mss)), LWIP_MAX((2U * (mss)), 4380U)))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    70  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    71  /* These variables are global to all functions involved in the input
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    72     processing of TCP segments. They are set by the tcp_input()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    73     function. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    74  static struct tcp_seg inseg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    75  static struct tcp_hdr *tcphdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    76  static u16_t tcphdr_optlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    77  static u16_t tcphdr_opt1len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    78  static u8_t *tcphdr_opt2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    79  static u16_t tcp_optidx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    80  static u32_t seqno, ackno;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    81  static tcpwnd_size_t recv_acked;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    82  static u16_t tcplen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    83  static u8_t flags;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    84  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    85  static u8_t recv_flags;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    86  static struct pbuf *recv_data;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    87  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    88  struct tcp_pcb *tcp_input_pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    89  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    90  /* Forward declarations. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    91  static err_t tcp_process(struct tcp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    92  static void tcp_receive(struct tcp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    93  static void tcp_parseopt(struct tcp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    94  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    95  static void tcp_listen_input(struct tcp_pcb_listen *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    96  static void tcp_timewait_input(struct tcp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    97  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    98  static int tcp_input_delayed_close(struct tcp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	    99  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   100  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   101  static void tcp_add_sack(struct tcp_pcb *pcb, u32_t left, u32_t right);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   102  static void tcp_remove_sacks_lt(struct tcp_pcb *pcb, u32_t seq);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   103  #if defined(TCP_OOSEQ_BYTES_LIMIT) || defined(TCP_OOSEQ_PBUFS_LIMIT)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   104  static void tcp_remove_sacks_gt(struct tcp_pcb *pcb, u32_t seq);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   105  #endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   106  #endif /* LWIP_TCP_SACK_OUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   107  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   108  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   109   * The initial input processing of TCP. It verifies the TCP header, demultiplexes
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   110   * the segment between the PCBs and passes it on to tcp_process(), which implements
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   111   * the TCP finite state machine. This function is called by the IP layer (in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   112   * ip_input()).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   113   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   114   * @param p received TCP segment to process (p->payload pointing to the TCP header)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   115   * @param inp network interface on which this segment was received
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   116   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   117  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   118  tcp_input(struct pbuf *p, struct netif *inp)
; Function tcp_input
.L366:
tcp_input:	.type	func
	sub.a	a10,#32
.L725:
	st.a	[a10]20,a4
.L727:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   119  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   120    struct tcp_pcb *pcb, *prev;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   121    struct tcp_pcb_listen *lpcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   122  #if SO_REUSE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   123    struct tcp_pcb *lpcb_prev = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   124    struct tcp_pcb_listen *lpcb_any = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   125  #endif /* SO_REUSE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   126    u8_t hdrlen_bytes;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   127    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   128  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   129    LWIP_UNUSED_ARG(inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   130    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   131    LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
	jnz.a	a4,.L2
.L1022:
	movh.a	a15,#@his(.2.str)
	lea	a15,[a15]@los(.2.str)
	st.a	[a10],a15
	mov	d15,#131
	st.w	[a10]4,d15
.L726:
	fcall	.cocofun_85
.L728:
	st.a	[a10]8,a15
	fcall	.cocofun_84
.L729:
	call	Ifx_Lwip_printf
.L2:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   132  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   133    PERF_START;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   134  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   135    TCP_STATS_INC(tcp.recv);
	movh.a	a15,#@his(lwip_stats)
	lea	a15,[a15]@los(lwip_stats)
	st.a	[a10]24,a15
	ld.hu	d15,[a15]146
	add	d15,#1
	st.h	[a15]146,d15
.L1023:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   136    MIB2_STATS_INC(mib2.tcpinsegs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   137  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   138    tcphdr = (struct tcp_hdr *)p->payload;
	ld.a	a15,[a10]20
.L732:
	ld.a	a15,[a15]4
.L733:
	st.a	tcphdr,a15
.L1024:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   139  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   140  #if TCP_INPUT_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   141    tcp_debug_print(tcphdr);
	ld.a	a15,[a10]20
.L734:
	ld.a	a4,[a15]4
	call	tcp_debug_print
.L1025:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   142  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   143  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   144    /* Check that TCP header fits in payload */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   145    if (p->len < TCP_HLEN) {
	ld.hu	d0,[a15]10
.L1026:
	mov	d15,#20
.L1027:
	jlt.u	d0,d15,.L3
.L1028:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   146      /* drop short packets */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   147      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   148      TCP_STATS_INC(tcp.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   149      goto dropped;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   150    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   151  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   152    /* Don't even process incoming broadcasts/multicasts. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   153    if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
	movh.a	a12,#@his(ip_data)
	lea	a12,[a12]@los(ip_data)
	lea	a13,[a12]18
	ld.w	d4,[a13]
	ld.a	a4,[a12]
	call	ip4_addr_isbroadcast_u32
	jne	d2,#0,.L4
.L1029:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   154        ip_addr_ismulticast(ip_current_dest_addr())) {
	ld.w	d15,[a13]
	mov	d0,#224
	and	d15,#240
	jne	d15,d0,.L5
.L4:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   155      TCP_STATS_INC(tcp.proterr);
	ld.a	a15,[a10]24
.L735:
	ld.hu	d15,[a15]160
	add	d15,#1
	st.h	[a15]160,d15
.L1030:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   156      goto dropped;
	j	.L6
.L5:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   157    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   158  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   159  #if CHECKSUM_CHECK_TCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   160    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   161      /* Verify TCP checksum. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   162      u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   163                                      ip_current_src_addr(), ip_current_dest_addr());
	lea	a5,[a12]14
	st.a	[a10]16,a5
.L1031:
	mov	d4,#6
	mov.aa	a6,a13
.L1032:
	ld.a	a4,[a10]20
.L736:
	ld.hu	d5,[a4]8
.L1033:
	call	ip_chksum_pseudo
.L737:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   164      if (chksum != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   165        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   166                                      chksum));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   167        tcp_debug_print(tcphdr);
	ld.a	a4,tcphdr
.L1034:
	jeq	d2,#0,.L7
.L1035:
	call	tcp_debug_print
.L738:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   168        TCP_STATS_INC(tcp.chkerr);
	ld.a	a15,[a10]24
	ld.hu	d15,[a15]152
	add	d15,#1
	st.h	[a15]152,d15
.L1036:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   169        goto dropped;
	j	.L8
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   170      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   171    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   172  #endif /* CHECKSUM_CHECK_TCP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   173  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   174    /* sanity-check header length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   175    hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
	ld.hu	d4,[a4]12
	call	lwip_htons
.L739:
	sha	d4,d2,#-12
.L740:
	sha	d4,#2
.L1037:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   176    if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
	mov	d15,#20
.L1038:
	jlt.u	d4,d15,.L9
.L742:
	ld.hu	d15,[a15]8
.L743:
	jlt.u	d15,d4,.L10
.L1039:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   177      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   178      TCP_STATS_INC(tcp.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   179      goto dropped;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   180    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   181  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   182    /* Move the payload pointer in the pbuf so that it points to the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   183       TCP data instead of the TCP header. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   184    tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
	add	d15,d4,#-20
	st.h	tcphdr_optlen,d15
.L1040:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   185    tcphdr_opt2 = NULL;
	mov.a	a2,#0
.L1041:
	st.a	tcphdr_opt2,a2
.L744:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   186    if (p->len >= hdrlen_bytes) {
	ld.hu	d0,[a15]10
.L745:
	jlt.u	d0,d4,.L11
.L1042:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   187      /* all options are in the first pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   188      tcphdr_opt1len = tcphdr_optlen;
	st.h	tcphdr_opt1len,d15
.L1043:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   189      pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
	ld.a	a4,[a10]20
.L746:
	call	pbuf_remove_header
.L741:
	j	.L12
.L11:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   190    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   191      u16_t opt2len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   192      /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   193      /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   194      LWIP_ASSERT("p->next != NULL", p->next != NULL);
	ld.w	d15,[a15]
.L747:
	jne	d15,#0,.L13
	movh.a	a15,#@his(.7.str)
	lea	a15,[a15]@los(.7.str)
	st.a	[a10],a15
	mov	d15,#194
	st.w	[a10]4,d15
.L731:
	fcall	.cocofun_85
.L748:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L13:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   195  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   196      /* advance over the TCP header (cannot fail) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   197      pbuf_remove_header(p, TCP_HLEN);
	mov	d4,#20
	ld.a	a4,[a10]20
.L750:
	call	pbuf_remove_header
.L751:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   198  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   199      /* determine how long the first and second parts of the options are */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   200      tcphdr_opt1len = p->len;
	ld.a	a4,[a10]20
.L752:
	ld.hu	d15,[a4]10
.L1044:
	st.h	tcphdr_opt1len,d15
.L1045:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   201      opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
	ld.hu	d15,tcphdr_optlen
.L1046:
	ld.hu	d4,[a4]10
.L1047:
	sub	d15,d4
.L1048:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   202  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   203      /* options continue in the next pbuf: set p to zero length and hide the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   204          options in the next pbuf (adjusting p->tot_len) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   205      pbuf_remove_header(p, tcphdr_opt1len);
	extr.u	d15,d15,#0,#16
	call	pbuf_remove_header
.L753:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   206  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   207      /* check that the options fit in the second pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   208      if (opt2len > p->next->len) {
	ld.a	a15,[a10]20
.L755:
	ld.a	a4,[a15]
.L1049:
	ld.hu	d0,[a4]10
.L1050:
	jlt.u	d0,d15,.L14
.L1051:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   209        /* drop short packets */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   210        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   211        TCP_STATS_INC(tcp.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   212        goto dropped;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   213      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   214  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   215      /* remember the pointer to the second part of the options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   216      tcphdr_opt2 = (u8_t *)p->next->payload;
	ld.a	a15,[a4]4
.L756:
	st.a	tcphdr_opt2,a15
.L1052:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   217  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   218      /* advance p->next to point after the options, and manually
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   219          adjust p->tot_len to keep it consistent with the changed p->next */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   220      pbuf_remove_header(p->next, opt2len);
	mov	d4,d15
	call	pbuf_remove_header
.L1053:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   221      p->tot_len = (u16_t)(p->tot_len - opt2len);
	ld.a	a15,[a10]20
.L757:
	ld.hu	d0,[a15]8
.L1054:
	sub	d0,d15
	st.h	[a15]8,d0
.L1055:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   222  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   223      LWIP_ASSERT("p->len == 0", p->len == 0);
	ld.hu	d15,[a15]10
.L754:
	jeq	d15,#0,.L15
	movh.a	a15,#@his(.9.str)
.L758:
	lea	a15,[a15]@los(.9.str)
	st.a	[a10],a15
	mov	d15,#223
	st.w	[a10]4,d15
.L749:
	fcall	.cocofun_85
.L759:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L15:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   224      LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
	ld.a	a15,[a10]20
.L761:
	ld.hu	d15,[a15]8
	ld.a	a15,[a15]
.L762:
	ld.hu	d0,[a15]8
	jeq	d15,d0,.L16
	movh.a	a15,#@his(.10.str)
	lea	a15,[a15]@los(.10.str)
	st.a	[a10],a15
	mov	d15,#224
	st.w	[a10]4,d15
.L760:
	fcall	.cocofun_85
.L763:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L16:
.L12:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   225    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   226  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   227    /* Convert fields in TCP header to host byte order. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   228    tcphdr->src = lwip_ntohs(tcphdr->src);
	ld.a	a15,tcphdr
	ld.hu	d4,[a15]0
	call	lwip_htons
.L1056:
	st.h	[a15],d2
.L1057:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   229    tcphdr->dest = lwip_ntohs(tcphdr->dest);
	ld.a	a15,tcphdr
	ld.hu	d4,[+a15]2
	call	lwip_htons
.L1058:
	st.h	[a15],d2
.L1059:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   230    seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
	ld.a	a15,tcphdr
	ld.w	d4,[a15]4
	call	lwip_htonl
.L1060:
	ld.a	a15,tcphdr
.L1061:
	st.w	[a15]4,d2
.L1062:
	st.w	seqno,d2
.L1063:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   231    ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
	ld.w	d4,[a15]8
	call	lwip_htonl
.L1064:
	ld.a	a15,tcphdr
.L1065:
	st.w	[a15]8,d2
.L1066:
	st.w	ackno,d2
.L1067:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   232    tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
	ld.hu	d4,[a15]14
	call	lwip_htons
.L1068:
	st.h	[a15]14,d2
.L1069:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   233  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   234    flags = TCPH_FLAGS(tcphdr);
	fcall	.cocofun_96
	call	lwip_htons
.L1070:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   235    tcplen = p->tot_len;
	and	d15,d2,#63
	ld.a	a15,[a10]20
.L765:
	st.b	flags,d15
.L1071:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   236    if (flags & (TCP_FIN | TCP_SYN)) {
	and	d15,#3
.L1072:
	ld.hu	d0,[a15]8
.L1073:
	st.h	tcplen,d0
.L1074:
	jeq	d15,#0,.L17
.L1075:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   237      tcplen++;
	add	d15,d0,#1
	st.h	tcplen,d15
.L1076:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   238      if (tcplen < p->tot_len) {
	ld.hu	d15,tcplen
.L1077:
	jge.u	d15,d0,.L18
.L14:
.L10:
.L9:
.L3:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   239        /* u16_t overflow, cannot handle this */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   240        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   241        TCP_STATS_INC(tcp.lenerr);
	ld.a	a15,[a10]24
	ld.hu	d15,[a15]154
	add	d15,#1
	st.h	[a15]154,d15
.L1078:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   242        goto dropped;
	j	.L19
.L18:
.L17:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   243      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   244    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   245  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   246    /* Demultiplex an incoming segment. First, we check if it is destined
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   247       for an active connection. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   248    prev = NULL;
	mov.a	a15,#0
.L766:
	st.a	[a10]12,a15
.L767:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   249  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   250    for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
	ld.a	a14,tcp_active_pcbs
.L768:
	j	.L20
.L21:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   251      LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
	ld.bu	d15,[a14]20
	jne	d15,#0,.L22
	movh.a	a2,#@his(.12.str)
	lea	a2,[a2]@los(.12.str)
	st.a	[a10],a2
	mov	d15,#251
	st.w	[a10]4,d15
.L764:
	fcall	.cocofun_85
.L769:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L22:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   252      LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
	ld.bu	d0,[a14]20
	mov	d15,#10
	jne	d15,d0,.L23
	movh.a	a15,#@his(.13.str)
	lea	a15,[a15]@los(.13.str)
	st.a	[a10],a15
	mov	d15,#252
	st.w	[a10]4,d15
.L770:
	fcall	.cocofun_85
.L771:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L23:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   253      LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
	ld.bu	d15,[a14]20
	jne	d15,#1,.L24
	movh.a	a15,#@his(.14.str)
	lea	a15,[a15]@los(.14.str)
	st.a	[a10],a15
	mov	d15,#253
	st.w	[a10]4,d15
.L772:
	fcall	.cocofun_85
.L773:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L24:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   254  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   255      /* check if PCB is bound to specific netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   256      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
	ld.bu	d15,[a14]8
.L1079:
	jeq	d15,#0,.L25
.L1080:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   257          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
	fcall	.cocofun_97
.L774:
	jne	d15,d0,.L26
.L25:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   258        prev = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   259        continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   260      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   261  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   262      if (pcb->remote_port == tcphdr->src &&
	fcall	.cocofun_98
.L775:
	jne	d15,d0,.L27
.L1081:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   263          pcb->local_port == tcphdr->dest &&
	ld.hu	d15,[a14]22
.L1082:
	ld.hu	d0,[a15]2
.L1083:
	jne	d15,d0,.L28
.L1084:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   264          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
	ld.a	a15,[a10]16
	ld.w	d15,[a14]4
	ld.w	d0,[a15]
	jne	d15,d0,.L29
.L1085:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   265          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
	ld.w	d15,[a14]
	ld.w	d0,[a13]
	jne	d15,d0,.L30
.L1086:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   266        /* Move this PCB to the front of the list so that subsequent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   267           lookups will be faster (we exploit locality in TCP segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   268           arrivals). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   269        LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
	ld.a	a15,[a14]12
	jne.a	a15,a14,.L31
	movh.a	a15,#@his(.15.str)
	lea	a15,[a15]@los(.15.str)
	st.a	[a10],a15
	mov	d15,#269
	st.w	[a10]4,d15
.L776:
	fcall	.cocofun_85
.L777:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L31:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   270        if (prev != NULL) {
	ld.a	a15,[a10]12
.L779:
	jz.a	a15,.L32
.L1087:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   271          prev->next = pcb->next;
	ld.a	a2,[a14]12
.L1088:
	st.a	[a15]12,a2
.L1089:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   272          pcb->next = tcp_active_pcbs;
	ld.a	a15,tcp_active_pcbs
.L780:
	st.a	[a14]12,a15
.L1090:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   273          tcp_active_pcbs = pcb;
	st.a	tcp_active_pcbs,a14
.L1091:
	j	.L33
.L32:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   274        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   275          TCP_STATS_INC(tcp.cachehit);
	ld.a	a15,[a10]24
.L781:
	ld.hu	d15,[a15]166
	add	d15,#1
	st.h	[a15]166,d15
.L33:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   276        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   277        LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
	ld.a	a15,[a14]12
	jne.a	a15,a14,.L34
	movh.a	a15,#@his(.16.str)
	lea	a15,[a15]@los(.16.str)
	st.a	[a10],a15
	mov	d15,#277
	st.w	[a10]4,d15
.L778:
	fcall	.cocofun_85
.L782:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L1092:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   278        break;
	j	.L35
.L30:
.L29:
.L28:
.L27:
.L26:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   279      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   280      prev = pcb;
	st.a	[a10]12,a14
.L1093:
	ld.a	a14,[a14]12
.L20:
	jnz.a	a14,.L21

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   281    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   282  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   283    if (pcb == NULL) {
.L35:
.L34:
	jnz.a	a14,.L36
.L1094:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   284      /* If it did not go to an active connection, we check the connections
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   285         in the TIME-WAIT state. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   286      for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
	ld.a	a14,tcp_tw_pcbs
.L784:
	j	.L37
.L38:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   287        LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
	ld.bu	d0,[a14]20
	mov	d15,#10
	jeq	d15,d0,.L39
	movh.a	a15,#@his(.17.str)
	lea	a15,[a15]@los(.17.str)
	st.a	[a10],a15
	mov	d15,#287
	st.w	[a10]4,d15
.L783:
	fcall	.cocofun_85
.L785:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L39:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   288  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   289        /* check if PCB is bound to specific netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   290        if ((pcb->netif_idx != NETIF_NO_INDEX) &&
	ld.bu	d15,[a14]8
.L1095:
	jeq	d15,#0,.L40
.L1096:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   291            (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
	fcall	.cocofun_97
.L1097:
	jne	d15,d0,.L41
.L40:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   292          continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   293        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   294  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   295        if (pcb->remote_port == tcphdr->src &&
	fcall	.cocofun_98
.L1098:
	jne	d15,d0,.L42
.L1099:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   296            pcb->local_port == tcphdr->dest &&
	ld.hu	d15,[a14]22
.L1100:
	ld.hu	d0,[a15]2
.L1101:
	jne	d15,d0,.L43
.L1102:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   297            ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
	ld.a	a15,[a10]16
	ld.w	d15,[a14]4
	ld.w	d0,[a15]
	jne	d15,d0,.L44
.L1103:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   298            ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
	ld.w	d15,[a14]
	ld.w	d0,[a13]
	jne	d15,d0,.L45
.L1104:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   299          /* We don't really care enough to move this PCB to the front
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   300             of the list since we are not very likely to receive that
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   301             many segments for connections in TIME-WAIT. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   302          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   303  #ifdef LWIP_HOOK_TCP_INPACKET_PCB
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   304          if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   305                                         tcphdr_opt2, p) == ERR_OK)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   306  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   307          {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   308            tcp_timewait_input(pcb);
	mov.aa	a4,a14
.L787:
	call	tcp_timewait_input
.L788:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   309          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   310          pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   311          return;
	j	.L46
.L45:
.L44:
.L43:
.L42:
.L41:
	ld.a	a14,[a14]12
.L37:
	jnz.a	a14,.L38
.L1105:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   312        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   313      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   314  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   315      /* Finally, if we still did not get a match, we check all PCBs that
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   316         are LISTENing for incoming connections. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   317      prev = NULL;
	mov.a	a2,#0
.L786:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   318      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
	lea	a5,tcp_listen_pcbs
.L1106:
	ld.a	a4,[a5]
.L790:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   319        /* check if PCB is bound to specific netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   320        if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   321            (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   322          prev = (struct tcp_pcb *)lpcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   323          continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   324        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   325  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   326        if (lpcb->local_port == tcphdr->dest) {
	ld.a	a15,tcphdr
.L1107:
	j	.L47
.L48:
	ld.bu	d15,[a4]8
.L1108:
	jeq	d15,#0,.L49
.L1109:
	ld.a	a6,[a12]4
	ld.bu	d0,[a6]44
	add	d0,#1
	extr.u	d0,d0,#0,#8
.L1110:
	jne	d15,d0,.L50
.L49:
	ld.hu	d15,[a4]22
.L1111:
	ld.hu	d0,[a15]2
.L1112:
	jne	d15,d0,.L51
.L1113:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   327          if (IP_IS_ANY_TYPE_VAL(lpcb->local_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   328            /* found an ANY TYPE (IPv4/IPv6) match */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   329  #if SO_REUSE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   330            lpcb_any = lpcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   331            lpcb_prev = prev;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   332  #else /* SO_REUSE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   333            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   334  #endif /* SO_REUSE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   335          } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   336            if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
	ld.w	d15,[a4]
	ld.w	d0,[a13]
.L1114:
	jeq	d15,d0,.L52
.L1115:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   337              /* found an exact match */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   338              break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   339            } else if (ip_addr_isany(&lpcb->local_ip)) {
	jeq	d15,#0,.L53
.L51:
.L50:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   340              /* found an ANY-match */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   341  #if SO_REUSE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   342              lpcb_any = lpcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   343              lpcb_prev = prev;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   344  #else /* SO_REUSE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   345              break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   346  #endif /* SO_REUSE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   347            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   348          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   349        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   350        prev = (struct tcp_pcb *)lpcb;
	mov.aa	a2,a4
.L1116:
	ld.a	a4,[a4]12
.L47:
	jnz.a	a4,.L48

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   351      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   352  #if SO_REUSE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   353      /* first try specific local IP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   354      if (lpcb == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   355        /* only pass to ANY if no specific local IP has been found */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   356        lpcb = lpcb_any;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   357        prev = lpcb_prev;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   358      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   359  #endif /* SO_REUSE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   360      if (lpcb != NULL) {
.L53:
.L52:
	jz.a	a4,.L54
.L1117:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   361        /* Move this PCB to the front of the list so that subsequent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   362           lookups will be faster (we exploit locality in TCP segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   363           arrivals). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   364        if (prev != NULL) {
	jz.a	a2,.L55
.L1118:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   365          ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
	ld.a	a15,[a4]12
.L1119:
	st.a	[a2]12,a15
.L1120:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   366          /* our successor is the remainder of the listening list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   367          lpcb->next = tcp_listen_pcbs.listen_pcbs;
	ld.a	a15,[a5]
.L1121:
	st.a	[a4]12,a15
.L1122:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   368          /* put this listening pcb at the head of the listening list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   369          tcp_listen_pcbs.listen_pcbs = lpcb;
	st.a	[a5],a4
.L1123:
	j	.L56
.L55:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   370        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   371          TCP_STATS_INC(tcp.cachehit);
	ld.a	a15,[a10]24
	ld.hu	d15,[a15]166
	add	d15,#1
	st.h	[a15]166,d15
.L56:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   372        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   373  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   374        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   375  #ifdef LWIP_HOOK_TCP_INPACKET_PCB
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   376        if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   377                                       tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   378  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   379        {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   380          tcp_listen_input(lpcb);
	call	tcp_listen_input
.L789:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   381        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   382        pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   383        return;
	j	.L57
.L54:
.L36:
	fcall	.cocofun_96
.L1124:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   384      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   385    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   386  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   387  #if TCP_INPUT_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   388    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+- tcp_input: flags "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   389    tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
	call	lwip_htons
	and	d4,d2,#63
	call	tcp_debug_print_flags
.L1125:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   390    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   391  #endif /* TCP_INPUT_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   392  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   393  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   394  #ifdef LWIP_HOOK_TCP_INPACKET_PCB
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   395    if ((pcb != NULL) && LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   396        tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   397      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   398      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   399    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   400  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   401    if (pcb != NULL) {
	jz.a	a14,.L58
.L1126:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   402      /* The incoming segment belongs to a connection. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   403  #if TCP_INPUT_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   404      tcp_debug_print_state(pcb->state);
	ld.bu	d4,[a14]20
	call	tcp_debug_print_state
.L1127:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   405  #endif /* TCP_INPUT_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   406  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   407      /* Set up a tcp_seg structure. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   408      inseg.next = NULL;
	movh.a	a15,#@his(inseg)
	lea	a15,[a15]@los(inseg)
.L1128:
	mov.a	a2,#0
.L1129:
	st.a	[a15],a2
.L1130:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   409      inseg.len = p->tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   410      inseg.p = p;
	mov.aa	a12,a15
.L1131:
	ld.a	a4,[a10]20
.L791:
	ld.hu	d15,[a4]8
.L1132:
	st.h	[a15]8,d15
.L1133:
	st.a	[+a12]4,a4
.L1134:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   411      inseg.tcphdr = tcphdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   412  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   413      recv_data = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   414      recv_flags = 0;
	mov	d15,#0
.L1135:
	ld.a	a4,tcphdr
.L792:
	st.a	[a15]16,a4
.L1136:
	st.b	recv_flags,d15
.L1137:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   415      recv_acked = 0;
	st.h	recv_acked,d15
.L1138:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   416  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   417      if (flags & TCP_PSH) {
	ld.bu	d15,flags
.L1139:
	st.a	recv_data,a2
.L1140:
	jz.t	d15:3,.L59
.L1141:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   418        p->flags |= PBUF_FLAG_PUSH;
	ld.a	a15,[a10]20
.L793:
	ld.bu	d15,[a15]13
.L1142:
	or	d15,#1
	st.b	[a15]13,d15
.L59:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   419      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   420  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   421      /* If there is data which was previously "refused" by upper layer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   422      if (pcb->refused_data != NULL) {
	ld.w	d15,[a14]120
.L1143:
	jeq	d15,#0,.L60
.L1144:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   423        if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
	mov.aa	a4,a14
.L794:
	call	tcp_process_refused_data
.L795:
	mov	d15,#-13
.L1145:
	jeq	d15,d2,.L61
.L1146:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   424            ((pcb->refused_data != NULL) && (tcplen > 0))) {
	ld.w	d15,[a14]120
.L1147:
	jeq	d15,#0,.L62
.L1148:
	ld.hu	d15,tcplen
.L1149:
	jeq	d15,#0,.L63
.L61:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   425          /* pcb has been aborted or refused data is still refused and the new
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   426             segment contains data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   427          if (pcb->rcv_ann_wnd == 0) {
	ld.hu	d15,[a14]42
.L1150:
	jne	d15,#0,.L64
.L1151:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   428            /* this is a zero-window probe, we respond to it with current RCV.NXT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   429            and drop the data segment */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   430            tcp_send_empty_ack(pcb);
	mov.aa	a4,a14
.L796:
	call	tcp_send_empty_ack
.L64:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   431          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   432          TCP_STATS_INC(tcp.drop);
	ld.a	a15,[a10]24
	fcall	.cocofun_91
.L1152:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   433          MIB2_STATS_INC(mib2.tcpinerrs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   434          goto aborted;
	j	.L65
.L63:
.L62:
.L60:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   435        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   436      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   437      tcp_input_pcb = pcb;
	st.a	tcp_input_pcb,a14
.L1153:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   438      err = tcp_process(pcb);
	mov.aa	a4,a14
.L799:
	call	tcp_process
.L800:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   439      /* A return value of ERR_ABRT means that tcp_abort() was called
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   440         and that the pcb has been freed. If so, we don't do anything. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   441      if (err != ERR_ABRT) {
	mov	d15,#-13
.L1154:
	jeq	d15,d2,.L66
.L1155:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   442        if (recv_flags & TF_RESET) {
	ld.bu	d15,recv_flags
.L1156:
	jz.t	d15:3,.L67
.L1157:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   443          /* TF_RESET means that the connection was reset by the other
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   444             end. We then call the error callback to inform the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   445             application that the connection is dead before we
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   446             deallocate the PCB. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   447          TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
	ld.a	a15,[a14]144
	jz.a	a15,.L68
	ld.a	a4,[a14]16
	mov	d4,#-14
	calli	a15
.L68:
	lea	a4,tcp_active_pcbs
.L1158:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   448          tcp_pcb_remove(&tcp_active_pcbs, pcb);
	mov.aa	a5,a14
.L801:
	call	tcp_pcb_remove
.L802:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   449          tcp_free(pcb);
	mov.aa	a4,a14
.L803:
	call	tcp_free
.L804:
	j	.L69
.L67:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   450        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   451          err = ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   452          /* If the application has registered a "sent" function to be
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   453             called when new send buffer space is available, we call it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   454             now. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   455          if (recv_acked > 0) {
	ld.hu	d4,recv_acked
.L1159:
	jeq	d4,#0,.L70
.L639:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   456            u16_t acked16;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   457  #if LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   458            /* recv_acked is u32_t but the sent callback only takes a u16_t,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   459               so we might have to call it multiple times. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   460            u32_t acked = recv_acked;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   461            while (acked > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   462              acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   463              acked -= acked16;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   464  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   465            {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   466              acked16 = recv_acked;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   467  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   468              TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
	ld.a	a15,[a14]128
	jz.a	a15,.L71
	ld.a	a4,[a14]16
.L1160:
	mov.aa	a5,a14
.L805:
	calli	a15
.L806:
	j	.L72
.L71:
	mov	d2,#0
.L72:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   469              if (err == ERR_ABRT) {
	mov	d15,#-13
.L1161:
	jeq	d15,d2,.L73
.L1162:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   470                goto aborted;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   471              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   472            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   473            recv_acked = 0;
	mov	d15,#0
	st.h	recv_acked,d15
.L70:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   474          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   475          if (tcp_input_delayed_close(pcb)) {
	mov.aa	a4,a14
.L807:
	call	tcp_input_delayed_close
.L808:
	jne	d2,#0,.L74
.L1163:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   476            goto aborted;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   477          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   478  #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   479          while (recv_data != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   480            struct pbuf *rest = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   481            pbuf_split_64k(recv_data, &rest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   482  #else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   483          if (recv_data != NULL) {
	ld.w	d15,recv_data
.L1164:
	jeq	d15,#0,.L75
.L1165:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   484  #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   485  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   486            LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
	ld.w	d15,[a14]120
	jeq	d15,#0,.L76
	movh.a	a15,#@his(.22.str)
	lea	a15,[a15]@los(.22.str)
	st.a	[a10],a15
	mov	d15,#486
	st.w	[a10]4,d15
.L798:
	fcall	.cocofun_85
.L820:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L76:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   487            if (pcb->flags & TF_RXCLOSED) {
	ld.hu	d15,[a14]26
.L1166:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   488              /* received data although already closed -> abort (send RST) to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   489                 notify the remote host that not all data has been processed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   490              pbuf_free(recv_data);
	ld.a	a6,recv_data
.L1167:
	jz.t	d15:4,.L77
.L1168:
	mov.aa	a4,a6
	call	pbuf_free
.L1169:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   491  #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   492              if (rest != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   493                pbuf_free(rest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   494              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   495  #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   496              tcp_abort(pcb);
	mov.aa	a4,a14
.L809:
	call	tcp_abort
.L810:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   497              goto aborted;
	j	.L78
.L77:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   498            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   499  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   500            /* Notify application that data has been received. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   501            TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
	ld.a	a15,[a14]132
	jz.a	a15,.L79
	ld.a	a4,[a14]16
	mov	d4,#0
	mov.aa	a5,a14
.L811:
	calli	a15
.L812:
	j	.L80
.L79:
	mov.a	a4,#0
	mov	d4,#0
	mov.aa	a5,a14
.L813:
	call	tcp_recv_null
.L80:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   502            if (err == ERR_ABRT) {
	mov	d15,#-13
.L1170:
	jeq	d15,d2,.L81
.L1171:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   503  #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   504              if (rest != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   505                pbuf_free(rest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   506              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   507  #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   508              goto aborted;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   509            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   510  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   511            /* If the upper layer can't receive this data, store it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   512            if (err != ERR_OK) {
	jeq	d2,#0,.L82
.L1172:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   513  #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   514              if (rest != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   515                pbuf_cat(recv_data, rest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   516              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   517  #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   518              pcb->refused_data = recv_data;
	ld.a	a15,recv_data
.L1173:
	st.a	[a14]120,a15
.L82:
.L75:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   519              LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: keep incoming packet, because pcb is \"full\"\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   520  #if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   521              break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   522            } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   523              /* Upper layer received the data, go on with the rest if > 64K */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   524              recv_data = rest;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   525  #endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   526            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   527          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   528  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   529          /* If a FIN segment was received, we call the callback
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   530             function with a NULL buffer to indicate EOF. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   531          if (recv_flags & TF_GOT_FIN) {
	ld.bu	d15,recv_flags
.L1174:
	jz.t	d15:5,.L83
.L1175:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   532            if (pcb->refused_data != NULL) {
	ld.a	a15,[a14]120
.L1176:
	jz.a	a15,.L84
.L1177:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   533              /* Delay this if we have refused data. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   534              pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
	ld.bu	d15,[a15]13
.L1178:
	or	d15,#32
	st.b	[a15]13,d15
.L1179:
	j	.L85
.L84:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   535            } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   536              /* correct rcv_wnd as the application won't call tcp_recved()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   537                 for the FIN's seqno */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   538              if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
	ld.hu	d15,[a14]40
.L1180:
	mov	d0,#5840
.L1181:
	jeq	d15,d0,.L86
.L1182:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   539                pcb->rcv_wnd++;
	add	d15,#1
	st.h	[a14]40,d15
.L86:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   540              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   541              TCP_EVENT_CLOSED(pcb, err);
	ld.a	a15,[a14]132
	jz.a	a15,.L87
	ld.a	a4,[a14]16
	mov.a	a6,#0
	mov	d4,#0
	mov.aa	a5,a14
.L814:
	calli	a15
.L815:
	j	.L88
.L87:
	mov	d2,#0
.L88:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   542              if (err == ERR_ABRT) {
	mov	d15,#-13
.L1183:
	jeq	d15,d2,.L89
.L85:
.L83:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   543                goto aborted;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   544              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   545            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   546          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   547  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   548          tcp_input_pcb = NULL;
	mov.a	a15,#0
.L1184:
	st.a	tcp_input_pcb,a15
.L1185:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   549          if (tcp_input_delayed_close(pcb)) {
	mov.aa	a4,a14
.L816:
	call	tcp_input_delayed_close
.L817:
	jne	d2,#0,.L90
.L1186:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   550            goto aborted;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   551          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   552          /* Try to send something out. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   553          tcp_output(pcb);
	mov.aa	a4,a14
.L818:
	call	tcp_output
.L819:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   554  #if TCP_INPUT_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   555  #if TCP_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   556          tcp_debug_print_state(pcb->state);
	ld.bu	d4,[a14]20
	call	tcp_debug_print_state

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   557  #endif /* TCP_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   558  #endif /* TCP_INPUT_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   559        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   560      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   561      /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   562         Below this line, 'pcb' may not be dereferenced! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   563  aborted:
.L90:
.L89:
.L81:
.L78:
.L74:
.L73:
.L69:
.L66:
.L65:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   564      tcp_input_pcb = NULL;
	mov.a	a15,#0
.L1187:
	st.a	tcp_input_pcb,a15
.L1188:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   565      recv_data = NULL;
	st.a	recv_data,a15
.L1189:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   566  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   567      /* give up our reference to inseg.p */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   568      if (inseg.p != NULL) {
	ld.a	a4,[a12]
.L1190:
	jz.a	a4,.L91
.L1191:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   569        pbuf_free(inseg.p);
	call	pbuf_free
.L1192:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   570        inseg.p = NULL;
	mov.a	a15,#0
.L1193:
	st.a	[a12],a15
.L1194:
	j	.L92
.L58:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   571      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   572    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   573      /* If no matching PCB was found, send a TCP RST (reset) to the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   574         sender. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   575      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   576      if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
	fcall	.cocofun_96
	call	lwip_htons
.L1195:
	jnz.t	d2:2,.L93
.L1196:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   577        TCP_STATS_INC(tcp.proterr);
	ld.a	a15,[a10]24
	ld.hu	d15,[a15]160
	add	d15,#1
	st.h	[a15]160,d15
.L821:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   578        TCP_STATS_INC(tcp.drop);
	fcall	.cocofun_91
.L822:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   579        tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   580                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
	ld.a	a15,tcphdr
.L1197:
	ld.w	d5,seqno
.L1198:
	ld.hu	d15,tcplen
.L1199:
	mov.aa	a5,a13
.L1200:
	add	d5,d15
	ld.a	a6,[a10]16
.L1201:
	mov.a	a4,#0
.L1202:
	ld.w	d4,ackno
.L1203:
	ld.hu	d6,[a15]2
.L1204:
	ld.hu	d7,[a15]0
	call	tcp_rst
.L93:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   581      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   582      pbuf_free(p);
	ld.a	a4,[a10]20
.L824:
	call	pbuf_free
.L92:
.L91:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   583    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   584  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   585    LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
	call	tcp_pcbs_sane
	jne	d2,#0,.L94
	movh.a	a15,#@his(.25.str)
	lea	a15,[a15]@los(.25.str)
	st.a	[a10],a15
	mov	d15,#585
	st.w	[a10]4,d15
.L823:
	fcall	.cocofun_85
.L825:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	j	Ifx_Lwip_printf
.L94:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   586    PERF_STOP("tcp_input");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   587    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   588  dropped:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   589    TCP_STATS_INC(tcp.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   590    MIB2_STATS_INC(mib2.tcpinerrs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   591    pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   592  }
	ret
.L19:
.L8:
.L6:
	fcall	.cocofun_91
.L57:
.L46:
	ld.a	a4,[a10]20
.L826:
	j	pbuf_free
.L621:
	
__tcp_input_function_end:
	.size	tcp_input,__tcp_input_function_end-tcp_input
.L437:
	; End of function
	
	.sdecl	'.text.tcp_in..cocofun_98',code,cluster('.cocofun_98')
	.sect	'.text.tcp_in..cocofun_98'
	.align	2
; Function .cocofun_98
.L368:
.cocofun_98:	.type	func
; Function body .cocofun_98, coco_iter:0
	ld.a	a15,tcphdr
.L1827:
	ld.hu	d15,[a14]24
.L1828:
	ld.hu	d0,[a15]0
.L1829:
	fret
.L562:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_97',code,cluster('.cocofun_97')
	.sect	'.text.tcp_in..cocofun_97'
	.align	2
; Function .cocofun_97
.L370:
.cocofun_97:	.type	func
; Function body .cocofun_97, coco_iter:0
	ld.a	a15,[a12]4
	ld.bu	d0,[a15]44
	add	d0,#1
.L1822:
	extr.u	d0,d0,#0,#8
	fret
.L557:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_96',code,cluster('.cocofun_96')
	.sect	'.text.tcp_in..cocofun_96'
	.align	2
; Function .cocofun_96
.L372:
.cocofun_96:	.type	func
; Function body .cocofun_96, coco_iter:0
	ld.a	a15,tcphdr
.L1816:
	ld.hu	d4,[a15]12
.L1817:
	fret
.L552:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_91',code,cluster('.cocofun_91')
	.sect	'.text.tcp_in..cocofun_91'
	.align	2
; Function .cocofun_91
.L374:
.cocofun_91:	.type	func
; Function body .cocofun_91, coco_iter:0
	ld.hu	d15,[a15]150
	add	d15,#1
	st.h	[a15]150,d15
.L797:
	fret
.L527:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_85',code,cluster('.cocofun_85')
	.sect	'.text.tcp_in..cocofun_85'
	.align	2
; Function .cocofun_85
.L376:
.cocofun_85:	.type	func
; Function body .cocofun_85, coco_iter:0
	movh.a	a15,#@his(.3.str)
	lea	a15,[a15]@los(.3.str)
.L1759:
	fret
.L497:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_84',code,cluster('.cocofun_84')
	.sect	'.text.tcp_in..cocofun_84'
	.align	2
; Function .cocofun_84
.L378:
.cocofun_84:	.type	func
; Function body .cocofun_84, coco_iter:0
	movh.a	a4,#@his(.1.str)
.L730:
	lea	a4,[a4]@los(.1.str)
.L1754:
	fret
.L492:
	; End of function
	.sdecl	'.text.tcp_in.tcp_input_delayed_close',code,cluster('tcp_input_delayed_close')
	.sect	'.text.tcp_in.tcp_input_delayed_close'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   593  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   594  /** Called from tcp_input to check for TF_CLOSED flag. This results in closing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   595   * and deallocating a pcb at the correct place to ensure noone references it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   596   * any more.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   597   * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   598   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   599  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   600  tcp_input_delayed_close(struct tcp_pcb *pcb)
; Function tcp_input_delayed_close
.L380:
tcp_input_delayed_close:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   601  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   602    LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   603  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   604    if (recv_flags & TF_CLOSED) {
	ld.bu	d15,recv_flags
.L1701:
	mov.aa	a15,a4
.L828:
	jz.t	d15:4,.L96
.L1702:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   605      /* The connection has been closed and we will deallocate the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   606          PCB. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   607      if (!(pcb->flags & TF_RXCLOSED)) {
	ld.hu	d15,[a15]26
.L1703:
	jnz.t	d15:4,.L97
.L1704:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   608        /* Connection closed although the application has only shut down the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   609            tx side: call the PCB's err callback and indicate the closure to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   610            ensure the application doesn't continue using the PCB. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   611        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
	ld.a	a2,[a15]144
	jz.a	a2,.L98
	ld.a	a4,[a15]16
.L827:
	mov	d4,#-15
	calli	a2
.L98:
.L97:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   612      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   613      tcp_pcb_remove(&tcp_active_pcbs, pcb);
	lea	a4,tcp_active_pcbs
.L1705:
	mov.aa	a5,a15
.L829:
	call	tcp_pcb_remove
.L830:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   614      tcp_free(pcb);
	mov.aa	a4,a15
.L831:
	call	tcp_free
.L832:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   615      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   616    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   617    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   618  }
	mov	d2,#1
	ret
.L96:
	mov	d2,#0
	ret
.L705:
	
__tcp_input_delayed_close_function_end:
	.size	tcp_input_delayed_close,__tcp_input_delayed_close_function_end-tcp_input_delayed_close
.L472:
	; End of function
	
	.sdecl	'.text.tcp_in.tcp_listen_input',code,cluster('tcp_listen_input')
	.sect	'.text.tcp_in.tcp_listen_input'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   619  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   620  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   621   * Called by tcp_input() when a segment arrives for a listening
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   622   * connection (from tcp_input()).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   623   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   624   * @param pcb the tcp_pcb_listen for which a segment arrived
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   625   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   626   * @note the segment which arrived is saved in global variables, therefore only the pcb
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   627   *       involved is passed as a parameter to this function
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   628   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   629  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   630  tcp_listen_input(struct tcp_pcb_listen *pcb)
; Function tcp_listen_input
.L382:
tcp_listen_input:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   631  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   632    struct tcp_pcb *npcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   633    u32_t iss;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   634    err_t rc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   635  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   636    if (flags & TCP_RST) {
	ld.bu	d15,flags
.L1639:
	mov.aa	a12,a4
.L847:
	jnz.t	d15:2,.L101
.L1640:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   637      /* An incoming RST should be ignored. Return. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   638      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   639    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   640  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   641    LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   642  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   643    /* In the LISTEN state, we check for incoming SYN segments,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   644       creates a new PCB, and responds with a SYN|ACK. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   645    if (flags & TCP_ACK) {
	jz.t	d15:4,.L102
.L1641:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   646      /* For incoming segments with the ACK flag set, respond with a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   647         RST. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   648      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   649      tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   650              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
	fcall	.cocofun_102
.L833:
	ld.w	d4,ackno
.L1642:
	fcall	.cocofun_87
.L1643:
	mov.aa	a4,a12
.L836:
	j	tcp_rst
.L102:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   651    } else if (flags & TCP_SYN) {
	jz.t	d15:1,.L104
.L1644:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   652      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   653  #if TCP_LISTEN_BACKLOG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   654      if (pcb->accepts_pending >= pcb->backlog) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   655        LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   656        return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   657      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   658  #endif /* TCP_LISTEN_BACKLOG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   659      npcb = tcp_alloc(pcb->prio);
	ld.bu	d4,[a12]21
	call	tcp_alloc
.L837:
	mov.aa	a15,a2
.L839:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   660      /* If a new PCB could not be created (probably due to lack of memory),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   661         we don't do anything, but rely on the sender will retransmit the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   662         SYN at a time when we have more memory available. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   663      if (npcb == NULL) {
	jnz.a	a15,.L105
.L702:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   664        err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   665        LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   666        TCP_STATS_INC(tcp.memerr);
	movh.a	a2,#@his(lwip_stats+156)
.L838:
	ld.hu	d15,[a2]@los(lwip_stats+156)
	add	d15,#1
	st.h	[a2]@los(lwip_stats+156),d15
.L1645:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   667        TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
	ld.a	a15,[a12]24
.L840:
	jz.a	a15,.L106
	ld.a	a4,[a12]16
	mov.a	a5,#0
	mov	d4,#-1
	ji	a15
.L105:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   668        LWIP_UNUSED_ARG(err); /* err not useful here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   669        return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   670      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   671  #if TCP_LISTEN_BACKLOG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   672      pcb->accepts_pending++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   673      tcp_set_flags(npcb, TF_BACKLOGPEND);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   674  #endif /* TCP_LISTEN_BACKLOG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   675      /* Set up the new PCB. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   676      ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
	movh.a	a2,#@his(ip_data)
.L841:
	lea	a2,[a2]@los(ip_data)
	ld.w	d15,[a2]18
	st.w	[a15],d15
.L1646:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   677      ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   678      npcb->local_port = pcb->local_port;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   679      npcb->remote_port = tcphdr->src;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   680      npcb->state = SYN_RCVD;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   681      npcb->rcv_nxt = seqno + 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   682      npcb->rcv_ann_right_edge = npcb->rcv_nxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   683      iss = tcp_next_iss(npcb);
	mov.aa	a4,a15
.L842:
	ld.w	d15,[a2]14
	st.w	[a15]4,d15
.L1647:
	ld.hu	d15,[a12]22
.L1648:
	st.h	[a15]22,d15
.L1649:
	ld.a	a2,tcphdr
.L1650:
	ld.hu	d15,[a2]0
.L1651:
	st.h	[a15]24,d15
.L1652:
	mov	d15,#3
	st.b	[a15]20,d15
.L1653:
	ld.w	d15,seqno
.L1654:
	add	d15,#1
	st.w	[a15]36,d15
.L1655:
	st.w	[a15]44,d15
.L1656:
	call	tcp_next_iss
.L843:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   684      npcb->snd_wl2 = iss;
	st.w	[a15]88,d2
.L1657:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   685      npcb->snd_nxt = iss;
	st.w	[a15]80,d2
.L1658:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   686      npcb->lastack = iss;
	st.w	[a15]68,d2
.L1659:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   687      npcb->snd_lbb = iss;
	st.w	[a15]92,d2
.L1660:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   688      npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
	ld.w	d15,seqno
.L1661:
	add	d15,#-1
	st.w	[a15]84,d15
.L1662:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   689      npcb->callback_arg = pcb->callback_arg;
	ld.a	a2,[a12]16
.L1663:
	st.a	[a15]16,a2
.L1664:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   690  #if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   691      npcb->listener = pcb;
	st.a	[a15]124,a12
.L1665:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   692  #endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   693      /* inherit socket options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   694      npcb->so_options = pcb->so_options & SOF_INHERITED;
	ld.bu	d15,[a12]9
.L1666:
	and	d15,#12
	st.b	[a15]9,d15
.L1667:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   695      npcb->netif_idx = pcb->netif_idx;
	ld.bu	d15,[a12]8
.L1668:
	st.b	[a15]8,d15
.L1669:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   696      /* Register the new PCB so that we can begin receiving segments
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   697         for it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   698      TCP_REG_ACTIVE(npcb);
	ld.a	a2,tcp_active_pcbs
	st.a	[a15]12,a2
	st.a	tcp_active_pcbs,a15
	call	tcp_timer_needed
.L844:
	mov	d15,#1
	st.b	tcp_active_pcbs_changed,d15
.L1670:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   699  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   700      /* Parse any options in the SYN. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   701      tcp_parseopt(npcb);
	mov.aa	a4,a15
.L845:
	call	tcp_parseopt
.L1671:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   702      npcb->snd_wnd = tcphdr->wnd;
	fcall	.cocofun_92
.L846:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   703      npcb->snd_wnd_max = npcb->snd_wnd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   704  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   705  #if TCP_CALCULATE_EFF_SEND_MSS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   706      npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
	lea	a4,[a15]4
	call	ip4_route
	ld.hu	d4,[a15]50
	lea	a5,[a15]4
	mov.aa	a4,a2
	call	tcp_eff_send_mss_netif
.L1672:
	st.h	[a15]50,d2
.L1673:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   707  #endif /* TCP_CALCULATE_EFF_SEND_MSS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   708  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   709      MIB2_STATS_INC(mib2.tcppassiveopens);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   710  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   711  #if LWIP_TCP_PCB_NUM_EXT_ARGS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   712      if (tcp_ext_arg_invoke_callbacks_passive_open(pcb, npcb) != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   713        tcp_abandon(npcb, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   714        return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   715      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   716  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   717  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   718      /* Send a SYN|ACK together with the MSS option. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   719      rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
	mov	d4,#18
	mov.aa	a4,a15
.L848:
	call	tcp_enqueue_flags
.L849:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   720      if (rc != ERR_OK) {
	jeq	d2,#0,.L108
.L1674:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   721        tcp_abandon(npcb, 0);
	mov	d4,#0
	mov.aa	a4,a15
.L850:
	j	tcp_abandon
.L108:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   722        return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   723      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   724      tcp_output(npcb);
	mov.aa	a4,a15
.L851:
	j	tcp_output
.L106:
.L104:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   725    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   726    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   727  }
.L101:
	ret
.L696:
	
__tcp_listen_input_function_end:
	.size	tcp_listen_input,__tcp_listen_input_function_end-tcp_listen_input
.L462:
	; End of function
	
	.sdecl	'.text.tcp_in..cocofun_102',code,cluster('.cocofun_102')
	.sect	'.text.tcp_in..cocofun_102'
	.align	2
; Function .cocofun_102
.L384:
.cocofun_102:	.type	func
; Function body .cocofun_102, coco_iter:1
	ld.a	a2,tcphdr
.L1854:
	movh.a	a4,#@his(ip_data)
.L834:
	lea	a4,[a4]@los(ip_data)
.L1855:
	fret
.L582:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_92',code,cluster('.cocofun_92')
	.sect	'.text.tcp_in..cocofun_92'
	.align	2
; Function .cocofun_92
.L386:
.cocofun_92:	.type	func
; Function body .cocofun_92, coco_iter:0
	ld.a	a2,tcphdr
.L1794:
	ld.hu	d15,[a2]14
.L1795:
	st.h	[a15]96,d15
.L1796:
	st.h	[a15]98,d15
.L1797:
	fret
.L532:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_87',code,cluster('.cocofun_87')
	.sect	'.text.tcp_in..cocofun_87'
	.align	2
; Function .cocofun_87
.L388:
.cocofun_87:	.type	func
; Function body .cocofun_87, coco_iter:0
	ld.w	d5,seqno
.L1770:
	fcall	.cocofun_101
.L835:
	fret
.L507:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_101',code,cluster('.cocofun_101')
	.sect	'.text.tcp_in..cocofun_101'
	.align	2
; Function .cocofun_101
.L390:
.cocofun_101:	.type	func
; Function body .cocofun_101, coco_iter:1
	ld.hu	d15,tcplen
.L1845:
	lea	a5,[a4]18
.L1846:
	add	d5,d15
	lea	a6,[a4]14
.L1847:
	ld.hu	d6,[a2]2
.L1848:
	ld.hu	d7,[a2]0
.L1849:
	fret
.L577:
	; End of function
	.sdecl	'.text.tcp_in.tcp_timewait_input',code,cluster('tcp_timewait_input')
	.sect	'.text.tcp_in.tcp_timewait_input'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   728  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   729  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   730   * Called by tcp_input() when a segment arrives for a connection in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   731   * TIME_WAIT.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   732   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   733   * @param pcb the tcp_pcb for which a segment arrived
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   734   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   735   * @note the segment which arrived is saved in global variables, therefore only the pcb
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   736   *       involved is passed as a parameter to this function
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   737   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   738  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   739  tcp_timewait_input(struct tcp_pcb *pcb)
; Function tcp_timewait_input
.L392:
tcp_timewait_input:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   740  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   741    /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   742    /* RFC 793 3.9 Event Processing - Segment Arrives:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   743     * - first check sequence number - we skip that one in TIME_WAIT (always
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   744     *   acceptable since we only send ACKs)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   745     * - second check the RST bit (... return) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   746    if (flags & TCP_RST) {
	ld.bu	d15,flags
.L1679:
	jnz.t	d15:2,.L110
.L1680:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   747      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   748    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   749  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   750    LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   751  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   752    /* - fourth, check the SYN bit, */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   753    if (flags & TCP_SYN) {
	jz.t	d15:1,.L111
.L1681:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   754      /* If an incoming segment is not acceptable, an acknowledgment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   755         should be sent in reply */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   756      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
	ld.w	d0,[a4]36
	ld.w	d15,seqno
	sub	d1,d15,d0
	jlt	d1,#0,.L112
	ld.hu	d1,[a4]40
	add	d0,d1
	sub	d0,d15,d0
	jge	d0,#1,.L113
.L1682:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   757        /* If the SYN is in the window it is an error, send a reset */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   758        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   759                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
	ld.a	a15,tcphdr
.L1683:
	movh.a	a2,#@his(ip_data)
.L1684:
	ld.hu	d5,tcplen
.L1685:
	lea	a2,[a2]@los(ip_data)
.L1686:
	add	d5,d15
	ld.w	d4,ackno
.L1687:
	ld.hu	d6,[a15]2
.L1688:
	ld.hu	d7,[a15]0
.L1689:
	lea	a5,[a2]18
.L1690:
	lea	a6,[a2]14
.L1691:
	j	tcp_rst
.L111:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   760        return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   761      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   762    } else if (flags & TCP_FIN) {
	jz.t	d15:0,.L115
.L1692:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   763      /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   764           Restart the 2 MSL time-wait timeout.*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   765      pcb->tmr = tcp_ticks;
	ld.w	d15,tcp_ticks
.L1693:
	st.w	[a4]32,d15
.L115:
.L113:
.L112:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   766    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   767  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   768    if ((tcplen > 0)) {
	ld.hu	d15,tcplen
.L1694:
	jeq	d15,#0,.L116
.L1695:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   769      /* Acknowledge data, FIN or out-of-window SYN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   770      tcp_ack_now(pcb);
	ld.hu	d15,[a4]26
	or	d15,#2
	st.h	[a4]26,d15
.L1696:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   771      tcp_output(pcb);
	j	tcp_output
.L116:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   772    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   773    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   774  }
.L110:
	ret
.L703:
	
__tcp_timewait_input_function_end:
	.size	tcp_timewait_input,__tcp_timewait_input_function_end-tcp_timewait_input
.L467:
	; End of function
	
	.sdecl	'.text.tcp_in.tcp_process',code,cluster('tcp_process')
	.sect	'.text.tcp_in.tcp_process'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   775  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   776  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   777   * Implements the TCP state machine. Called by tcp_input. In some
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   778   * states tcp_receive() is called to receive data. The tcp_seg
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   779   * argument will be freed by the caller (tcp_input()) unless the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   780   * recv_data pointer in the pcb is set.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   781   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   782   * @param pcb the tcp_pcb for which a segment arrived
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   783   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   784   * @note the segment which arrived is saved in global variables, therefore only the pcb
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   785   *       involved is passed as a parameter to this function
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   786   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   787  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   788  tcp_process(struct tcp_pcb *pcb)
; Function tcp_process
.L394:
tcp_process:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   789  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   790    struct tcp_seg *rseg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   791    u8_t acceptable = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   792    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   793  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   794    err = ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   795  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   796    LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   797  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   798    /* Process incoming RST segments. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   799    if (flags & TCP_RST) {
	mov	d0,#0
	ld.bu	d15,flags
.L854:
	mov.aa	a15,a4
.L856:
	sub.a	a10,#16
.L852:
	jz.t	d15:2,.L117
.L1214:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   800      /* First, determine if the reset is acceptable. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   801      if (pcb->state == SYN_SENT) {
	ld.bu	d15,[a15]20
.L1215:
	jne	d15,#2,.L118
.L1216:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   802        /* "In the SYN-SENT state (a RST received in response to an initial SYN),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   803            the RST is acceptable if the ACK field acknowledges the SYN." */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   804        if (ackno == pcb->snd_nxt) {
	ld.w	d15,ackno
.L1217:
	ld.w	d1,[a15]80
.L1218:
	jne	d15,d1,.L119
.L1219:
	j	.L120
.L118:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   805          acceptable = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   806        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   807      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   808        /* "In all states except SYN-SENT, all reset (RST) segments are validated
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   809            by checking their SEQ-fields." */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   810        if (seqno == pcb->rcv_nxt) {
	ld.w	d15,[a15]36
.L1220:
	ld.w	d1,seqno
.L1221:
	jne	d15,d1,.L121
.L120:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   811          acceptable = 1;
	mov	d0,#1
	j	.L122
.L121:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   812        } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
	sub	d2,d1,d15
	jlt	d2,#0,.L123
	ld.hu	d2,[a15]40
	add	d15,d2
	sub	d1,d15
	jge	d1,#1,.L124
.L1222:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   813                                    pcb->rcv_nxt + pcb->rcv_wnd)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   814          /* If the sequence number is inside the window, we send a challenge ACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   815             and wait for a re-send with matching sequence number.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   816             This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   817             (RST spoofing attack), which is present in RFC 793 RST handling. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   818          tcp_ack_now(pcb);
	fcall	.cocofun_93
.L124:
.L123:
.L122:
.L119:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   819        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   820      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   821  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   822      if (acceptable) {
	jeq	d0,#0,.L125
.L1223:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   823        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   824        LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
	ld.bu	d15,[a15]20
	jne	d15,#0,.L126
	movh.a	a2,#@his(.34.str)
	lea	a2,[a2]@los(.34.str)
	st.a	[a10],a2
	mov	d15,#824
	st.w	[a10]4,d15
.L855:
	fcall	.cocofun_89
.L857:
	st.a	[a10]8,a2
	fcall	.cocofun_84
.L858:
	call	Ifx_Lwip_printf
.L126:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   825        recv_flags |= TF_RESET;
	st.t	recv_flags:3,#1
.L1224:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   826        tcp_clear_flags(pcb, TF_ACK_DELAY);
	mov.u	d0,#65534
	ld.hu	d15,[a15]26
.L1225:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   827        return ERR_RST;
	mov	d2,#-14
.L1226:
	and	d15,d0
	st.h	[a15]26,d15
.L1227:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   828      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   829        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   830                                      seqno, pcb->rcv_nxt));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   831        LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   832                                seqno, pcb->rcv_nxt));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   833        return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   834      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   835    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   836  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   837    if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   838      /* Cope with new connection attempt after remote end crashed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   839      tcp_ack_now(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   840      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   841    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   842  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   843    if ((pcb->flags & TF_RXCLOSED) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   844      /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   845      pcb->tmr = tcp_ticks;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   846    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   847    pcb->keep_cnt_sent = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   848    pcb->persist_probe = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   849  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   850    tcp_parseopt(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   851  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   852    /* Do different things depending on the TCP state. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   853    switch (pcb->state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   854      case SYN_SENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   855        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   856                                      pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   857        /* received SYN ACK with expected sequence number? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   858        if ((flags & TCP_ACK) && (flags & TCP_SYN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   859            && (ackno == pcb->lastack + 1)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   860          pcb->rcv_nxt = seqno + 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   861          pcb->rcv_ann_right_edge = pcb->rcv_nxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   862          pcb->lastack = ackno;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   863          pcb->snd_wnd = tcphdr->wnd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   864          pcb->snd_wnd_max = pcb->snd_wnd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   865          pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   866          pcb->state = ESTABLISHED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   867  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   868  #if TCP_CALCULATE_EFF_SEND_MSS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   869          pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   870  #endif /* TCP_CALCULATE_EFF_SEND_MSS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   871  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   872          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   873          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   874                                       " ssthresh %"TCPWNDSIZE_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   875                                       pcb->cwnd, pcb->ssthresh));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   876          LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   877          --pcb->snd_queuelen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   878          LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   879          rseg = pcb->unacked;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   880          if (rseg == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   881            /* might happen if tcp_output fails in tcp_rexmit_rto()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   882               in which case the segment is on the unsent list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   883            rseg = pcb->unsent;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   884            LWIP_ASSERT("no segment to free", rseg != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   885            pcb->unsent = rseg->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   886          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   887            pcb->unacked = rseg->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   888          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   889          tcp_seg_free(rseg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   890  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   891          /* If there's nothing left to acknowledge, stop the retransmit
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   892             timer, otherwise reset it to start again */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   893          if (pcb->unacked == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   894            pcb->rtime = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   895          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   896            pcb->rtime = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   897            pcb->nrtx = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   898          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   899  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   900          /* Call the user specified function to call when successfully
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   901           * connected. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   902          TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   903          if (err == ERR_ABRT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   904            return ERR_ABRT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   905          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   906          tcp_ack_now(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   907        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   908        /* received ACK? possibly a half-open connection */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   909        else if (flags & TCP_ACK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   910          /* send a RST to bring the other side in a non-synchronized state. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   911          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   912                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   913          /* Resend SYN immediately (don't wait for rto timeout) to establish
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   914            connection faster, but do not send more SYNs than we otherwise would
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   915            have, or we might get caught in a loop on loopback interfaces. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   916          if (pcb->nrtx < TCP_SYNMAXRTX) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   917            pcb->rtime = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   918            tcp_rexmit_rto(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   919          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   920        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   921        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   922      case SYN_RCVD:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   923        if (flags & TCP_ACK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   924          /* expected ACK number? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   925          if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   926            pcb->state = ESTABLISHED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   927            LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   928  #if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   929            if (pcb->listener == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   930              /* listen pcb might be closed by now */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   931              err = ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   932            } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   933  #endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   934            {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   935  #if LWIP_CALLBACK_API
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   936              LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   937  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   938              tcp_backlog_accepted(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   939              /* Call the accept function. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   940              TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   941            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   942            if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   943              /* If the accept function returns with an error, we abort
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   944               * the connection. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   945              /* Already aborted? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   946              if (err != ERR_ABRT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   947                tcp_abort(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   948              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   949              return ERR_ABRT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   950            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   951            /* If there was any data contained within this ACK,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   952             * we'd better pass it on to the application as well. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   953            tcp_receive(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   954  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   955            /* Prevent ACK for SYN to generate a sent event */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   956            if (recv_acked != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   957              recv_acked--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   958            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   959  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   960            pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   961            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   962                                         " ssthresh %"TCPWNDSIZE_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   963                                         pcb->cwnd, pcb->ssthresh));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   964  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   965            if (recv_flags & TF_GOT_FIN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   966              tcp_ack_now(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   967              pcb->state = CLOSE_WAIT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   968            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   969          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   970            /* incorrect ACK number, send RST */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   971            tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   972                    ip_current_src_addr(), tcphdr->dest, tcphdr->src);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   973          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   974        } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   975          /* Looks like another copy of the SYN - retransmit our SYN-ACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   976          tcp_rexmit(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   977        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   978        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   979      case CLOSE_WAIT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   980      /* FALLTHROUGH */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   981      case ESTABLISHED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   982        tcp_receive(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   983        if (recv_flags & TF_GOT_FIN) { /* passive close */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   984          tcp_ack_now(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   985          pcb->state = CLOSE_WAIT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   986        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   987        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   988      case FIN_WAIT_1:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   989        tcp_receive(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   990        if (recv_flags & TF_GOT_FIN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   991          if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   992              pcb->unsent == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   993            LWIP_DEBUGF(TCP_DEBUG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   994                        ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   995            tcp_ack_now(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   996            tcp_pcb_purge(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   997            TCP_RMV_ACTIVE(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   998            pcb->state = TIME_WAIT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	   999            TCP_REG(&tcp_tw_pcbs, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1000          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1001            tcp_ack_now(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1002            pcb->state = CLOSING;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1003          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1004        } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1005                   pcb->unsent == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1006          pcb->state = FIN_WAIT_2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1007        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1008        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1009      case FIN_WAIT_2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1010        tcp_receive(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1011        if (recv_flags & TF_GOT_FIN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1012          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1013          tcp_ack_now(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1014          tcp_pcb_purge(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1015          TCP_RMV_ACTIVE(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1016          pcb->state = TIME_WAIT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1017          TCP_REG(&tcp_tw_pcbs, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1018        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1019        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1020      case CLOSING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1021        tcp_receive(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1022        if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1023          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1024          tcp_pcb_purge(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1025          TCP_RMV_ACTIVE(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1026          pcb->state = TIME_WAIT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1027          TCP_REG(&tcp_tw_pcbs, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1028        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1029        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1030      case LAST_ACK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1031        tcp_receive(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1032        if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1033          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1034          /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1035          recv_flags |= TF_CLOSED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1036        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1037        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1038      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1039        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1040    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1041    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1042  }
	ret
.L117:
	jz.t	d15:1,.L128
.L1228:
	ld.bu	d15,[a15]20
.L1229:
	jeq	d15,#2,.L129
.L1230:
	jne	d15,#3,.L130
.L129:
.L128:
	ld.hu	d15,[a15]26
.L1231:
	jnz.t	d15:4,.L131
.L1232:
	ld.w	d15,tcp_ticks
.L1233:
	st.w	[a15]32,d15
.L131:
	mov	d15,#0
	st.b	[a15]155,d15
.L1234:
	st.b	[a15]154,d15
.L1235:
	call	tcp_parseopt
.L859:
	ld.bu	d0,[a15]20
.L1236:
	jeq	d0,#2,.L132
.L1237:
	jeq	d0,#3,.L133
.L1238:
	jeq	d0,#4,.L134
.L1239:
	jeq	d0,#5,.L135
.L1240:
	jeq	d0,#6,.L136
.L1241:
	jeq	d0,#7,.L137
.L1242:
	mov	d15,#8
	jeq	d15,d0,.L138
.L1243:
	mov	d15,#9
	jeq	d15,d0,.L139
	j	.L140
.L132:
	ld.bu	d15,flags
.L1244:
	jz.t	d15:4,.L141
.L1245:
	jz.t	d15:1,.L142
.L1246:
	ld.w	d0,[a15]68
.L1247:
	ld.w	d1,ackno
.L1248:
	add	d0,#1
.L1249:
	jne	d1,d0,.L143
.L1250:
	ld.w	d0,seqno
.L1251:
	add	d15,d0,#1
	st.w	[a15]36,d15
.L1252:
	st.w	[a15]44,d15
.L1253:
	st.w	[a15]68,d1
.L1254:
	fcall	.cocofun_92
.L1255:
	add	d0,#-1
	st.w	[a15]84,d0
.L1256:
	mov	d15,#4
	st.b	[a15]20,d15
.L1257:
	lea	a4,[a15]4
	call	ip4_route
	ld.hu	d4,[a15]50
	lea	a5,[a15]4
	mov.aa	a4,a2
	call	tcp_eff_send_mss_netif
.L1258:
	sh	d15,d2,#2
	st.h	[a15]50,d2
.L1259:
	sh	d2,#1
	mov	d0,#4380
	max.u	d0,d2,d0
.L1260:
	min.u	d15,d15,d0
	st.h	[a15]72,d15
.L1261:
	ld.hu	d15,[a15]102
	jne	d15,#0,.L144
	movh.a	a2,#@his(.38.str)
	lea	a2,[a2]@los(.38.str)
	st.a	[a10],a2
	mov	d15,#876
	st.w	[a10]4,d15
.L860:
	fcall	.cocofun_89
.L861:
	st.a	[a10]8,a2
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L144:
	ld.hu	d15,[a15]102
.L1262:
	add	d15,#-1
	st.h	[a15]102,d15
.L1263:
	ld.a	a12,[a15]112
.L863:
	jnz.a	a12,.L145
.L1264:
	ld.a	a12,[a15]108
.L1265:
	jnz.a	a12,.L146
.L1266:
	movh.a	a2,#@his(.40.str)
	lea	a2,[a2]@los(.40.str)
	st.a	[a10],a2
	mov	d15,#884
	st.w	[a10]4,d15
.L862:
	fcall	.cocofun_89
.L864:
	st.a	[a10]8,a2
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L146:
	ld.a	a2,[a12]
.L1267:
	st.a	[a15]108,a2
.L1268:
	j	.L147
.L145:
	ld.a	a2,[a12]
.L1269:
	st.a	[a15]112,a2
.L147:
	mov.aa	a4,a12
.L866:
	call	tcp_seg_free
.L867:
	ld.w	d15,[a15]112
.L1270:
	jne	d15,#0,.L148
.L1271:
	mov	d15,#-1
	st.h	[a15]48,d15
.L1272:
	j	.L149
.L148:
	mov	d15,#0
	st.h	[a15]48,d15
.L1273:
	st.b	[a15]66,d15
.L149:
	ld.a	a2,[a15]136
	jz.a	a2,.L150
	ld.a	a4,[a15]16
	mov	d4,#0
	mov.aa	a5,a15
.L868:
	calli	a2
.L869:
	j	.L151
.L150:
	mov	d2,#0
.L151:
	mov	d15,#-13
.L1274:
	jeq	d15,d2,.L152
.L130:
	fcall	.cocofun_93
.L865:
	j	.L153
.L143:
.L142:
.L141:
	jz.t	d15:4,.L154
.L1275:
	fcall	.cocofun_102
.L1276:
	ld.w	d5,seqno
.L1277:
	ld.w	d4,ackno
.L1278:
	fcall	.cocofun_101
.L1279:
	mov.aa	a4,a15
.L871:
	call	tcp_rst
.L872:
	ld.bu	d15,[a15]66
.L1280:
	jge.u	d15,#6,.L155
.L1281:
	mov	d15,#0
	st.h	[a15]48,d15
.L1282:
	mov.aa	a4,a15
.L873:
	call	tcp_rexmit_rto
.L874:
	j	.L156
.L133:
	ld.bu	d15,flags
.L1283:
	jz.t	d15:4,.L157
.L1284:
	ld.w	d4,ackno
	ld.w	d15,[a15]68
	sub	d15,d4,d15
	add	d15,#-1
	jlt	d15,#0,.L158
	ld.w	d15,[a15]80
	sub	d15,d4,d15
	jge	d15,#1,.L159
.L1285:
	mov	d15,#4
	st.b	[a15]20,d15
.L1286:
	ld.a	a2,[a15]124
.L1287:
	jnz.a	a2,.L160
.L1288:
	mov	d2,#-6
	j	.L161
.L160:
	ld.w	d15,[a2]24
	jne	d15,#0,.L162
	movh.a	a2,#@his(.42.str)
	lea	a2,[a2]@los(.42.str)
	st.a	[a10],a2
	mov	d15,#936
	st.w	[a10]4,d15
.L870:
	fcall	.cocofun_89
.L875:
	st.a	[a10]8,a2
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L162:
	ld.a	a2,[a15]124
	ld.a	a2,[a2]24
	jz.a	a2,.L163
	ld.a	a4,[a15]16
	mov	d4,#0
	mov.aa	a5,a15
.L877:
	calli	a2
.L878:
	j	.L164
.L163:
	mov	d2,#-16
.L164:
.L161:
	jeq	d2,#0,.L165
.L1289:
	mov	d15,#-13
.L1290:
	jeq	d15,d2,.L166
.L1291:
	mov.aa	a4,a15
.L879:
	call	tcp_abort
.L166:
.L152:
	mov	d2,#-13
	ret
.L165:
	mov.aa	a4,a15
.L881:
	call	tcp_receive
.L880:
	ld.hu	d15,recv_acked
.L1292:
	mov	d1,#4380
.L1293:
	cadd	d15,d15,#-1
	st.h	recv_acked,d15
.L1294:
	ld.hu	d15,[a15]50
	sh	d0,d15,#2
	sh	d15,#1
	max.u	d15,d15,d1
.L1295:
	min.u	d15,d0,d15
	st.h	[a15]72,d15
.L1296:
	j	.L168
.L159:
.L158:
	fcall	.cocofun_102
.L876:
	fcall	.cocofun_87
.L906:
	mov.aa	a4,a15
.L882:
	call	tcp_rst
.L883:
	j	.L169
.L157:
	jz.t	d15:1,.L170
.L1297:
	ld.w	d15,[a15]36
.L1298:
	ld.w	d0,seqno
.L1299:
	add	d15,#-1
.L1300:
	jne	d15,d0,.L171
.L1301:
	mov.aa	a4,a15
.L884:
	call	tcp_rexmit
.L885:
	j	.L172
.L134:
.L137:
	mov.aa	a4,a15
.L886:
	call	tcp_receive
.L168:
	ld.bu	d15,recv_flags
.L1302:
	jz.t	d15:5,.L173
.L1303:
	fcall	.cocofun_93
.L1304:
	mov	d15,#7
	j	.L174
.L135:
	mov.aa	a4,a15
.L887:
	call	tcp_receive
.L888:
	ld.bu	d15,flags
.L1305:
	and	d0,d15,#16
	ld.bu	d15,recv_flags
.L1306:
	jz.t	d15:5,.L175
.L1307:
	ld.hu	d15,[a15]26
	or	d15,#2
.L1308:
	jeq	d0,#0,.L176
.L1309:
	ld.w	d0,ackno
.L1310:
	ld.w	d1,[a15]80
.L1311:
	jne	d0,d1,.L177
.L1312:
	ld.w	d0,[a15]108
.L1313:
	jne	d0,#0,.L178
.L1314:
	st.h	[a15]26,d15
.L1315:
	mov.aa	a4,a15
.L889:
	call	tcp_pcb_purge
.L890:
	lea	a2,tcp_active_pcbs
	ld.a	a4,[a2]
.L891:
	jeq.a	a4,a15,.L179
.L648:
	j	.L180
.L181:
	ld.a	a2,[a4]12
	jeq.a	a2,a15,.L183
	mov.aa	a4,a2
.L180:
	jnz.a	a4,.L181
.L649:
	j	.L184
.L178:
.L177:
.L176:
	st.h	[a15]26,d15
.L1316:
	mov	d15,#8
	j	.L185
.L175:
	jeq	d0,#0,.L186
.L1317:
	fcall	.cocofun_99
.L1318:
	jne	d15,d0,.L187
.L1319:
	ld.w	d15,[a15]108
.L1320:
	jne	d15,#0,.L188
.L1321:
	mov	d15,#6
.L185:
.L174:
	st.b	[a15]20,d15
.L1322:
	j	.L189
.L136:
	mov.aa	a4,a15
.L892:
	call	tcp_receive
.L893:
	ld.bu	d15,recv_flags
.L1323:
	jz.t	d15:5,.L190
.L1324:
	fcall	.cocofun_93
.L1325:
	mov.aa	a4,a15
.L894:
	call	tcp_pcb_purge
.L895:
	lea	a2,tcp_active_pcbs
	ld.a	a4,[a2]
.L896:
	jeq.a	a4,a15,.L191
.L651:
	j	.L192
.L193:
	ld.a	a2,[a4]12
	jne.a	a2,a15,.L194
.L183:
	ld.a	a2,[a15]12
.L897:
	st.a	[a4]12,a2
.L898:
	j	.L195
.L194:
	mov.aa	a4,a2
.L192:
	jnz.a	a4,.L193
.L652:
	j	.L196
.L138:
	mov.aa	a4,a15
.L899:
	call	tcp_receive
.L900:
	ld.bu	d15,flags
.L1326:
	jz.t	d15:4,.L197
.L1327:
	fcall	.cocofun_99
.L1328:
	jne	d15,d0,.L198
.L1329:
	ld.w	d15,[a15]108
.L1330:
	jne	d15,#0,.L199
.L1331:
	mov.aa	a4,a15
.L901:
	call	tcp_pcb_purge
.L902:
	lea	a2,tcp_active_pcbs
	ld.a	a4,[a2]
	jne.a	a4,a15,.L200
.L191:
.L179:
	ld.a	a4,[a4]12
	st.a	[a2],a4
	j	.L201
.L200:
	ld.a	a2,[a2]
.L903:
	j	.L202
.L203:
	ld.a	a4,[a2]12
	jne.a	a4,a15,.L204
	ld.a	a4,[a15]12
	st.a	[a2]12,a4
	j	.L205
.L204:
	mov.aa	a2,a4
.L202:
	jnz.a	a2,.L203
.L205:
.L201:
.L196:
.L195:
.L184:
	mov.a	a2,#0
	st.a	[a15]12,a2
	mov	d15,#1
	st.b	tcp_active_pcbs_changed,d15
.L1332:
	mov	d15,#10
	st.b	[a15]20,d15
.L1333:
	ld.a	a2,tcp_tw_pcbs
	st.a	[a15]12,a2
	st.a	tcp_tw_pcbs,a15
	call	tcp_timer_needed
.L1334:
	j	.L206
.L139:
	mov.aa	a4,a15
.L904:
	call	tcp_receive
.L905:
	ld.bu	d15,flags
.L1335:
	jz.t	d15:4,.L207
.L1336:
	fcall	.cocofun_99
.L1337:
	jne	d15,d0,.L208
.L1338:
	ld.w	d15,[a15]108
.L1339:
	jne	d15,#0,.L209
.L1340:
	st.t	recv_flags:4,#1
.L209:
.L208:
.L207:
.L206:
.L199:
.L198:
.L197:
.L190:
.L189:
.L188:
.L187:
.L186:
.L173:
.L172:
.L171:
.L170:
.L169:
.L156:
.L155:
.L154:
.L153:
.L140:
.L125:
	mov	d2,#0
	ret
.L641:
	
__tcp_process_function_end:
	.size	tcp_process,__tcp_process_function_end-tcp_process
.L447:
	; End of function
	
	.sdecl	'.text.tcp_in..cocofun_99',code,cluster('.cocofun_99')
	.sect	'.text.tcp_in..cocofun_99'
	.align	2
; Function .cocofun_99
.L396:
.cocofun_99:	.type	func
; Function body .cocofun_99, coco_iter:0
	ld.w	d15,ackno
.L1834:
	ld.w	d0,[a15]80
.L1835:
	fret
.L567:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_93',code,cluster('.cocofun_93')
	.sect	'.text.tcp_in..cocofun_93'
	.align	2
; Function .cocofun_93
.L398:
.cocofun_93:	.type	func
; Function body .cocofun_93, coco_iter:0
	ld.hu	d15,[a15]26
	or	d15,#2
	st.h	[a15]26,d15
.L853:
	fret
.L537:
	; End of function
	.sdecl	'.text.tcp_in.tcp_oos_insert_segment',code,cluster('tcp_oos_insert_segment')
	.sect	'.text.tcp_in.tcp_oos_insert_segment'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1043  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1044  #if TCP_QUEUE_OOSEQ
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1045  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1046   * Insert segment into the list (segments covered with new one will be deleted)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1047   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1048   * Called from tcp_receive()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1049   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1050  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1051  tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
; Function tcp_oos_insert_segment
.L400:
tcp_oos_insert_segment:	.type	func
	mov.aa	a12,a4
.L908:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1052  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1053    struct tcp_seg *old_seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1054  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1055    LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1056  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1057    if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
	ld.a	a2,[a12]16
.L1710:
	mov.aa	a13,a5
.L909:
	ld.hu	d4,[a2]12
	call	lwip_htons
.L907:
	jz.t	d2:0,.L213
.L1711:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1058      /* received segment overlaps all following segments */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1059      tcp_segs_free(next);
	mov.aa	a4,a13
.L910:
	call	tcp_segs_free
.L911:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1060      next = NULL;
	mov.a	a13,#0
.L1712:
	j	.L212

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1061    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1062      /* delete some following segments
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1063         oos queue may have segments with FIN flag */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1064      while (next &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1065             TCP_SEQ_GEQ((seqno + cseg->len),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1066                         (next->tcphdr->seqno + next->len))) {
.L214:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1067        /* cseg with FIN already processed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1068        if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
	ld.a	a2,[a13]16
	ld.hu	d4,[a2]12
	call	lwip_htons
.L1713:
	jz.t	d2:0,.L215
.L1714:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1069          TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
	ld.a	a15,[a12]16
	mov	d4,#1
	ld.hu	d15,[a15]12
	call	lwip_htons
	or	d15,d2
	st.h	[a15]12,d15
.L215:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1070        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1071        old_seg = next;
	mov.aa	a4,a13
.L912:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1072        next = next->next;
	ld.a	a13,[a13]
.L1715:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1073        tcp_seg_free(old_seg);
	call	tcp_seg_free
.L213:
	jz.a	a13,.L216
.L1716:
	ld.a	a15,[a13]16
	ld.hu	d15,[a12]8
	ld.w	d0,seqno
	ld.hu	d1,[a13]8
	add	d0,d15
	ld.w	d15,[a15]4
	add	d15,d1
	sub	d0,d15
	jge	d0,#0,.L214
.L216:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1074      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1075      if (next &&
	jz.a	a13,.L217
.L1717:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1076          TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
	ld.a	a15,[a13]16
	ld.hu	d15,[a12]8
	ld.w	d0,seqno
	ld.w	d1,[a15]4
	add	d15,d0
	sub	d15,d1
	jlt	d15,#1,.L218
.L1718:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1077        /* We need to trim the incoming segment. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1078        cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
	sub	d1,d0
	st.h	[a12]8,d1
.L1719:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1079        pbuf_realloc(cseg->p, cseg->len);
	ld.a	a4,[a12]4
.L1720:
	ld.hu	d4,[a12]8
	call	pbuf_realloc
.L218:
.L217:
.L212:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1080      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1081    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1082    cseg->next = next;
	st.a	[a12],a13
.L1721:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1083  }
	ret
.L707:
	
__tcp_oos_insert_segment_function_end:
	.size	tcp_oos_insert_segment,__tcp_oos_insert_segment_function_end-tcp_oos_insert_segment
.L477:
	; End of function
	
	.sdecl	'.text.tcp_in.tcp_free_acked_segments',code,cluster('tcp_free_acked_segments')
	.sect	'.text.tcp_in.tcp_free_acked_segments'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1084  #endif /* TCP_QUEUE_OOSEQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1085  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1086  /** Remove segments from a list if the incoming ACK acknowledges them */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1087  static struct tcp_seg *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1088  tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
; Function tcp_free_acked_segments
.L402:
tcp_free_acked_segments:	.type	func
	sub.a	a10,#16
.L913:
	mov.aa	a12,a4
.L914:
	mov.aa	a13,a5
.L916:
	mov.aa	a14,a7
.L917:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1089                          struct tcp_seg *dbg_other_seg_list)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1090  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1091    struct tcp_seg *next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1092    u16_t clen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1093  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1094    LWIP_UNUSED_ARG(dbg_list_name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1095    LWIP_UNUSED_ARG(dbg_other_seg_list);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1096  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1097    while (seg_list != NULL &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1098           TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1099                       TCP_TCPLEN(seg_list), ackno)) {
	j	.L219
.L220:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1100      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1101                                    lwip_ntohl(seg_list->tcphdr->seqno),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1102                                    lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1103                                    dbg_list_name));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1104  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1105      next = seg_list;
	st.a	[a10]12,a13
.L918:
	mov.aa	a15,a13
.L919:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1106      seg_list = seg_list->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1107  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1108      clen = pbuf_clen(next->p);
	ld.a	a4,[a15]4
.L1726:
	ld.a	a13,[a13]
.L1727:
	call	pbuf_clen
.L921:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1109      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1110                                   (tcpwnd_size_t)pcb->snd_queuelen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1111      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
	mov	d8,d2
	ld.hu	d15,[a12]102
.L922:
	jge.u	d15,d8,.L221
	movh.a	a15,#@his(.51.str)
.L920:
	lea	a15,[a15]@los(.51.str)
	st.a	[a10],a15
	mov	d15,#1111
	st.w	[a10]4,d15
.L915:
	fcall	.cocofun_85
.L923:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L221:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1112  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1113      pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
	ld.hu	d15,[a12]102
.L1728:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1114      recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
	ld.a	a4,[a10]12
.L925:
	sub	d15,d8
	st.h	[a12]102,d15
.L1729:
	ld.hu	d15,recv_acked
.L1730:
	ld.hu	d0,[a4]8
.L1731:
	add	d15,d0
	st.h	recv_acked,d15
.L1732:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1115      tcp_seg_free(next);
	call	tcp_seg_free
.L926:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1116  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1117      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1118                                   (tcpwnd_size_t)pcb->snd_queuelen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1119                                   dbg_list_name));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1120      if (pcb->snd_queuelen != 0) {
	ld.hu	d15,[a12]102
.L1733:
	jeq	d15,#0,.L222
.L1734:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1121        LWIP_ASSERT("tcp_receive: valid queue length",
	jnz.a	a13,.L223
.L1735:
	jnz.a	a14,.L224
.L1736:
	movh.a	a15,#@his(.53.str)
	lea	a15,[a15]@los(.53.str)
	st.a	[a10],a15
	mov	d15,#1121
	st.w	[a10]4,d15
.L924:
	fcall	.cocofun_85
.L927:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L224:
.L223:
.L222:
.L219:
	jz.a	a13,.L225
.L1737:
	ld.a	a15,[a13]16
	ld.hu	d4,[a15]12
	call	lwip_htons
	ld.a	a15,[a13]16
	and	d15,d2,#3
	ld.w	d4,[a15]4
	call	lwip_htonl
	ld.hu	d0,[a13]8
	cadd	d0,d15,#1
	ld.w	d15,ackno
	add	d2,d0
	sub	d2,d15
	jlt	d2,#1,.L220
.L225:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1122                    seg_list != NULL || dbg_other_seg_list != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1123      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1124    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1125    return seg_list;
	mov.aa	a2,a13
.L928:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1126  }
	ret
.L711:
	
__tcp_free_acked_segments_function_end:
	.size	tcp_free_acked_segments,__tcp_free_acked_segments_function_end-tcp_free_acked_segments
.L482:
	; End of function
	
	.sdecl	'.text.tcp_in.tcp_receive',code,cluster('tcp_receive')
	.sect	'.text.tcp_in.tcp_receive'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1127  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1128  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1129   * Called by tcp_process. Checks if the given segment is an ACK for outstanding
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1130   * data, and if so frees the memory of the buffered data. Next, it places the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1131   * segment on any of the receive queues (pcb->recved or pcb->ooseq). If the segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1132   * is buffered, the pbuf is referenced by pbuf_ref so that it will not be freed until
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1133   * it has been removed from the buffer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1134   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1135   * If the incoming segment constitutes an ACK for a segment that was used for RTT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1136   * estimation, the RTT is estimated here as well.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1137   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1138   * Called from tcp_process().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1139   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1140  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1141  tcp_receive(struct tcp_pcb *pcb)
; Function tcp_receive
.L404:
tcp_receive:	.type	func
	mov.aa	a12,a4
.L931:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1142  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1143    s16_t m;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1144    u32_t right_wnd_edge;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1145    int found_dupack = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1146  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1147    LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1148    LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
	ld.bu	d15,[a12]20
.L1345:
	mov	d8,#0
	sub.a	a10,#40
.L929:
	jge.u	d15,#4,.L227
.L1346:
	movh.a	a2,#@his(.55.str)
	lea	a2,[a2]@los(.55.str)
	st.a	[a10],a2
	mov	d15,#1148
	st.w	[a10]4,d15
.L930:
	fcall	.cocofun_85
.L932:
	st.a	[a10]8,a15
	fcall	.cocofun_84
.L933:
	call	Ifx_Lwip_printf
.L227:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1149  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1150    if (flags & TCP_ACK) {
	ld.bu	d15,flags
.L1347:
	jz.t	d15:4,.L228
.L1348:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1151      /* 本地发送窗口的右边界=上次窗口更新时的确认序号+当前发送窗口大小 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1152      right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1153  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1154      /* Update window. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1155      if (TCP_SEQ_LT(pcb->snd_wl1, seqno) || //对方有发送新的数据
	ld.w	d2,seqno
	ld.w	d3,[a12]84
.L1349:
	ld.w	d0,[a12]88
.L1350:
	sub	d4,d3,d2
	ld.hu	d1,[a12]96
.L1351:
	add	d9,d1,d0
.L935:
	jlt	d4,#0,.L229
.L1352:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1156          (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) || //对方无发送新的数据但接收到我方发出的数据
	jne	d3,d2,.L230
.L1353:
	ld.w	d4,ackno
	sub	d15,d0,d4
	jlt	d15,#0,.L231
.L230:
	ld.w	d4,ackno
.L1354:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1157          (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) { //无收到我方的新数据且，通告对方接收窗口大于我方发送窗口
	jne	d0,d4,.L232
.L1355:
	ld.a	a2,tcphdr
	ld.hu	d15,[a2]14
.L1356:
	jge.u	d1,d15,.L233
.L231:
.L229:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1158        pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);//根据通告窗口设置发送窗口
	ld.a	a15,tcphdr
.L1357:
	ld.w	d15,ackno
.L1358:
	ld.hu	d0,[a15]14
.L1359:
	st.h	[a12]96,d0
.L1360:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1159        /* keep track of the biggest window announced by the remote host to calculate
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1160           the maximum segment size ,限制发送窗口 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1161        if (pcb->snd_wnd_max < pcb->snd_wnd) {
	ld.hu	d1,[a12]98
.L1361:
	jge.u	d1,d0,.L234
.L1362:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1162          pcb->snd_wnd_max = pcb->snd_wnd;
	st.h	[a12]98,d0
.L234:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1163        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1164        /* 更新发送窗口的参数 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1165        pcb->snd_wl1 = seqno;
	st.w	[a12]84,d2
.L1363:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1166        pcb->snd_wl2 = ackno;
	st.w	[a12]88,d15
.L1364:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1167        LWIP_DEBUGF(TCP_WND_DEBUG | LWIP_DBG_STATE, ("tcp_receive: window update %"TCPWNDSIZE_F"\n", pcb->snd_wnd));
	movh.a	a4,#@his(.56.str)
	ld.hu	d15,[a12]96
	st.w	[a10],d15
	lea	a4,[a4]@los(.56.str)
.L1365:
	j	.L235
.L233:
.L232:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1168  #if TCP_WND_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1169      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1170        if (pcb->snd_wnd != (tcpwnd_size_t)SND_WND_SCALE(pcb, tcphdr->wnd)) {
	ld.a	a15,tcphdr
	ld.hu	d15,[a15]14
.L1366:
	jeq	d15,d1,.L236
.L1367:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1171          LWIP_DEBUGF(TCP_WND_DEBUG | LWIP_DBG_STATE,
	ld.w	d15,[a12]68
	st.w	[a10],d15
	st.w	[a10]4,d4
	st.w	[a10]8,d3
	st.w	[a10]12,d2
	st.w	[a10]16,d0
	movh.a	a4,#@his(.57.str)
	lea	a4,[a4]@los(.57.str)
.L235:
	call	Ifx_Lwip_printf
.L236:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1172                      ("tcp_receive: no window update lastack %"U32_F" ackno %"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1173                       U32_F" wl1 %"U32_F" seqno %"U32_F" wl2 %"U32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1174                       pcb->lastack, ackno, pcb->snd_wl1, seqno, pcb->snd_wl2));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1175        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1176  #endif /* TCP_WND_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1177      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1178  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1179      /* (From Stevens TCP/IP Illustrated Vol II, p970.) Its only a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1180       * duplicate ack if:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1181       * 1) It doesn't ACK new data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1182       * 2) length of received packet is zero (i.e. no payload)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1183       * 3) the advertised window hasn't changed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1184       * 4) There is outstanding unacknowledged data (retransmission timer running)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1185       * 5) The ACK is == biggest ACK sequence number so far seen (snd_una)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1186       *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1187       * If it passes all five, should process as a dupack:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1188       * a) dupacks < 3: do nothing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1189       * b) dupacks == 3: fast retransmit
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1190       * c) dupacks > 3: increase cwnd
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1191       *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1192       * If it only passes 1-3, should reset dupack counter (and add to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1193       * stats, which we don't do in lwIP)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1194       *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1195       * If it only passes 1, should reset dupack counter
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1196       *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1197       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1198  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1199      /* Clause 1 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1200      if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
	ld.w	d1,[a12]68
	ld.w	d15,ackno
.L1368:
	mov	d10,#0
.L1369:
	sub	d0,d15,d1
.L1370:
	jge	d0,#1,.L237
.L1371:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1201        /* Clause 2 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1202        if (tcplen == 0) {
	ld.hu	d0,tcplen
.L1372:
	jne	d0,#0,.L238
.L1373:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1203          /* Clause 3 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1204          if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
	ld.w	d0,[a12]88
.L1374:
	ld.hu	d2,[a12]96
.L1375:
	add	d0,d2
.L1376:
	jne	d0,d9,.L239
.L1377:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1205            /* Clause 4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1206            if (pcb->rtime >= 0) {
	ld.h	d0,[a12]48
.L1378:
	jlt	d0,#0,.L240
.L1379:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1207              /* Clause 5 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1208              if (pcb->lastack == ackno) {
	jne	d15,d1,.L241
.L1380:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1209                found_dupack = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1210                if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
	ld.bu	d0,[a12]67
.L1381:
	mov	d8,#1
.L1382:
	add	d15,d0,#1
.L1383:
	extr.u	d15,d15,#0,#8
.L1384:
	jge.u	d0,d15,.L242
.L1385:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1211                  ++pcb->dupacks;
	st.b	[a12]67,d15
.L242:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1212                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1213                if (pcb->dupacks > 3) {
	ld.bu	d15,[a12]67
.L1386:
	jlt.u	d15,#4,.L243
.L1387:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1214                  /* Inflate the congestion window */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1215                  TCP_WND_INC(pcb->cwnd, pcb->mss);
	fcall	.cocofun_94
.L934:
	jlt.u	d0,d15,.L244
.L936:
	st.h	[a12]72,d0
	j	.L245
.L244:
	mov.u	d15,#65535
	st.h	[a12]72,d15
.L245:
.L243:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1216                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1217                if (pcb->dupacks >= 3) {
	ld.bu	d15,[a12]67
.L1388:
	jlt.u	d15,#3,.L246
.L1389:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1218                  /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1219                  tcp_rexmit_fast(pcb);
	mov.aa	a4,a12
.L938:
	call	tcp_rexmit_fast
.L246:
.L241:
.L240:
.L239:
.L238:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1220                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1221              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1222            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1223          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1224        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1225        /* If Clause (1) or more is true, but not a duplicate ack, reset
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1226         * count of consecutive duplicate acks */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1227        if (!found_dupack) {
	jne	d8,#0,.L247
.L1390:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1228          pcb->dupacks = 0;
	mov	d15,#0
	st.b	[a12]67,d15
.L1391:
	j	.L248
.L237:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1229        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1230      } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
	add	d0,#-1
	jlt	d0,#0,.L249
	ld.w	d0,[a12]80
	sub	d0,d15,d0
	jge	d0,#1,.L250
.L664:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1231        /* We come here when the ACK acknowledges new data. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1232        tcpwnd_size_t acked;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1233  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1234        /* Reset the "IN Fast Retransmit" flag, since we are no longer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1235           in fast retransmit. Also reset the congestion window to the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1236           slow start threshold. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1237        if (pcb->flags & TF_INFR) {
	ld.hu	d0,[a12]26
.L1392:
	jz.t	d0:2,.L251
.L1393:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1238          tcp_clear_flags(pcb, TF_INFR);
	mov.u	d1,#65531
	and	d0,d1
	st.h	[a12]26,d0
.L1394:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1239          pcb->cwnd = pcb->ssthresh;
	ld.hu	d0,[a12]74
.L1395:
	st.h	[a12]72,d0
.L1396:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1240          pcb->bytes_acked = 0;
	st.h	[a12]106,d10
.L251:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1241        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1242  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1243        /* Reset the number of retransmissions. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1244        pcb->nrtx = 0;
	mov	d1,#0
	st.b	[a12]66,d1
.L1397:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1245  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1246        /* Reset the retransmission time-out. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1247        pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
	ld.h	d0,[a12]60
.L1398:
	ld.h	d2,[a12]62
.L1399:
	sha	d0,#-3
.L1400:
	add	d0,d2
	st.h	[a12]64,d0
.L1401:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1248  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1249        /* Record how much data this ACK acks */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1250        acked = (tcpwnd_size_t)(ackno - pcb->lastack);
	ld.w	d0,[a12]68
.L1402:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1251  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1252        /* Reset the fast retransmit variables. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1253        pcb->dupacks = 0;
	st.b	[a12]67,d1
.L1403:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1254        pcb->lastack = ackno;
	sub	d0,d15,d0
	st.w	[a12]68,d15
.L1404:
	extr.u	d0,d0,#0,#16
.L939:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1255  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1256        /* Update the congestion control variables (cwnd and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1257           ssthresh). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1258        if (pcb->state >= ESTABLISHED) {
	ld.bu	d15,[a12]20
.L1405:
	jlt.u	d15,#4,.L252
.L1406:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1259          if (pcb->cwnd < pcb->ssthresh) {
	ld.hu	d1,[a12]72
.L1407:
	ld.hu	d15,[a12]74
.L1408:
	jge.u	d1,d15,.L253
.L667:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1260            tcpwnd_size_t increase;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1261            /* limit to 1 SMSS segment during period following RTO */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1262            u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
	mov	d2,#2048
	ld.hu	d15,[a12]26
.L1409:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1263            /* RFC 3465, section 2.2 Slow Start */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1264            increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
	and	d15,d2
	ld.hu	d2,[a12]50
.L1410:
	eq	d15,d15,#0
.L941:
	add	d15,#1
.L1411:
	mul	d15,d2
.L942:
	extr.u	d15,d15,#0,#16
	min.u	d15,d0,d15
.L943:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1265            TCP_WND_INC(pcb->cwnd, increase);
	add	d15,d1
.L944:
	extr.u	d15,d15,#0,#16
	jlt.u	d15,d1,.L254
	j	.L255
.L253:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1266            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1267          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1268            /* RFC 3465, section 2.1 Congestion Avoidance */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1269            TCP_WND_INC(pcb->bytes_acked, acked);
	ld.hu	d15,[a12]106
	add	d0,d15
.L940:
	extr.u	d0,d0,#0,#16
	jlt.u	d0,d15,.L256
	st.h	[a12]106,d0
	j	.L257
.L256:
	mov.u	d15,#65535
	st.h	[a12]106,d15
.L257:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1270            if (pcb->bytes_acked >= pcb->cwnd) {
	ld.hu	d0,[a12]72
.L1412:
	ld.hu	d15,[a12]106
.L1413:
	jlt.u	d15,d0,.L258
.L1414:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1271              pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
	sub	d15,d0
	st.h	[a12]106,d15
.L937:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1272              TCP_WND_INC(pcb->cwnd, pcb->mss);
	fcall	.cocofun_94
.L945:
	jlt.u	d0,d15,.L259
	st.h	[a12]72,d0
	j	.L260
.L259:
.L254:
	mov.u	d15,#65535
.L255:
	st.h	[a12]72,d15
.L260:
.L258:
.L252:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1273            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1274            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: congestion avoidance cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1275          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1276        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1277        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: ACK for %"U32_F", unacked->seqno %"U32_F":%"U32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1278                                      ackno,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1279                                      pcb->unacked != NULL ?
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1280                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1281                                      pcb->unacked != NULL ?
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1282                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1283  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1284        /* Remove segment from the unacknowledged list if the incoming
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1285           ACK acknowledges them. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1286        pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
	ld.a	a5,[a12]112
.L1415:
	lea	a6,.61.str
.L1416:
	ld.a	a7,[a12]108
	mov.aa	a4,a12
.L948:
	call	tcp_free_acked_segments
.L949:
	st.a	[a12]112,a2
.L1417:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1287        /* We go through the ->unsent list to see if any of the segments
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1288           on the list are acknowledged by the ACK. This may seem
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1289           strange since an "unsent" segment shouldn't be acked. The
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1290           rationale is that lwIP puts all outstanding segments on the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1291           ->unsent list after a retransmission, so these segments may
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1292           in fact have been sent once. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1293        pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
	lea	a6,.62.str
.L1418:
	ld.a	a5,[a12]108
.L1419:
	mov.aa	a4,a12
.L950:
	mov.aa	a7,a2
	call	tcp_free_acked_segments
.L951:
	st.a	[a12]108,a2
.L1420:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1294  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1295        /* If there's nothing left to acknowledge, stop the retransmit
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1296           timer, otherwise reset it to start again */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1297        if (pcb->unacked == NULL) {
	ld.a	a15,[a12]112
.L1421:
	mov.a	a2,#0
.L1422:
	ne.a	d15,a15,a2
.L1423:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1298          pcb->rtime = -1;
	add	d15,#-1
	st.h	[a12]48,d15
.L1424:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1299        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1300          pcb->rtime = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1301        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1302  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1303        pcb->polltmr = 0;
	mov	d15,#0
	st.b	[a12]28,d15
.L1425:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1304  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1305  #if TCP_OVERSIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1306        if (pcb->unsent == NULL) {
	ld.w	d15,[a12]108
.L1426:
	jne	d15,#0,.L261
.L1427:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1307          pcb->unsent_oversize = 0;
	st.h	[a12]104,d10
.L261:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1308        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1309  #endif /* TCP_OVERSIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1310  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1311  #if LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1312        if (ip_current_is_v6()) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1313          /* Inform neighbor reachability of forward progress. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1314          nd6_reachability_hint(ip6_current_src_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1315        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1316  #endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1317  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1318        pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
	ld.hu	d15,[a12]100
.L1428:
	ld.hu	d0,recv_acked
.L1429:
	add	d15,d0
	st.h	[a12]100,d15
.L1430:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1319        /* check if this ACK ends our retransmission of in-flight data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1320        if (pcb->flags & TF_RTO) {
	ld.hu	d15,[a12]26
.L1431:
	jz.t	d15:11,.L262
.L1432:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1321          /* RTO is done if
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1322              1) both queues are empty or
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1323              2) unacked is empty and unsent head contains data not part of RTO or
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1324              3) unacked head contains data not part of RTO */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1325          if (pcb->unacked == NULL) {
	ld.a	a15,[a12]112
.L1433:
	jnz.a	a15,.L263
.L1434:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1326            if ((pcb->unsent == NULL) ||
	ld.a	a15,[a12]108
.L1435:
	jz.a	a15,.L264
.L1436:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1327                (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
	ld.a	a15,[a15]16
	ld.w	d15,[a12]76
	ld.w	d4,[a15]4
	call	lwip_htonl
	sub	d15,d2
	jge	d15,#1,.L265
.L1437:
	j	.L266
.L263:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1328              tcp_clear_flags(pcb, TF_RTO);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1329            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1330          } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
	ld.a	a15,[a15]16
	ld.w	d15,[a12]76
	ld.w	d4,[a15]4
	call	lwip_htonl
	sub	d15,d2
.L1438:
	jge	d15,#1,.L267
.L266:
.L264:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1331            tcp_clear_flags(pcb, TF_RTO);
	ld.hu	d15,[a12]26
	mov.u	d0,#63487
	and	d15,d0
	st.h	[a12]26,d15
.L665:
	j	.L268
.L250:
.L249:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1332          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1333        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1334        /* End of ACK for new data processing. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1335      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1336        /* Out of sequence ACK, didn't really ack anything */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1337        tcp_send_empty_ack(pcb);
	mov.aa	a4,a12
.L952:
	call	tcp_send_empty_ack
.L268:
.L267:
.L265:
.L262:
.L248:
.L247:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1338      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1339  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1340      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: pcb->rttest %"U32_F" rtseq %"U32_F" ackno %"U32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1341                                  pcb->rttest, pcb->rtseq, ackno));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1342  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1343      /* RTT estimation calculations. This is done by checking if the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1344         incoming segment acknowledges the segment we use to take a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1345         round-trip time measurement. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1346      if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
	ld.w	d0,[a12]52
.L1439:
	jeq	d0,#0,.L269
.L1440:
	ld.w	d15,[a12]56
	ld.w	d1,ackno
	sub	d15,d1
	jge	d15,#0,.L270
.L1441:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1347        /* diff between this shouldn't exceed 32K since this are tcp timer ticks
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1348           and a round-trip shouldn't be that long... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1349        m = (s16_t)(tcp_ticks - pcb->rttest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1350  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1351        LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1352                                    m, (u16_t)(m * TCP_SLOW_INTERVAL)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1353  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1354        /* This is taken directly from VJs original code in his paper */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1355        m = (s16_t)(m - (pcb->sa >> 3));
	ld.h	d1,[a12]60
.L1442:
	ld.w	d15,tcp_ticks
.L1443:
	sub	d15,d0
.L1444:
	sha	d0,d1,#-3
.L1445:
	sub	d15,d0
.L1446:
	extr	d15,d15,#0,#16
.L953:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1356        pcb->sa = (s16_t)(pcb->sa + m);
	add	d1,d15
	st.h	[a12]60,d1
.L1447:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1357        if (m < 0) {
	abs	d15,d15
.L954:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1358          m = (s16_t) - m;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1359        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1360        m = (s16_t)(m - (pcb->sv >> 2));
	ld.h	d0,[a12]62
.L1448:
	sha	d1,d0,#-2
.L1449:
	sub	d15,d1
.L1450:
	extr	d15,d15,#0,#16
.L955:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1361        pcb->sv = (s16_t)(pcb->sv + m);
	add	d0,d15
	st.h	[a12]62,d0
.L1451:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1362        pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
	ld.h	d15,[a12]60
.L956:
	ld.h	d0,[a12]62
.L1452:
	sha	d15,#-3
.L1453:
	add	d15,d0
	st.h	[a12]64,d15
.L1454:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1363  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1364        LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1365                                    pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1366  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1367        pcb->rttest = 0;
	mov	d15,#0
	st.w	[a12]52,d15
.L270:
.L269:
.L228:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1368      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1369    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1370  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1371    /* If the incoming segment contains data, we must process it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1372       further unless the pcb already received a FIN.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1373       (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1374       LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1375    if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
	mov	d8,#0
	ld.hu	d1,tcplen
.L946:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1376      /* This code basically does three things:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1377  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1378      +) If the incoming segment contains data that is the next
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1379      in-sequence data, this data is passed to the application. This
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1380      might involve trimming the first edge of the data. The rcv_nxt
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1381      variable and the advertised window are adjusted.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1382  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1383      +) If the incoming segment has data that is above the next
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1384      sequence number expected (->rcv_nxt), the segment is placed on
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1385      the ->ooseq queue. This is done by finding the appropriate
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1386      place in the ->ooseq queue (which is ordered by sequence
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1387      number) and trim the segment in both ends if needed. An
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1388      immediate ACK is sent to indicate that we received an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1389      out-of-sequence segment.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1390  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1391      +) Finally, we check if the first segment on the ->ooseq queue
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1392      now is in sequence (i.e., if rcv_nxt >= ooseq->seqno). If
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1393      rcv_nxt > ooseq->seqno, we must trim the first edge of the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1394      segment on ->ooseq before we adjust rcv_nxt. The data in the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1395      segments that are now on sequence are chained onto the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1396      incoming segment so that we only need to call the application
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1397      once.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1398      */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1399  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1400      /* First, we check if we must trim the first edge. We have to do
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1401         this if the sequence number of the incoming segment is less
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1402         than rcv_nxt, and the sequence number plus the length of the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1403         segment is larger than rcv_nxt. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1404      /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1405            if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1406      if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
	ld.w	d0,[a12]36
	ld.w	d15,seqno
.L1455:
	jeq	d1,#0,.L271
.L1456:
	mov	d9,#7
	ld.bu	d2,[a12]20
.L1457:
	jge.u	d2,d9,.L272
.L1458:
	sub	d10,d0,d15
	add	d2,d10,#-1
	jlt	d2,#0,.L273
	add	d1,d15
	add	d1,#-1
	sub	d1,d0,d1
	jge	d1,#1,.L274
.L671:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1407        /* Trimming the first edge is done by pushing the payload
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1408           pointer in the pbuf downwards. This is somewhat tricky since
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1409           we do not want to discard the full contents of the pbuf up to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1410           the new starting point of the data since we have to keep the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1411           TCP header which is present in the first pbuf in the chain.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1412  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1413           What is done is really quite a nasty hack: the first pbuf in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1414           the pbuf chain is pointed to by inseg.p. Since we need to be
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1415           able to deallocate the whole pbuf, we cannot change this
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1416           inseg.p pointer to point to any of the later pbufs in the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1417           chain. Instead, we point the ->payload pointer in the first
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1418           pbuf to data in one of the later pbufs. We also set the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1419           inseg.data pointer to point to the right place. This way, the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1420           ->p pointer will still point to the first pbuf, but the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1421           ->p->payload pointer will point to data in another pbuf.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1422  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1423           After we are done with adjusting the pbuf pointers we must
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1424           adjust the ->data pointer in the seg and the segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1425           length.*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1426  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1427        struct pbuf *p = inseg.p;
	movh.a	a13,#@his(inseg)
	lea	a13,[a13]@los(inseg)
.L1459:
	mov.aa	a14,a13
	ld.a	a2,[+a14]4
	st.a	[a10]20,a2
.L1460:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1428        u32_t off32 = pcb->rcv_nxt - seqno;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1429        u16_t new_tot_len, off;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1430        LWIP_ASSERT("inseg.p != NULL", inseg.p);
	jnz.a	a2,.L275
.L1461:
	movh.a	a15,#@his(.66.str)
	lea	a15,[a15]@los(.66.str)
	st.a	[a10],a15
	mov	d15,#1430
	st.w	[a10]4,d15
.L947:
	fcall	.cocofun_85
.L957:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L275:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1431        LWIP_ASSERT("insane offset!", (off32 < 0xffff));
	mov.u	d15,#65535
	jlt.u	d10,d15,.L276
	movh.a	a15,#@his(.67.str)
	lea	a15,[a15]@los(.67.str)
	st.a	[a10],a15
	mov	d15,#1431
	st.w	[a10]4,d15
.L958:
	fcall	.cocofun_85
.L959:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L276:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1432        off = (u16_t)off32;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1433        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
	ld.a	a15,[a14]
.L1462:
	extr.u	d10,d10,#0,#16
.L961:
	ld.hu	d15,[a15]8
	jge.u	d15,d10,.L277
	movh.a	a15,#@his(.68.str)
	lea	a15,[a15]@los(.68.str)
	st.a	[a10],a15
	mov	d15,#1433
	st.w	[a10]4,d15
.L960:
	fcall	.cocofun_85
.L962:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L277:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1434        inseg.len -= off;
	ld.hu	d15,[a13]8
.L1463:
	sub	d15,d10
	st.h	[a13]8,d15
.L1464:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1435        new_tot_len = (u16_t)(inseg.p->tot_len - off);
	ld.a	a15,[a14]
.L1465:
	ld.hu	d15,[a15]8
.L964:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1436        while (p->len < off) {
	sub	d15,d10
	j	.L278
.L279:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1437          off -= p->len;
	ld.a	a15,[a10]20
	ld.hu	d0,[a15]10
.L1466:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1438          /* all pbufs up to and including this one have len==0, so tot_len is equal */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1439          p->tot_len = new_tot_len;
	st.h	[a15]8,d15
.L1467:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1440          p->len = 0;
	st.h	[a15]10,d8
.L1468:
	sub	d10,d0
.L963:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1441          p = p->next;
	ld.a	a15,[a15]
.L1469:
	extr.u	d10,d10,#0,#16
	st.a	[a10]20,a15
.L278:
	ld.a	a4,[a10]20
	ld.hu	d0,[a4]10
.L1470:
	jlt.u	d0,d10,.L279
.L966:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1442        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1443        /* cannot fail... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1444        pbuf_remove_header(p, off);
	mov	d4,d10
	call	pbuf_remove_header
.L967:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1445        inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
	ld.w	d15,[a12]36
.L965:
	st.w	seqno,d15
.L1471:
	ld.a	a15,[a13]16
.L1472:
	ld.w	d15,[a12]36
.L1473:
	st.w	[a15]4,d15
.L672:
	j	.L280
.L274:
.L273:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1446      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1447        if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
	sub	d0,d15,d0
.L1474:
	jge	d0,#0,.L281
.L1475:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1448          /* the whole segment is < rcv_nxt */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1449          /* must be a duplicate of a packet that has already been correctly handled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1450  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1451          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1452          tcp_ack_now(pcb);
	ld.hu	d0,[a12]26
	or	d0,d0,#2
	st.h	[a12]26,d0
.L281:
.L280:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1453        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1454      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1455  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1456      /* The sequence number must be within the window (above rcv_nxt
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1457         and below rcv_nxt + rcv_wnd) in order to be further
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1458         processed. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1459      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
	ld.w	d0,[a12]36
	sub	d1,d15,d0
	jlt	d1,#0,.L282
	ld.hu	d1,[a12]40
	add	d1,d0
	add	d1,#-1
	sub	d1,d15,d1
	jge	d1,#1,.L283
.L1476:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1460                          pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1461        if (pcb->rcv_nxt == seqno) {
	jne	d15,d0,.L284
.L1477:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1462          /* The incoming segment is the next in sequence. We check if
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1463             we have to trim the end of the segment and update rcv_nxt
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1464             and pass the data to the application. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1465          tcplen = TCP_TCPLEN(&inseg);
	movh.a	a15,#@his(inseg)
	lea	a15,[a15]@los(inseg)
	st.a	[a10]32,a15
	lea	a13,[a15]16
	fcall	.cocofun_88
	call	lwip_htons
	ld.a	a2,[a10]32
	and	d15,d2,#3
	lea	a15,[a2]8
	st.a	[a10]24,a15
	ld.hu	d0,[a2]8
.L1478:
	cadd	d0,d15,#1
	st.h	tcplen,d0
.L1479:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1466  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1467          if (tcplen > pcb->rcv_wnd) {
	ld.hu	d0,[a12]40
.L1480:
	ld.hu	d15,tcplen
.L1481:
	jge.u	d0,d15,.L285
.L1482:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1468            LWIP_DEBUGF(TCP_INPUT_DEBUG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1469                        ("tcp_receive: other end overran receive window"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1470                         "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1471                         seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1472            if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
	fcall	.cocofun_88
	call	lwip_htons
.L1483:
	jz.t	d2:0,.L286
.L1484:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1473              /* Must remove the FIN from the header as we're trimming
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1474               * that byte of sequence-space from the packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1475              TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
	fcall	.cocofun_88
	call	lwip_htons
	ld.a	a15,[a13]
	mov.u	d0,#49407
	and	d4,d2,#62
	ld.hu	d15,[a15]12
	and	d15,d0
	call	lwip_htons
	or	d15,d2
	st.h	[a15]12,d15
.L286:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1476            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1477            /* Adjust length of segment to fit in the window. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1478            TCPWND_CHECK16(pcb->rcv_wnd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1479            inseg.len = (u16_t)pcb->rcv_wnd;
	ld.a	a15,[a10]24
.L1485:
	ld.hu	d15,[a12]40
.L1486:
	st.h	[a15],d15
.L1487:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1480            if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
	fcall	.cocofun_88
	call	lwip_htons
.L1488:
	jz.t	d2:1,.L287
.L1489:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1481              inseg.len -= 1;
	ld.a	a15,[a10]32
	ld.hu	d15,[a15]8
.L1490:
	add	d15,#-1
	st.h	[a15]8,d15
.L287:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1482            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1483            pbuf_realloc(inseg.p, inseg.len);
	ld.a	a15,[a10]32
	mov.aa	a2,a15
	ld.a	a4,[+a2]4
.L1491:
	ld.hu	d4,[a15]8
	call	pbuf_realloc
.L1492:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1484            tcplen = TCP_TCPLEN(&inseg);
	fcall	.cocofun_88
	call	lwip_htons
	and	d15,d2,#3
	ld.a	a15,[a10]32
.L968:
	fcall	.cocofun_86
.L1493:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1485            LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
	jeq	d15,d0,.L288
.L970:
	movh.a	a15,#@his(.71.str)
	lea	a15,[a15]@los(.71.str)
	st.a	[a10],a15
	mov	d15,#1485
	st.w	[a10]4,d15
.L971:
	fcall	.cocofun_85
.L974:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L288:
.L285:
	ld.a	a15,[a10]32
	lea	a15,[a15]4
	st.a	[a10]28,a15
.L673:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1486                        (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1487          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1488  #if TCP_QUEUE_OOSEQ
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1489          /* Received in-sequence data, adjust ooseq data if:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1490             - FIN has been received or
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1491             - inseq overlaps with ooseq */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1492          if (pcb->ooseq != NULL) {
	ld.a	a15,[a12]116
.L1494:
	jz.a	a15,.L289
.L1495:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1493            if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
	fcall	.cocofun_88
	call	lwip_htons
.L1496:
	jz.t	d2:0,.L290
.L1497:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1494              LWIP_DEBUGF(TCP_INPUT_DEBUG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1495                          ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1496              /* Received in-order FIN means anything that was received
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1497               * out of order must now have been received in-order, so
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1498               * bin the ooseq queue */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1499              while (pcb->ooseq != NULL) {
	j	.L291
.L292:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1500                struct tcp_seg *old_ooseq = pcb->ooseq;
	ld.a	a4,[a12]116
.L1498:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1501                pcb->ooseq = pcb->ooseq->next;
	ld.a	a15,[a4]
.L1499:
	st.a	[a12]116,a15
.L1500:
	call	tcp_seg_free
.L291:
	ld.w	d15,[a12]116
.L1501:
	jne	d15,#0,.L292
.L1502:
	j	.L293
.L290:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1502                tcp_seg_free(old_ooseq);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1503              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1504            } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1505              struct tcp_seg *next = pcb->ooseq;
	ld.a	a14,[a12]116
.L972:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1506              /* Remove all segments on ooseq that are covered by inseg already.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1507               * FIN is copied from ooseq to inseg if present. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1508              while (next &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1509                     TCP_SEQ_GEQ(seqno + tcplen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1510                                 next->tcphdr->seqno + next->len)) {
	j	.L294
.L295:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1511                struct tcp_seg *tmp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1512                /* inseg cannot have FIN here (already processed above) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1513                if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
	ld.a	a2,[a14]16
	ld.hu	d4,[a2]12
	call	lwip_htons
.L1503:
	jz.t	d2:0,.L296
.L1504:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1514                    (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
	fcall	.cocofun_88
	call	lwip_htons
.L1505:
	jnz.t	d2:1,.L297
.L1506:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1515                  TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
	ld.a	a15,[a13]
	mov	d4,#1
	ld.hu	d15,[a15]12
	call	lwip_htons
	or	d15,d2
	st.h	[a15]12,d15
.L973:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1516                  tcplen = TCP_TCPLEN(&inseg);
	fcall	.cocofun_88
.L975:
	call	lwip_htons
	and	d15,d2,#3
	ld.a	a15,[a10]32
.L976:
	fcall	.cocofun_103
.L297:
.L296:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1517                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1518                tmp = next;
	mov.aa	a4,a14
.L978:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1519                next = next->next;
	ld.a	a14,[a14]
.L1507:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1520                tcp_seg_free(tmp);
	call	tcp_seg_free
.L294:
	jz.a	a14,.L298
.L1508:
	fcall	.cocofun_95
	ld.hu	d1,[a14]8
	add	d15,d1
	sub	d0,d15
	jge	d0,#0,.L295
.L298:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1521              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1522              /* Now trim right side of inseg if it overlaps with the first
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1523               * segment on ooseq */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1524              if (next &&
	jz.a	a14,.L299
.L1509:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1525                  TCP_SEQ_GT(seqno + tcplen,
	fcall	.cocofun_104
	ld.a	a15,[a14]16
	add	d15,d0
	ld.w	d1,[a15]4
	sub	d15,d1
	jlt	d15,#1,.L300
.L1510:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1526                             next->tcphdr->seqno)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1527                /* inseg cannot have FIN here (already processed above) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1528                inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
	ld.a	a15,[a10]24
.L1511:
	sub	d1,d0
.L1512:
	st.h	[a15],d1
.L1513:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1529                if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
	fcall	.cocofun_88
	call	lwip_htons
.L1514:
	jz.t	d2:1,.L301
.L1515:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1530                  inseg.len -= 1;
	ld.a	a15,[a10]32
	ld.hu	d15,[a15]8
.L1516:
	add	d15,#-1
	st.h	[a15]8,d15
.L301:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1531                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1532                pbuf_realloc(inseg.p, inseg.len);
	ld.a	a15,[a10]32
	ld.a	a4,[a15]4
.L1517:
	ld.hu	d4,[a15]8
	call	pbuf_realloc
.L1518:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1533                tcplen = TCP_TCPLEN(&inseg);
	fcall	.cocofun_88
	call	lwip_htons
	and	d15,d2,#3
	ld.a	a15,[a10]32
.L980:
	fcall	.cocofun_103
.L1519:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1534                LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
	fcall	.cocofun_95
.L981:
	jeq	d15,d0,.L302
	movh.a	a15,#@his(.73.str)
	lea	a15,[a15]@los(.73.str)
	st.a	[a10],a15
	mov	d15,#1534
	st.w	[a10]4,d15
.L982:
	fcall	.cocofun_85
.L983:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L302:
.L300:
.L299:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1535                            (seqno + tcplen) == next->tcphdr->seqno);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1536              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1537              pcb->ooseq = next;
	st.a	[a12]116,a14
.L293:
.L289:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1538            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1539          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1540  #endif /* TCP_QUEUE_OOSEQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1541  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1542          pcb->rcv_nxt = seqno + tcplen;
	ld.hu	d15,tcplen
.L1520:
	ld.w	d0,seqno
.L1521:
	add	d0,d15
	st.w	[a12]36,d0
.L1522:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1543  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1544          /* Update the receiver's (our) window. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1545          LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
	ld.hu	d0,[a12]40
	jge.u	d0,d15,.L303
	movh.a	a15,#@his(.74.str)
	lea	a15,[a15]@los(.74.str)
	st.a	[a10],a15
	mov	d15,#1545
	st.w	[a10]4,d15
.L984:
	fcall	.cocofun_85
.L987:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L303:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1546          pcb->rcv_wnd -= tcplen;
	ld.hu	d15,[a12]40
.L1523:
	ld.hu	d0,tcplen
.L1524:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1547  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1548          tcp_update_rcv_ann_wnd(pcb);
	mov.aa	a4,a12
.L985:
	sub	d15,d0
	st.h	[a12]40,d15
.L1525:
	call	tcp_update_rcv_ann_wnd
.L986:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1549  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1550          /* If there is data in the segment, we make preparations to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1551             pass this up to the application. The ->recv_data variable
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1552             is used for holding the pbuf that goes to the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1553             application. The code for reassembling out-of-sequence data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1554             chains its data on this pbuf as well.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1555  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1556             If the segment was a FIN, we set the TF_GOT_FIN flag that will
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1557             be used to indicate to the application that the remote side has
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1558             closed its end of the connection. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1559          if (inseg.p->tot_len > 0) {
	ld.a	a15,[a10]28
	ld.a	a15,[a15]
.L1526:
	ld.hu	d15,[a15]8
.L1527:
	jeq	d15,#0,.L304
.L1528:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1560            recv_data = inseg.p;
	st.a	recv_data,a15
.L1529:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1561            /* Since this pbuf now is the responsibility of the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1562               application, we delete our reference to it so that we won't
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1563               (mistakingly) deallocate it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1564            inseg.p = NULL;
	ld.a	a15,[a10]28
.L1530:
	mov.a	a2,#0
.L1531:
	st.a	[a15],a2
.L304:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1565          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1566          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
	fcall	.cocofun_88
	call	lwip_htons
.L1532:
	jz.t	d2:0,.L306
.L1533:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1567            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1568            recv_flags |= TF_GOT_FIN;
	st.t	recv_flags:5,#1
.L1534:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1569          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1570  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1571  #if TCP_QUEUE_OOSEQ
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1572          /* We now check if we have segments on the ->ooseq queue that
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1573             are now in sequence. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1574          while (pcb->ooseq != NULL &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1575                 pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
	j	.L306
.L307:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1576  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1577            struct tcp_seg *cseg = pcb->ooseq;
	ld.a	a15,[a12]116
.L1535:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1578            seqno = pcb->ooseq->tcphdr->seqno;
	ld.a	a2,[a15]16
.L1536:
	ld.w	d15,[a2]4
.L1537:
	st.w	seqno,d15
.L1538:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1579  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1580            pcb->rcv_nxt += TCP_TCPLEN(cseg);
	ld.a	a2,[a15]16
	ld.hu	d4,[a2]12
	call	lwip_htons
	and	d15,d2,#3
	ld.hu	d1,[a15]8
.L1539:
	ld.w	d0,[a12]36
.L1540:
	cadd	d1,d15,#1
.L1541:
	add	d0,d1
	st.w	[a12]36,d0
.L1542:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1581            LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
	ld.a	a2,[a15]16
	ld.hu	d4,[a2]12
	call	lwip_htons
	and	d15,d2,#3
	ld.hu	d0,[a15]8
	ld.hu	d1,[a12]40
	cadd	d0,d15,#1
	jge.u	d1,d0,.L308
	movh.a	a2,#@his(.76.str)
	lea	a2,[a2]@los(.76.str)
	st.a	[a10],a2
	mov	d15,#1581
	st.w	[a10]4,d15
.L988:
	fcall	.cocofun_89
.L1001:
	st.a	[a10]8,a2
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L308:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1582                        pcb->rcv_wnd >= TCP_TCPLEN(cseg));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1583            pcb->rcv_wnd -= TCP_TCPLEN(cseg);
	ld.a	a2,[a15]16
	ld.hu	d4,[a2]12
	call	lwip_htons
	and	d15,d2,#3
	ld.hu	d1,[a15]8
.L1543:
	ld.hu	d0,[a12]40
.L1544:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1584  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1585            tcp_update_rcv_ann_wnd(pcb);
	cadd	d1,d15,#1
	mov.aa	a4,a12
.L989:
	sub	d0,d1
	st.h	[a12]40,d0
.L1545:
	call	tcp_update_rcv_ann_wnd
.L990:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1586  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1587            if (cseg->p->tot_len > 0) {
	ld.a	a5,[a15]4
.L1546:
	ld.hu	d15,[a5]8
.L1547:
	jeq	d15,#0,.L309
.L1548:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1588              /* Chain this pbuf onto the pbuf that we will pass to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1589                 the application. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1590              /* With window scaling, this can overflow recv_data->tot_len, but
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1591                 that's not a problem since we explicitly fix that before passing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1592                 recv_data to the application. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1593              if (recv_data) {
	ld.a	a4,recv_data
.L1549:
	mov.a	a13,#0
	jz.a	a4,.L310
.L1550:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1594                pbuf_cat(recv_data, cseg->p);
	call	pbuf_cat
.L1551:
	j	.L311
.L310:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1595              } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1596                recv_data = cseg->p;
	st.a	recv_data,a5
.L311:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1597              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1598              cseg->p = NULL;
	st.a	[a15]4,a13
.L309:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1599            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1600            if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
	ld.a	a2,[a15]16
	ld.hu	d4,[a2]12
	call	lwip_htons
.L1552:
	jz.t	d2:0,.L312
.L1553:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1601              LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1602              recv_flags |= TF_GOT_FIN;
	st.t	recv_flags:5,#1
.L1554:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1603              if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
	ld.bu	d15,[a12]20
.L1555:
	jne	d15,#4,.L313
.L1556:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1604                pcb->state = CLOSE_WAIT;
	st.b	[a12]20,d9
.L313:
.L312:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1605              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1606            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1607  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1608            pcb->ooseq = cseg->next;
	ld.a	a2,[a15]
.L1557:
	st.a	[a12]116,a2
.L1558:
	mov.aa	a4,a15
	call	tcp_seg_free
.L306:
	ld.a	a15,[a12]116
.L1559:
	jz.a	a15,.L314
.L1560:
	ld.a	a15,[a15]16
.L1561:
	ld.w	d0,[a12]36
.L1562:
	ld.w	d15,[a15]4
.L1563:
	jeq	d15,d0,.L307
.L314:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1609            tcp_seg_free(cseg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1610          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1611  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1612          if (pcb->flags & TF_SACK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1613            if (pcb->ooseq != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1614              /* Some segments may have been removed from ooseq, let's remove all SACKs that
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1615                 describe anything before the new beginning of that list. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1616              tcp_remove_sacks_lt(pcb, pcb->ooseq->tcphdr->seqno);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1617            } else if (LWIP_TCP_SACK_VALID(pcb, 0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1618              /* ooseq has been cleared. Nothing to SACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1619              memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1620            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1621          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1622  #endif /* LWIP_TCP_SACK_OUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1623  #endif /* TCP_QUEUE_OOSEQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1624  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1625  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1626          /* Acknowledge the segment(s). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1627          tcp_ack(pcb);
	ld.hu	d15,[a12]26
	jz.t	d15:0,.L315
	mov.u	d0,#65534
	and	d15,d0
	j	.L316
.L315:
	or	d15,#1
	j	.L317
.L284:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1628  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1629  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1630          if (LWIP_TCP_SACK_VALID(pcb, 0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1631            /* Normally the ACK for the data received could be piggy-backed on a data packet,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1632               but lwIP currently does not support including SACKs in data packets. So we force
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1633               it to respond with an empty ACK packet (only if there is at least one SACK to be sent).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1634               NOTE: tcp_send_empty_ack() on success clears the ACK flags (set by tcp_ack()) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1635            tcp_send_empty_ack(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1636          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1637  #endif /* LWIP_TCP_SACK_OUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1638  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1639  #if LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1640          if (ip_current_is_v6()) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1641            /* Inform neighbor reachability of forward progress. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1642            nd6_reachability_hint(ip6_current_src_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1643          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1644  #endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1645  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1646        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1647          /* We get here if the incoming segment is out-of-sequence. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1648  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1649  #if TCP_QUEUE_OOSEQ
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1650          /* We queue the segment on the ->ooseq queue. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1651          if (pcb->ooseq == NULL) {
	ld.a	a13,[a12]116
.L999:
	jnz.a	a13,.L318
.L1564:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1652            pcb->ooseq = tcp_seg_copy(&inseg);
	fcall	.cocofun_90
	call	tcp_seg_copy
.L1565:
	st.a	[a12]116,a2
.L1566:
	j	.L319
.L318:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1653  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1654            if (pcb->flags & TF_SACK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1655              /* All the SACKs should be invalid, so we can simply store the most recent one: */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1656              pcb->rcv_sacks[0].left = seqno;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1657              pcb->rcv_sacks[0].right = seqno + inseg.len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1658            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1659  #endif /* LWIP_TCP_SACK_OUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1660          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1661            /* If the queue is not empty, we walk through the queue and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1662               try to find a place where the sequence number of the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1663               incoming segment is between the sequence numbers of the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1664               previous and the next segment on the ->ooseq queue. That is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1665               the place where we put the incoming segment. If needed, we
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1666               trim the second edges of the previous and the incoming
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1667               segment so that it will fit into the sequence.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1668  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1669               If the incoming segment has the same sequence number as a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1670               segment on the ->ooseq queue, we discard the segment that
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1671               contains less data. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1672  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1673  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1674            /* This is the left edge of the lowest possible SACK range.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1675               It may start before the newly received segment (possibly adjusted below). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1676            u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1677  #endif /* LWIP_TCP_SACK_OUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1678            struct tcp_seg *next, *prev = NULL;
	mov.a	a14,#0

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1679            for (next = pcb->ooseq; next != NULL; next = next->next) {
.L320:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1680              if (seqno == next->tcphdr->seqno) {
	ld.a	a2,[a13]16
.L1567:
	ld.w	d0,[a2]4
.L1568:
	jne	d15,d0,.L321
.L1569:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1681                /* The sequence number of the incoming segment is the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1682                   same as the sequence number of the segment on
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1683                   ->ooseq. We check the lengths to see which one to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1684                   discard. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1685                if (inseg.len > next->len) {
	fcall	.cocofun_90
.L1570:
	ld.hu	d15,[a4]8
.L1571:
	ld.hu	d0,[a13]8
.L1572:
	jge.u	d0,d15,.L322
.L685:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1686                  /* The incoming segment is larger than the old
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1687                     segment. We replace some segments with the new
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1688                     one. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1689                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
	call	tcp_seg_copy
.L991:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1690                  if (cseg != NULL) {
	jz.a	a2,.L323
.L1573:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1691                    if (prev != NULL) {
	jz.a	a14,.L324
.L1574:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1692                      prev->next = cseg;
	st.a	[a14],a2
.L1575:
	j	.L325
.L324:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1693                    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1694                      pcb->ooseq = cseg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1695                    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1696                    tcp_oos_insert_segment(cseg, next);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1697                  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1698                  break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1699                } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1700                  /* Either the lengths are the same or the incoming
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1701                     segment was smaller than the old one; in either
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1702                     case, we ditch the incoming segment. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1703                  break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1704                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1705              } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1706                if (prev == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1707                  if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1708                    /* The sequence number of the incoming segment is lower
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1709                       than the sequence number of the first segment on the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1710                       queue. We put the incoming segment first on the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1711                       queue. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1712                    struct tcp_seg *cseg = tcp_seg_copy(&inseg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1713                    if (cseg != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1714                      pcb->ooseq = cseg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1715                      tcp_oos_insert_segment(cseg, next);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1716                    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1717                    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1718                  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1719                } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1720                  /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1721                    TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1722                  if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1723                    /* The sequence number of the incoming segment is in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1724                       between the sequence numbers of the previous and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1725                       the next segment on ->ooseq. We trim trim the previous
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1726                       segment, delete next segments that included in received segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1727                       and trim received, if needed. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1728                    struct tcp_seg *cseg = tcp_seg_copy(&inseg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1729                    if (cseg != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1730                      if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1731                        /* We need to trim the prev segment. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1732                        prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1733                        pbuf_realloc(prev->p, prev->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1734                      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1735                      prev->next = cseg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1736                      tcp_oos_insert_segment(cseg, next);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1737                    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1738                    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1739                  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1740                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1741  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1742  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1743                /* The new segment goes after the 'next' one. If there is a "hole" in sequence numbers
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1744                   between 'prev' and the beginning of 'next', we want to move sackbeg. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1745                if (prev != NULL && prev->tcphdr->seqno + prev->len != next->tcphdr->seqno) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1746                  sackbeg = next->tcphdr->seqno;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1747                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1748  #endif /* LWIP_TCP_SACK_OUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1749  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1750                /* We don't use 'prev' below, so let's set it to current 'next'.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1751                   This way even if we break the loop below, 'prev' will be pointing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1752                   at the segment right in front of the newly added one. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1753                prev = next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1754  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1755                /* If the "next" segment is the last segment on the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1756                   ooseq queue, we add the incoming segment to the end
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1757                   of the list. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1758                if (next->next == NULL &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1759                    TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1760                  if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1761                    /* segment "next" already contains all data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1762                    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1763                  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1764                  next->next = tcp_seg_copy(&inseg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1765                  if (next->next != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1766                    if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1767                      /* We need to trim the last segment. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1768                      next->len = (u16_t)(seqno - next->tcphdr->seqno);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1769                      pbuf_realloc(next->p, next->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1770                    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1771                    /* check if the remote side overruns our receive window */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1772                    if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1773                      LWIP_DEBUGF(TCP_INPUT_DEBUG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1774                                  ("tcp_receive: other end overran receive window"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1775                                   "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1776                                   seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1777                      if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1778                        /* Must remove the FIN from the header as we're trimming
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1779                         * that byte of sequence-space from the packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1780                        TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1781                      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1782                      /* Adjust length of segment to fit in the window. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1783                      next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1784                      pbuf_realloc(next->next->p, next->next->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1785                      tcplen = TCP_TCPLEN(next->next);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1786                      LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1787                                  (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1788                    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1789                  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1790                  break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1791                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1792              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1793            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1794  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1795  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1796            if (pcb->flags & TF_SACK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1797              if (prev == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1798                /* The new segment is at the beginning. sackbeg should already be set properly.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1799                   We need to find the right edge. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1800                next = pcb->ooseq;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1801              } else if (prev->next != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1802                /* The new segment was added after 'prev'. If there is a "hole" between 'prev' and 'prev->next',
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1803                   we need to move sackbeg. After that we should find the right edge. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1804                next = prev->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1805                if (prev->tcphdr->seqno + prev->len != next->tcphdr->seqno) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1806                  sackbeg = next->tcphdr->seqno;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1807                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1808              } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1809                next = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1810              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1811              if (next != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1812                u32_t sackend = next->tcphdr->seqno;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1813                for ( ; (next != NULL) && (sackend == next->tcphdr->seqno); next = next->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1814                  sackend += next->len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1815                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1816                tcp_add_sack(pcb, sackbeg, sackend);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1817              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1818            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1819  #endif /* LWIP_TCP_SACK_OUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1820          }
.L330:
	st.a	[a12]116,a2
.L325:
	mov.aa	a4,a2
.L992:
	j	.L326
.L321:
	jnz.a	a14,.L327
.L1576:
	sub	d1,d15,d0
.L1577:
	jge	d1,#0,.L328
.L687:
	fcall	.cocofun_90
	call	tcp_seg_copy
.L993:
	jz.a	a2,.L329
.L1578:
	j	.L330
.L327:
	ld.a	a15,[a14]16
	ld.w	d1,[a15]4
	sub	d1,d15,d1
	add	d1,#-1
	jlt	d1,#0,.L331
	add	d1,d0,#-1
	sub	d1,d15,d1
	jge	d1,#1,.L332
.L689:
	fcall	.cocofun_90
	call	tcp_seg_copy
.L994:
	mov.aa	a15,a2
.L996:
	jz.a	a15,.L333
.L1579:
	ld.a	a2,[a14]16
.L995:
	ld.hu	d15,[a14]8
	ld.w	d0,seqno
	ld.w	d1,[a2]4
	add	d15,d1
	sub	d15,d0
.L1580:
	jlt	d15,#1,.L334
.L1581:
	sub	d0,d1
	st.h	[a14]8,d0
.L1582:
	ld.a	a4,[a14]4
.L1583:
	ld.hu	d4,[a14]8
	call	pbuf_realloc
.L334:
	st.a	[a14],a15
.L1584:
	mov.aa	a4,a15
.L326:
	mov.aa	a5,a13
.L997:
	call	tcp_oos_insert_segment
.L998:
	j	.L335
.L332:
.L331:
.L328:
	ld.a	a15,[a13]
.L1585:
	mov.aa	a14,a13
.L1586:
	jnz.a	a15,.L336
.L1587:
	sub	d0,d15,d0
	jlt	d0,#1,.L337
.L1588:
	ld.hu	d4,[a2]12
	call	lwip_htons
.L1589:
	jnz.t	d2:0,.L338
.L1590:
	fcall	.cocofun_90
	call	tcp_seg_copy
.L1591:
	st.a	[a13],a2
.L1592:
	ld.w	d15,[a13]
.L1593:
	jeq	d15,#0,.L339
.L1594:
	ld.a	a15,[a13]16
	ld.hu	d15,[a13]8
	ld.w	d0,seqno
	ld.w	d1,[a15]4
	add	d15,d1
	sub	d15,d0
.L1595:
	jlt	d15,#1,.L340
.L1596:
	sub	d0,d1
	st.h	[a13]8,d0
.L1597:
	ld.a	a4,[a13]4
.L1598:
	ld.hu	d4,[a13]8
	call	pbuf_realloc
.L340:
	ld.hu	d0,tcplen
	ld.w	d15,seqno
	ld.hu	d1,[a12]40
	add	d0,d15
	ld.w	d15,[a12]36
	add	d15,d1
	sub	d0,d15
.L1599:
	jlt	d0,#1,.L341
.L1600:
	fcall	.cocofun_100
	call	lwip_htons
.L1601:
	jz.t	d2:0,.L342
.L1602:
	fcall	.cocofun_100
	call	lwip_htons
	ld.a	a15,[a13]
	mov.u	d0,#49407
	and	d4,d2,#62
	ld.a	a15,[a15]16
	ld.hu	d15,[a15]12
	and	d15,d0
	call	lwip_htons
	or	d15,d2
	st.h	[a15]12,d15
.L342:
	ld.w	d15,[a12]36
.L1603:
	ld.hu	d0,[a12]40
.L1604:
	ld.a	a15,[a13]
.L1605:
	add	d15,d0
	ld.w	d0,seqno
.L1606:
	sub	d15,d0
	st.h	[a15]8,d15
.L1607:
	ld.a	a15,[a13]
.L1608:
	ld.a	a4,[a15]4
.L1609:
	ld.hu	d4,[a15]8
	call	pbuf_realloc
.L1610:
	fcall	.cocofun_100
	call	lwip_htons
	and	d15,d2,#3
	ld.a	a15,[a13]
.L1000:
	fcall	.cocofun_86
.L1002:
	jeq	d15,d0,.L343
.L1611:
	movh.a	a15,#@his(.71.str)
	lea	a15,[a15]@los(.71.str)
	st.a	[a10],a15
	mov	d15,#1786
	st.w	[a10]4,d15
.L1003:
	fcall	.cocofun_85
.L1004:
	st.a	[a10]8,a15
	fcall	.cocofun_84
	call	Ifx_Lwip_printf
.L1612:
	j	.L344
.L337:
.L336:
	mov.aa	a13,a15
.L1613:
	jnz.a	a15,.L320
.L344:
.L343:
.L341:
.L339:
.L338:
.L335:
.L333:
.L329:
.L323:
.L322:
.L319:
.L283:
.L282:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1821  #if defined(TCP_OOSEQ_BYTES_LIMIT) || defined(TCP_OOSEQ_PBUFS_LIMIT)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1822          {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1823            /* Check that the data on ooseq doesn't exceed one of the limits
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1824               and throw away everything above that limit. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1825  #ifdef TCP_OOSEQ_BYTES_LIMIT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1826            const u32_t ooseq_max_blen = TCP_OOSEQ_BYTES_LIMIT(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1827            u32_t ooseq_blen = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1828  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1829  #ifdef TCP_OOSEQ_PBUFS_LIMIT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1830            const u16_t ooseq_max_qlen = TCP_OOSEQ_PBUFS_LIMIT(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1831            u16_t ooseq_qlen = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1832  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1833            struct tcp_seg *next, *prev = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1834            for (next = pcb->ooseq; next != NULL; prev = next, next = next->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1835              struct pbuf *p = next->p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1836              int stop_here = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1837  #ifdef TCP_OOSEQ_BYTES_LIMIT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1838              ooseq_blen += p->tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1839              if (ooseq_blen > ooseq_max_blen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1840                stop_here = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1841              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1842  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1843  #ifdef TCP_OOSEQ_PBUFS_LIMIT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1844              ooseq_qlen += pbuf_clen(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1845              if (ooseq_qlen > ooseq_max_qlen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1846                stop_here = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1847              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1848  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1849              if (stop_here) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1850  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1851                if (pcb->flags & TF_SACK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1852                  /* Let's remove all SACKs from next's seqno up. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1853                  tcp_remove_sacks_gt(pcb, next->tcphdr->seqno);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1854                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1855  #endif /* LWIP_TCP_SACK_OUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1856                /* too much ooseq data, dump this and everything after it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1857                tcp_segs_free(next);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1858                if (prev == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1859                  /* first ooseq segment is too much, dump the whole queue */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1860                  pcb->ooseq = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1861                } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1862                  /* just dump 'next' and everything after it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1863                  prev->next = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1864                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1865                break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1866              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1867            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1868          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1869  #endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1870  #endif /* TCP_QUEUE_OOSEQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1871  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1872          /* We send the ACK packet after we've (potentially) dealt with SACKs,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1873             so they can be included in the acknowledgment. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1874          tcp_send_empty_ack(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1875        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1876      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1877        /* The incoming segment is not within the window. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1878        tcp_send_empty_ack(pcb);
	mov.aa	a4,a12
.L1005:
	j	tcp_send_empty_ack
.L272:
.L271:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1879      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1880    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1881      /* Segments with length 0 is taken care of here. Segments that
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1882         fall out of the window are ACKed. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1883      if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
	sub	d1,d15,d0
	jlt	d1,#0,.L346
	ld.hu	d1,[a12]40
	add	d0,d1
	add	d0,#-1
	sub	d15,d0
	jlt	d15,#1,.L347
.L346:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1884        tcp_ack_now(pcb);
	ld.hu	d15,[a12]26
.L316:
	or	d15,#2
.L317:
	st.h	[a12]26,d15
.L347:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1885      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1886    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1887  }
	ret
.L655:
	
__tcp_receive_function_end:
	.size	tcp_receive,__tcp_receive_function_end-tcp_receive
.L452:
	; End of function
	
	.sdecl	'.text.tcp_in..cocofun_104',code,cluster('.cocofun_104')
	.sect	'.text.tcp_in..cocofun_104'
	.align	2
; Function .cocofun_104
.L406:
.cocofun_104:	.type	func
; Function body .cocofun_104, coco_iter:1
	ld.w	d0,seqno
	ld.hu	d15,tcplen
.L1865:
	fret
.L592:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_103',code,cluster('.cocofun_103')
	.sect	'.text.tcp_in..cocofun_103'
	.align	2
; Function .cocofun_103
.L408:
.cocofun_103:	.type	func
; Function body .cocofun_103, coco_iter:1
	ld.hu	d0,[a15]8
.L1860:
	cadd	d0,d15,#1
	st.h	tcplen,d0
.L977:
	fret
.L587:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_100',code,cluster('.cocofun_100')
	.sect	'.text.tcp_in..cocofun_100'
	.align	2
; Function .cocofun_100
.L410:
.cocofun_100:	.type	func
; Function body .cocofun_100, coco_iter:0
	ld.a	a15,[a13]
	ld.a	a15,[a15]16
	ld.hu	d4,[a15]12
.L1840:
	fret
.L572:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_95',code,cluster('.cocofun_95')
	.sect	'.text.tcp_in..cocofun_95'
	.align	2
; Function .cocofun_95
.L412:
.cocofun_95:	.type	func
; Function body .cocofun_95, coco_iter:0
	fcall	.cocofun_104
.L979:
	ld.a	a15,[a14]16
	add	d0,d15
	ld.w	d15,[a15]4
.L1811:
	fret
.L547:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_94',code,cluster('.cocofun_94')
	.sect	'.text.tcp_in..cocofun_94'
	.align	2
; Function .cocofun_94
.L414:
.cocofun_94:	.type	func
; Function body .cocofun_94, coco_iter:0
	ld.hu	d15,[a12]72
	ld.hu	d0,[a12]50
	add	d0,d15
.L1806:
	extr.u	d0,d0,#0,#16
	fret
.L542:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_90',code,cluster('.cocofun_90')
	.sect	'.text.tcp_in..cocofun_90'
	.align	2
; Function .cocofun_90
.L416:
.cocofun_90:	.type	func
; Function body .cocofun_90, coco_iter:0
	movh.a	a4,#@his(inseg)
	lea	a4,[a4]@los(inseg)
.L1785:
	fret
.L522:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_89',code,cluster('.cocofun_89')
	.sect	'.text.tcp_in..cocofun_89'
	.align	2
; Function .cocofun_89
.L418:
.cocofun_89:	.type	func
; Function body .cocofun_89, coco_iter:0
	movh.a	a2,#@his(.3.str)
	lea	a2,[a2]@los(.3.str)
.L1780:
	fret
.L517:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_88',code,cluster('.cocofun_88')
	.sect	'.text.tcp_in..cocofun_88'
	.align	2
; Function .cocofun_88
.L420:
.cocofun_88:	.type	func
; Function body .cocofun_88, coco_iter:0
	ld.a	a15,[a13]
	ld.hu	d4,[a15]12
.L1775:
	fret
.L512:
	; End of function
	.sdecl	'.text.tcp_in..cocofun_86',code,cluster('.cocofun_86')
	.sect	'.text.tcp_in..cocofun_86'
	.align	2
; Function .cocofun_86
.L422:
.cocofun_86:	.type	func
; Function body .cocofun_86, coco_iter:0
	fcall	.cocofun_103
.L1764:
	fcall	.cocofun_104
.L969:
	add	d0,d15
	ld.w	d15,[a12]36
	ld.hu	d1,[a12]40
.L1765:
	add	d15,d1
	fret
.L502:
	; End of function
	.sdecl	'.text.tcp_in.tcp_get_next_optbyte',code,cluster('tcp_get_next_optbyte')
	.sect	'.text.tcp_in.tcp_get_next_optbyte'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1888  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1889  static u8_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1890  tcp_get_next_optbyte(void)
; Function tcp_get_next_optbyte
.L424:
tcp_get_next_optbyte:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1891  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1892    u16_t optidx = tcp_optidx++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1893    if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
	ld.a	a15,tcphdr_opt2
.L1742:
	ld.hu	d15,tcp_optidx
.L1743:
	add	d0,d15,#1
	st.h	tcp_optidx,d0
.L1744:
	jz.a	a15,.L348
.L1745:
	ld.hu	d0,tcphdr_opt1len
.L1746:
	jge.u	d15,d0,.L349
.L348:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1894      u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
	ld.a	a15,tcphdr
.L1747:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1895      return opts[optidx];
	addsc.a	a15,a15,d15,#0
	ld.bu	d2,[a15]20
.L720:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1896    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1897      u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1898      return tcphdr_opt2[idx];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1899    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1900  }
	ret
.L349:
	sub	d15,d0
.L1748:
	extr.u	d15,d15,#0,#8
.L1749:
	addsc.a	a15,a15,d15,#0
	ld.bu	d2,[a15]
.L721:
	ret
.L719:
	
__tcp_get_next_optbyte_function_end:
	.size	tcp_get_next_optbyte,__tcp_get_next_optbyte_function_end-tcp_get_next_optbyte
.L487:
	; End of function
	
	.sdecl	'.text.tcp_in.tcp_parseopt',code,cluster('tcp_parseopt')
	.sect	'.text.tcp_in.tcp_parseopt'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1901  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1902  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1903   * Parses the options contained in the incoming segment.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1904   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1905   * Called from tcp_listen_input() and tcp_process().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1906   * Currently, only the MSS option is supported!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1907   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1908   * @param pcb the tcp_pcb for which a segment arrived
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1909   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1910  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1911  tcp_parseopt(struct tcp_pcb *pcb)
; Function tcp_parseopt
.L426:
tcp_parseopt:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1912  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1913    u8_t data;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1914    u16_t mss;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1915  #if LWIP_TCP_TIMESTAMPS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1916    u32_t tsval;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1917  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1918  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1919    LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1920  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1921    /* Parse the TCP MSS option, if present. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1922    if (tcphdr_optlen != 0) {
	ld.hu	d15,tcphdr_optlen
.L1618:
	mov.aa	a15,a4
.L1006:
	jeq	d15,#0,.L352
.L1619:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1923      for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
	mov	d15,#0
	st.h	tcp_optidx,d15
.L353:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1924        u8_t opt = tcp_get_next_optbyte();
	call	tcp_get_next_optbyte
.L1007:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1925        switch (opt) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1926          case LWIP_TCP_OPT_EOL:
	jeq	d2,#0,.L354
.L1620:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1927            /* End of options. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1928            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1929            return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1930          case LWIP_TCP_OPT_NOP:
	jeq	d2,#1,.L355
.L1621:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1931            /* NOP option. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1932            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1933            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1934          case LWIP_TCP_OPT_MSS:
	jne	d2,#2,.L357
.L1622:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1935            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1936            if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
	call	tcp_get_next_optbyte
.L1008:
	jne	d2,#4,.L358
.L1623:
	ld.hu	d15,tcp_optidx
.L1624:
	ld.hu	d0,tcphdr_optlen
.L1625:
	add	d15,#2
.L1626:
	jlt	d0,d15,.L359
.L1627:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1937              /* Bad length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1938              LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1939              return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1940            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1941            /* An MSS option with the right option length. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1942            mss = (u16_t)(tcp_get_next_optbyte() << 8);
	call	tcp_get_next_optbyte
.L1628:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1943            mss |= tcp_get_next_optbyte();
	sha	d15,d2,#8
	call	tcp_get_next_optbyte
.L1009:
	or	d15,d2
.L1629:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1944            /* Limit the mss to the configured TCP_MSS and prevent division by zero */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1945            pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
	mov	d0,#1460
.L1010:
	jlt.u	d0,d15,.L360
.L1630:
	jne	d15,#0,.L361
.L360:
	mov	d15,d0
.L361:
	st.h	[a15]50,d15
.L1011:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1946            break;
	j	.L363

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1947  #if LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1948          case LWIP_TCP_OPT_WS:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1949            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: WND_SCALE\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1950            if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_WS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_WS) > tcphdr_optlen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1951              /* Bad length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1952              LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1953              return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1954            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1955            /* An WND_SCALE option with the right option length. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1956            data = tcp_get_next_optbyte();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1957            /* If syn was received with wnd scale option,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1958               activate wnd scale opt, but only if this is not a retransmission */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1959            if ((flags & TCP_SYN) && !(pcb->flags & TF_WND_SCALE)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1960              pcb->snd_scale = data;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1961              if (pcb->snd_scale > 14U) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1962                pcb->snd_scale = 14U;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1963              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1964              pcb->rcv_scale = TCP_RCV_SCALE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1965              tcp_set_flags(pcb, TF_WND_SCALE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1966              /* window scaling is enabled, we can use the full receive window */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1967              LWIP_ASSERT("window not at default value", pcb->rcv_wnd == TCPWND_MIN16(TCP_WND));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1968              LWIP_ASSERT("window not at default value", pcb->rcv_ann_wnd == TCPWND_MIN16(TCP_WND));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1969              pcb->rcv_wnd = pcb->rcv_ann_wnd = TCP_WND;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1970            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1971            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1972  #endif /* LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1973  #if LWIP_TCP_TIMESTAMPS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1974          case LWIP_TCP_OPT_TS:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1975            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: TS\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1976            if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_TS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_TS) > tcphdr_optlen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1977              /* Bad length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1978              LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1979              return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1980            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1981            /* TCP timestamp option with valid length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1982            tsval = tcp_get_next_optbyte();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1983            tsval |= (tcp_get_next_optbyte() << 8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1984            tsval |= (tcp_get_next_optbyte() << 16);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1985            tsval |= (tcp_get_next_optbyte() << 24);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1986            if (flags & TCP_SYN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1987              pcb->ts_recent = lwip_ntohl(tsval);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1988              /* Enable sending timestamps in every segment now that we know
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1989                 the remote host supports it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1990              tcp_set_flags(pcb, TF_TIMESTAMP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1991            } else if (TCP_SEQ_BETWEEN(pcb->ts_lastacksent, seqno, seqno + tcplen)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1992              pcb->ts_recent = lwip_ntohl(tsval);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1993            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1994            /* Advance to next option (6 bytes already read) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1995            tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1996            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1997  #endif /* LWIP_TCP_TIMESTAMPS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1998  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  1999          case LWIP_TCP_OPT_SACK_PERM:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2000            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: SACK_PERM\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2001            if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_SACK_PERM || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_SACK_PERM) > tcphdr_optlen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2002              /* Bad length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2003              LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2004              return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2005            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2006            /* TCP SACK_PERM option with valid length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2007            if (flags & TCP_SYN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2008              /* We only set it if we receive it in a SYN (or SYN+ACK) packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2009              tcp_set_flags(pcb, TF_SACK);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2010            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2011            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2012  #endif /* LWIP_TCP_SACK_OUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2013          default:
.L357:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2014            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2015            data = tcp_get_next_optbyte();
	call	tcp_get_next_optbyte
.L1012:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2016            if (data < 2) {
	jlt.u	d2,#2,.L364
.L1631:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2017              LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2018              /* If the length field is zero, the options are malformed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2019                 and we don't process them further. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2020              return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2021            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2022            /* All other options have a length field, so that we easily
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2023               can skip past them. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2024            tcp_optidx += data - 2;
	ld.hu	d15,tcp_optidx
	add	d15,d2
.L1632:
	add	d15,#-2
	st.h	tcp_optidx,d15

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2025        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2026      }
.L363:
.L355:
	ld.hu	d15,tcp_optidx
.L1633:
	ld.hu	d0,tcphdr_optlen
.L1634:
	jlt.u	d15,d0,.L353
.L364:
.L359:
.L358:
.L354:
.L352:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2027    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2028  }
	ret
.L691:
	
__tcp_parseopt_function_end:
	.size	tcp_parseopt,__tcp_parseopt_function_end-tcp_parseopt
.L457:
	; End of function
	
	.sdecl	'.text.tcp_in.tcp_trigger_input_pcb_close',code,cluster('tcp_trigger_input_pcb_close')
	.sect	'.text.tcp_in.tcp_trigger_input_pcb_close'
	.align	2
	
	.global	tcp_trigger_input_pcb_close

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2029  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2030  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2031  tcp_trigger_input_pcb_close(void)
; Function tcp_trigger_input_pcb_close
.L428:
tcp_trigger_input_pcb_close:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2032  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2033    recv_flags |= TF_CLOSED;
	st.t	recv_flags:4,#1
.L1209:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2034  }
	ret
.L640:
	
__tcp_trigger_input_pcb_close_function_end:
	.size	tcp_trigger_input_pcb_close,__tcp_trigger_input_pcb_close_function_end-tcp_trigger_input_pcb_close
.L442:
	; End of function
	
	.sdecl	'.bss.tcp_in.inseg',data,cluster('inseg')
	.sect	'.bss.tcp_in.inseg'
	.align	4
inseg:	.type	object
	.size	inseg,20
	.space	20
	.sdecl	'.zbss.tcp_in.tcphdr',data,cluster('tcphdr')
	.sect	'.zbss.tcp_in.tcphdr'
	.align	4
tcphdr:	.type	object
	.size	tcphdr,4
	.space	4
	.sdecl	'.zbss.tcp_in.tcphdr_optlen',data,cluster('tcphdr_optlen')
	.sect	'.zbss.tcp_in.tcphdr_optlen'
	.align	2
tcphdr_optlen:	.type	object
	.size	tcphdr_optlen,2
	.space	2
	.sdecl	'.zbss.tcp_in.tcphdr_opt1len',data,cluster('tcphdr_opt1len')
	.sect	'.zbss.tcp_in.tcphdr_opt1len'
	.align	2
tcphdr_opt1len:	.type	object
	.size	tcphdr_opt1len,2
	.space	2
	.sdecl	'.zbss.tcp_in.tcphdr_opt2',data,cluster('tcphdr_opt2')
	.sect	'.zbss.tcp_in.tcphdr_opt2'
	.align	4
tcphdr_opt2:	.type	object
	.size	tcphdr_opt2,4
	.space	4
	.sdecl	'.zbss.tcp_in.tcp_optidx',data,cluster('tcp_optidx')
	.sect	'.zbss.tcp_in.tcp_optidx'
	.align	2
tcp_optidx:	.type	object
	.size	tcp_optidx,2
	.space	2
	.sdecl	'.zbss.tcp_in.seqno',data,cluster('seqno')
	.sect	'.zbss.tcp_in.seqno'
	.align	2
seqno:	.type	object
	.size	seqno,4
	.space	4
	.sdecl	'.zbss.tcp_in.ackno',data,cluster('ackno')
	.sect	'.zbss.tcp_in.ackno'
	.align	2
ackno:	.type	object
	.size	ackno,4
	.space	4
	.sdecl	'.zbss.tcp_in.recv_acked',data,cluster('recv_acked')
	.sect	'.zbss.tcp_in.recv_acked'
	.align	2
recv_acked:	.type	object
	.size	recv_acked,2
	.space	2
	.sdecl	'.zbss.tcp_in.tcplen',data,cluster('tcplen')
	.sect	'.zbss.tcp_in.tcplen'
	.align	2
tcplen:	.type	object
	.size	tcplen,2
	.space	2
	.sdecl	'.zbss.tcp_in.flags',data,cluster('flags')
	.sect	'.zbss.tcp_in.flags'
flags:	.type	object
	.size	flags,1
	.space	1
	.sdecl	'.zbss.tcp_in.recv_flags',data,cluster('recv_flags')
	.sect	'.zbss.tcp_in.recv_flags'
recv_flags:	.type	object
	.size	recv_flags,1
	.space	1
	.sdecl	'.zbss.tcp_in.recv_data',data,cluster('recv_data')
	.sect	'.zbss.tcp_in.recv_data'
	.align	4
recv_data:	.type	object
	.size	recv_data,4
	.space	4
	.sdecl	'.zbss.tcp_in.tcp_input_pcb',data,cluster('tcp_input_pcb')
	.sect	'.zbss.tcp_in.tcp_input_pcb'
	.global	tcp_input_pcb
	.align	4
tcp_input_pcb:	.type	object
	.size	tcp_input_pcb,4
	.space	4
	.sdecl	'.rodata.tcp_in..1.str',data,rom
	.sect	'.rodata.tcp_in..1.str'
.1.str:	.type	object
	.size	.1.str,40
	.byte	65,115,115,101
	.byte	114,116,105,111
	.byte	110,32,34,37
	.byte	115,34,32,102
	.byte	97,105,108,101
	.byte	100,32,97,116
	.byte	32,108,105,110
	.byte	101,32,37,100
	.byte	32,105,110,32
	.byte	37,115,10
	.space	1
	.sdecl	'.rodata.tcp_in..2.str',data,rom
	.sect	'.rodata.tcp_in..2.str'
.2.str:	.type	object
	.size	.2.str,24
	.byte	116,99,112,95
	.byte	105,110,112,117
	.byte	116,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,112
	.byte	98,117,102
	.space	1
	.sdecl	'.rodata.tcp_in..3.str',data,rom
	.sect	'.rodata.tcp_in..3.str'
.3.str:	.type	object
	.size	.3.str,49
	.byte	46,46,92,48
	.byte	95,83,114,99
	.byte	92,48,95,65
	.byte	112,112,83,119
	.byte	92,69,116,104
	.byte	101,114,110,101
	.byte	116,92,108,119
	.byte	105,112,92,115
	.byte	114,99,92,99
	.byte	111,114,101,92
	.byte	116,99,112,95
	.byte	105,110,46,99
	.space	1
	.sdecl	'.rodata.tcp_in..7.str',data,rom
	.sect	'.rodata.tcp_in..7.str'
.7.str:	.type	object
	.size	.7.str,16
	.byte	112,45,62,110
	.byte	101,120,116,32
	.byte	33,61,32,78
	.byte	85,76,76
	.space	1
	.sdecl	'.rodata.tcp_in..9.str',data,rom
	.sect	'.rodata.tcp_in..9.str'
.9.str:	.type	object
	.size	.9.str,12
	.byte	112,45,62,108
	.byte	101,110,32,61
	.byte	61,32,48
	.space	1
	.sdecl	'.rodata.tcp_in..10.str',data,rom
	.sect	'.rodata.tcp_in..10.str'
.10.str:	.type	object
	.size	.10.str,31
	.byte	112,45,62,116
	.byte	111,116,95,108
	.byte	101,110,32,61
	.byte	61,32,112,45
	.byte	62,110,101,120
	.byte	116,45,62,116
	.byte	111,116,95,108
	.byte	101,110
	.space	1
	.sdecl	'.rodata.tcp_in..12.str',data,rom
	.sect	'.rodata.tcp_in..12.str'
.12.str:	.type	object
	.size	.12.str,39
	.byte	116,99,112,95
	.byte	105,110,112,117
	.byte	116,58,32,97
	.byte	99,116,105,118
	.byte	101,32,112,99
	.byte	98,45,62,115
	.byte	116,97,116,101
	.byte	32,33,61,32
	.byte	67,76,79,83
	.byte	69,68
	.space	1
	.sdecl	'.rodata.tcp_in..13.str',data,rom
	.sect	'.rodata.tcp_in..13.str'
.13.str:	.type	object
	.size	.13.str,42
	.byte	116,99,112,95
	.byte	105,110,112,117
	.byte	116,58,32,97
	.byte	99,116,105,118
	.byte	101,32,112,99
	.byte	98,45,62,115
	.byte	116,97,116,101
	.byte	32,33,61,32
	.byte	84,73,77,69
	.byte	45,87,65,73
	.byte	84
	.space	1
	.sdecl	'.rodata.tcp_in..14.str',data,rom
	.sect	'.rodata.tcp_in..14.str'
.14.str:	.type	object
	.size	.14.str,39
	.byte	116,99,112,95
	.byte	105,110,112,117
	.byte	116,58,32,97
	.byte	99,116,105,118
	.byte	101,32,112,99
	.byte	98,45,62,115
	.byte	116,97,116,101
	.byte	32,33,61,32
	.byte	76,73,83,84
	.byte	69,78
	.space	1
	.sdecl	'.rodata.tcp_in..15.str',data,rom
	.sect	'.rodata.tcp_in..15.str'
.15.str:	.type	object
	.size	.15.str,43
	.byte	116,99,112,95
	.byte	105,110,112,117
	.byte	116,58,32,112
	.byte	99,98,45,62
	.byte	110,101,120,116
	.byte	32,33,61,32
	.byte	112,99,98,32
	.byte	40,98,101,102
	.byte	111,114,101,32
	.byte	99,97,99,104
	.byte	101,41
	.space	1
	.sdecl	'.rodata.tcp_in..16.str',data,rom
	.sect	'.rodata.tcp_in..16.str'
.16.str:	.type	object
	.size	.16.str,42
	.byte	116,99,112,95
	.byte	105,110,112,117
	.byte	116,58,32,112
	.byte	99,98,45,62
	.byte	110,101,120,116
	.byte	32,33,61,32
	.byte	112,99,98,32
	.byte	40,97,102,116
	.byte	101,114,32,99
	.byte	97,99,104,101
	.byte	41
	.space	1
	.sdecl	'.rodata.tcp_in..17.str',data,rom
	.sect	'.rodata.tcp_in..17.str'
.17.str:	.type	object
	.size	.17.str,45
	.byte	116,99,112,95
	.byte	105,110,112,117
	.byte	116,58,32,84
	.byte	73,77,69,45
	.byte	87,65,73,84
	.byte	32,112,99,98
	.byte	45,62,115,116
	.byte	97,116,101,32
	.byte	61,61,32,84
	.byte	73,77,69,45
	.byte	87,65,73,84
	.space	1
	.sdecl	'.rodata.tcp_in..22.str',data,rom
	.sect	'.rodata.tcp_in..22.str'
.22.str:	.type	object
	.size	.22.str,26
	.byte	112,99,98,45
	.byte	62,114,101,102
	.byte	117,115,101,100
	.byte	95,100,97,116
	.byte	97,32,61,61
	.byte	32,78,85,76
	.byte	76
	.space	1
	.sdecl	'.rodata.tcp_in..25.str',data,rom
	.sect	'.rodata.tcp_in..25.str'
.25.str:	.type	object
	.size	.25.str,27
	.byte	116,99,112,95
	.byte	105,110,112,117
	.byte	116,58,32,116
	.byte	99,112,95,112
	.byte	99,98,115,95
	.byte	115,97,110,101
	.byte	40,41
	.space	1
	.sdecl	'.rodata.tcp_in..34.str',data,rom
	.sect	'.rodata.tcp_in..34.str'
.34.str:	.type	object
	.size	.34.str,32
	.byte	116,99,112,95
	.byte	105,110,112,117
	.byte	116,58,32,112
	.byte	99,98,45,62
	.byte	115,116,97,116
	.byte	101,32,33,61
	.byte	32,67,76,79
	.byte	83,69,68
	.space	1
	.sdecl	'.rodata.tcp_in..38.str',data,rom
	.sect	'.rodata.tcp_in..38.str'
.38.str:	.type	object
	.size	.38.str,22
	.byte	112,99,98,45
	.byte	62,115,110,100
	.byte	95,113,117,101
	.byte	117,101,108,101
	.byte	110,32,62,32
	.byte	48
	.space	1
	.sdecl	'.rodata.tcp_in..40.str',data,rom
	.sect	'.rodata.tcp_in..40.str'
.40.str:	.type	object
	.size	.40.str,19
	.byte	110,111,32,115
	.byte	101,103,109,101
	.byte	110,116,32,116
	.byte	111,32,102,114
	.byte	101,101
	.space	1
	.sdecl	'.rodata.tcp_in..42.str',data,rom
	.sect	'.rodata.tcp_in..42.str'
.42.str:	.type	object
	.size	.42.str,30
	.byte	112,99,98,45
	.byte	62,108,105,115
	.byte	116,101,110,101
	.byte	114,45,62,97
	.byte	99,99,101,112
	.byte	116,32,33,61
	.byte	32,78,85,76
	.byte	76
	.space	1
	.sdecl	'.rodata.tcp_in..51.str',data,rom
	.sect	'.rodata.tcp_in..51.str'
.51.str:	.type	object
	.size	.51.str,40
	.byte	112,99,98,45
	.byte	62,115,110,100
	.byte	95,113,117,101
	.byte	117,101,108,101
	.byte	110,32,62,61
	.byte	32,112,98,117
	.byte	102,95,99,108
	.byte	101,110,40,110
	.byte	101,120,116,45
	.byte	62,112,41
	.space	1
	.sdecl	'.rodata.tcp_in..53.str',data,rom
	.sect	'.rodata.tcp_in..53.str'
.53.str:	.type	object
	.size	.53.str,32
	.byte	116,99,112,95
	.byte	114,101,99,101
	.byte	105,118,101,58
	.byte	32,118,97,108
	.byte	105,100,32,113
	.byte	117,101,117,101
	.byte	32,108,101,110
	.byte	103,116,104
	.space	1
	.sdecl	'.rodata.tcp_in..55.str',data,rom
	.sect	'.rodata.tcp_in..55.str'
.55.str:	.type	object
	.size	.55.str,25
	.byte	116,99,112,95
	.byte	114,101,99,101
	.byte	105,118,101,58
	.byte	32,119,114,111
	.byte	110,103,32,115
	.byte	116,97,116,101
	.space	1
	.sdecl	'.rodata.tcp_in..56.str',data,rom
	.sect	'.rodata.tcp_in..56.str'
.56.str:	.type	object
	.size	.56.str,31
	.byte	116,99,112,95
	.byte	114,101,99,101
	.byte	105,118,101,58
	.byte	32,119,105,110
	.byte	100,111,119,32
	.byte	117,112,100,97
	.byte	116,101,32,37
	.byte	117,10
	.space	1
	.sdecl	'.rodata.tcp_in..57.str',data,rom
	.sect	'.rodata.tcp_in..57.str'
.57.str:	.type	object
	.size	.57.str,74
	.byte	116,99,112,95
	.byte	114,101,99,101
	.byte	105,118,101,58
	.byte	32,110,111,32
	.byte	119,105,110,100
	.byte	111,119,32,117
	.byte	112,100,97,116
	.byte	101,32,108,97
	.byte	115,116,97,99
	.byte	107,32,37,117
	.byte	32,97,99,107
	.byte	110,111,32,37
	.byte	117,32,119,108
	.byte	49,32,37,117
	.byte	32,115,101,113
	.byte	110,111,32,37
	.byte	117,32,119,108
	.byte	50,32,37,117
	.byte	10
	.space	1
	.sdecl	'.zrodata.tcp_in..61.str',data,rom
	.sect	'.zrodata.tcp_in..61.str'
.61.str:	.type	object
	.size	.61.str,8
	.byte	117,110,97,99
	.byte	107,101,100
	.space	1
	.sdecl	'.zrodata.tcp_in..62.str',data,rom
	.sect	'.zrodata.tcp_in..62.str'
.62.str:	.type	object
	.size	.62.str,7
	.byte	117,110,115,101
	.byte	110,116
	.space	1
	.sdecl	'.rodata.tcp_in..66.str',data,rom
	.sect	'.rodata.tcp_in..66.str'
.66.str:	.type	object
	.size	.66.str,16
	.byte	105,110,115,101
	.byte	103,46,112,32
	.byte	33,61,32,78
	.byte	85,76,76
	.space	1
	.sdecl	'.rodata.tcp_in..67.str',data,rom
	.sect	'.rodata.tcp_in..67.str'
.67.str:	.type	object
	.size	.67.str,15
	.byte	105,110,115,97
	.byte	110,101,32,111
	.byte	102,102,115,101
	.byte	116,33
	.space	1
	.sdecl	'.rodata.tcp_in..68.str',data,rom
	.sect	'.rodata.tcp_in..68.str'
.68.str:	.type	object
	.size	.68.str,16
	.byte	112,98,117,102
	.byte	32,116,111,111
	.byte	32,115,104,111
	.byte	114,116,33
	.space	1
	.sdecl	'.rodata.tcp_in..71.str',data,rom
	.sect	'.rodata.tcp_in..71.str'
.71.str:	.type	object
	.size	.71.str,55
	.byte	116,99,112,95
	.byte	114,101,99,101
	.byte	105,118,101,58
	.byte	32,115,101,103
	.byte	109,101,110,116
	.byte	32,110,111,116
	.byte	32,116,114,105
	.byte	109,109,101,100
	.byte	32,99,111,114
	.byte	114,101,99,116
	.byte	108,121,32,116
	.byte	111,32,114,99
	.byte	118,95,119,110
	.byte	100,10
	.space	1
	.sdecl	'.rodata.tcp_in..73.str',data,rom
	.sect	'.rodata.tcp_in..73.str'
.73.str:	.type	object
	.size	.73.str,59
	.byte	116,99,112,95
	.byte	114,101,99,101
	.byte	105,118,101,58
	.byte	32,115,101,103
	.byte	109,101,110,116
	.byte	32,110,111,116
	.byte	32,116,114,105
	.byte	109,109,101,100
	.byte	32,99,111,114
	.byte	114,101,99,116
	.byte	108,121,32,116
	.byte	111,32,111,111
	.byte	115,101,113,32
	.byte	113,117,101,117
	.byte	101,10
	.space	1
	.sdecl	'.rodata.tcp_in..74.str',data,rom
	.sect	'.rodata.tcp_in..74.str'
.74.str:	.type	object
	.size	.74.str,31
	.byte	116,99,112,95
	.byte	114,101,99,101
	.byte	105,118,101,58
	.byte	32,116,99,112
	.byte	108,101,110,32
	.byte	62,32,114,99
	.byte	118,95,119,110
	.byte	100,10
	.space	1
	.sdecl	'.rodata.tcp_in..76.str',data,rom
	.sect	'.rodata.tcp_in..76.str'
.76.str:	.type	object
	.size	.76.str,37
	.byte	116,99,112,95
	.byte	114,101,99,101
	.byte	105,118,101,58
	.byte	32,111,111,115
	.byte	101,113,32,116
	.byte	99,112,108,101
	.byte	110,32,62,32
	.byte	114,99,118,95
	.byte	119,110,100,10
	.space	1
	.calls	'tcp_input','Ifx_Lwip_printf'
	.calls	'tcp_input','tcp_debug_print'
	.calls	'tcp_input','ip4_addr_isbroadcast_u32'
	.calls	'tcp_input','ip_chksum_pseudo'
	.calls	'tcp_input','lwip_htons'
	.calls	'tcp_input','pbuf_remove_header'
	.calls	'tcp_input','lwip_htonl'
	.calls	'tcp_input','tcp_timewait_input'
	.calls	'tcp_input','tcp_listen_input'
	.calls	'tcp_input','tcp_debug_print_flags'
	.calls	'tcp_input','tcp_debug_print_state'
	.calls	'tcp_input','tcp_process_refused_data'
	.calls	'tcp_input','tcp_send_empty_ack'
	.calls	'tcp_input','tcp_process'
	.calls	'tcp_input','__INDIRECT__'
	.calls	'tcp_input','tcp_pcb_remove'
	.calls	'tcp_input','tcp_free'
	.calls	'tcp_input','tcp_input_delayed_close'
	.calls	'tcp_input','pbuf_free'
	.calls	'tcp_input','tcp_abort'
	.calls	'tcp_input','tcp_recv_null'
	.calls	'tcp_input','tcp_output'
	.calls	'tcp_input','tcp_rst'
	.calls	'tcp_input','tcp_pcbs_sane'
	.calls	'tcp_input_delayed_close','__INDIRECT__'
	.calls	'tcp_input_delayed_close','tcp_pcb_remove'
	.calls	'tcp_input_delayed_close','tcp_free'
	.calls	'tcp_listen_input','tcp_rst'
	.calls	'tcp_listen_input','tcp_alloc'
	.calls	'tcp_listen_input','__INDIRECT__'
	.calls	'tcp_listen_input','tcp_next_iss'
	.calls	'tcp_listen_input','tcp_timer_needed'
	.calls	'tcp_listen_input','tcp_parseopt'
	.calls	'tcp_listen_input','ip4_route'
	.calls	'tcp_listen_input','tcp_eff_send_mss_netif'
	.calls	'tcp_listen_input','tcp_enqueue_flags'
	.calls	'tcp_listen_input','tcp_abandon'
	.calls	'tcp_listen_input','tcp_output'
	.calls	'tcp_timewait_input','tcp_rst'
	.calls	'tcp_timewait_input','tcp_output'
	.calls	'tcp_process','Ifx_Lwip_printf'
	.calls	'tcp_process','tcp_parseopt'
	.calls	'tcp_process','ip4_route'
	.calls	'tcp_process','tcp_eff_send_mss_netif'
	.calls	'tcp_process','tcp_seg_free'
	.calls	'tcp_process','__INDIRECT__'
	.calls	'tcp_process','tcp_rst'
	.calls	'tcp_process','tcp_rexmit_rto'
	.calls	'tcp_process','tcp_abort'
	.calls	'tcp_process','tcp_receive'
	.calls	'tcp_process','tcp_rexmit'
	.calls	'tcp_process','tcp_pcb_purge'
	.calls	'tcp_process','tcp_timer_needed'
	.calls	'tcp_oos_insert_segment','lwip_htons'
	.calls	'tcp_oos_insert_segment','tcp_segs_free'
	.calls	'tcp_oos_insert_segment','tcp_seg_free'
	.calls	'tcp_oos_insert_segment','pbuf_realloc'
	.calls	'tcp_free_acked_segments','pbuf_clen'
	.calls	'tcp_free_acked_segments','Ifx_Lwip_printf'
	.calls	'tcp_free_acked_segments','tcp_seg_free'
	.calls	'tcp_free_acked_segments','lwip_htons'
	.calls	'tcp_free_acked_segments','lwip_htonl'
	.calls	'tcp_receive','Ifx_Lwip_printf'
	.calls	'tcp_receive','tcp_rexmit_fast'
	.calls	'tcp_receive','tcp_free_acked_segments'
	.calls	'tcp_receive','lwip_htonl'
	.calls	'tcp_receive','tcp_send_empty_ack'
	.calls	'tcp_receive','pbuf_remove_header'
	.calls	'tcp_receive','lwip_htons'
	.calls	'tcp_receive','pbuf_realloc'
	.calls	'tcp_receive','tcp_seg_free'
	.calls	'tcp_receive','tcp_update_rcv_ann_wnd'
	.calls	'tcp_receive','pbuf_cat'
	.calls	'tcp_receive','tcp_seg_copy'
	.calls	'tcp_receive','tcp_oos_insert_segment'
	.calls	'tcp_parseopt','tcp_get_next_optbyte'
	.calls	'tcp_input','.cocofun_85'
	.calls	'tcp_input','.cocofun_84'
	.calls	'tcp_input','.cocofun_96'
	.calls	'tcp_input','.cocofun_97'
	.calls	'tcp_input','.cocofun_98'
	.calls	'tcp_input','.cocofun_91'
	.calls	'tcp_listen_input','.cocofun_102'
	.calls	'tcp_listen_input','.cocofun_87'
	.calls	'tcp_listen_input','.cocofun_92'
	.calls	'.cocofun_87','.cocofun_101'
	.calls	'tcp_process','.cocofun_93'
	.calls	'tcp_process','.cocofun_89'
	.calls	'tcp_process','.cocofun_84'
	.calls	'tcp_process','.cocofun_92'
	.calls	'tcp_process','.cocofun_102'
	.calls	'tcp_process','.cocofun_101'
	.calls	'tcp_process','.cocofun_87'
	.calls	'tcp_process','.cocofun_99'
	.calls	'tcp_free_acked_segments','.cocofun_85'
	.calls	'tcp_free_acked_segments','.cocofun_84'
	.calls	'tcp_receive','.cocofun_85'
	.calls	'tcp_receive','.cocofun_84'
	.calls	'tcp_receive','.cocofun_94'
	.calls	'tcp_receive','.cocofun_88'
	.calls	'tcp_receive','.cocofun_86'
	.calls	'tcp_receive','.cocofun_103'
	.calls	'tcp_receive','.cocofun_95'
	.calls	'tcp_receive','.cocofun_104'
	.calls	'tcp_receive','.cocofun_89'
	.calls	'tcp_receive','.cocofun_90'
	.calls	'tcp_receive','.cocofun_100'
	.calls	'.cocofun_95','.cocofun_104'
	.calls	'.cocofun_86','.cocofun_103'
	.calls	'.cocofun_86','.cocofun_104'
	.calls	'tcp_input','',32
	.calls	'.cocofun_98','',0
	.calls	'.cocofun_97','',0
	.calls	'.cocofun_96','',0
	.calls	'.cocofun_91','',0
	.calls	'.cocofun_85','',0
	.calls	'.cocofun_84','',0
	.calls	'tcp_input_delayed_close','',0
	.calls	'tcp_listen_input','',0
	.calls	'.cocofun_102','',0
	.calls	'.cocofun_92','',0
	.calls	'.cocofun_87','',0
	.calls	'.cocofun_101','',0
	.calls	'tcp_timewait_input','',0
	.calls	'tcp_process','',16
	.calls	'.cocofun_99','',0
	.calls	'.cocofun_93','',0
	.calls	'tcp_oos_insert_segment','',0
	.calls	'tcp_free_acked_segments','',16
	.calls	'tcp_receive','',40
	.calls	'.cocofun_104','',0
	.calls	'.cocofun_103','',0
	.calls	'.cocofun_100','',0
	.calls	'.cocofun_95','',0
	.calls	'.cocofun_94','',0
	.calls	'.cocofun_90','',0
	.calls	'.cocofun_89','',0
	.calls	'.cocofun_88','',0
	.calls	'.cocofun_86','',0
	.calls	'tcp_get_next_optbyte','',0
	.calls	'tcp_parseopt','',0
	.extern	Ifx_Lwip_printf
	.extern	pbuf_realloc
	.extern	pbuf_remove_header
	.extern	pbuf_free
	.extern	pbuf_clen
	.extern	pbuf_cat
	.extern	lwip_htons
	.extern	lwip_htonl
	.extern	ip4_addr_isbroadcast_u32
	.extern	lwip_stats
	.extern	ip4_route
	.extern	ip_data
	.extern	tcp_abort
	.extern	tcp_output
	.extern	tcp_alloc
	.extern	tcp_free
	.extern	tcp_abandon
	.extern	tcp_send_empty_ack
	.extern	tcp_rexmit
	.extern	tcp_rexmit_rto
	.extern	tcp_rexmit_fast
	.extern	tcp_update_rcv_ann_wnd
	.extern	tcp_process_refused_data
	.extern	tcp_ticks
	.extern	tcp_active_pcbs_changed
	.extern	tcp_listen_pcbs
	.extern	tcp_active_pcbs
	.extern	tcp_tw_pcbs
	.extern	tcp_pcb_purge
	.extern	tcp_pcb_remove
	.extern	tcp_segs_free
	.extern	tcp_seg_free
	.extern	tcp_seg_copy
	.extern	tcp_enqueue_flags
	.extern	tcp_rst
	.extern	tcp_next_iss
	.extern	tcp_eff_send_mss_netif
	.extern	tcp_recv_null
	.extern	tcp_debug_print
	.extern	tcp_debug_print_flags
	.extern	tcp_debug_print_state
	.extern	tcp_pcbs_sane
	.extern	tcp_timer_needed
	.extern	ip_chksum_pseudo
	.extern	__INDIRECT__
	.calls	'tcp_trigger_input_pcb_close','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L430:
	.word	7162
	.half	3
	.word	.L431
	.byte	4
.L429:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L432
.L662:
	.byte	2
	.byte	'int',0,4,5,3
	.word	161
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	168
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	210
	.byte	7
	.word	210
	.byte	8
	.byte	'__cmpswapw',0
	.word	226
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	231
	.byte	9
	.byte	'value',0
	.word	210
	.byte	9
	.byte	'compare',0
	.word	210
	.byte	0
.L634:
	.byte	2
	.byte	'char',0,1,6,2
	.byte	'char',0,1,6,3
	.word	296
.L714:
	.byte	7
	.word	304
	.byte	10
	.byte	'Ifx_Lwip_printf',0,1,123,6
	.word	288
	.byte	1,1,1,1,11
	.byte	's',0,1,123,34
	.word	309
	.byte	12,1,123,37,0,13
	.byte	'void',0,7
	.word	357
.L636:
	.byte	2
	.byte	'unsigned short int',0,2,7
.L632:
	.byte	2
	.byte	'unsigned char',0,1,8,14
	.byte	'pbuf',0,2,186,1,8,16,15
	.byte	'next',0
	.word	.L622-.L430
	.byte	4,2,35,0,15
	.byte	'payload',0
	.word	363
	.byte	4,2,35,4,15
	.byte	'tot_len',0
	.word	368
	.byte	2,2,35,8,15
	.byte	'len',0
	.word	368
	.byte	2,2,35,10,15
	.byte	'type_internal',0
	.word	390
	.byte	1,2,35,12,15
	.byte	'flags',0
	.word	390
	.byte	1,2,35,13,15
	.byte	'ref',0
	.word	390
	.byte	1,2,35,14,15
	.byte	'if_idx',0
	.word	390
	.byte	1,2,35,15,0
.L622:
	.byte	7
	.word	407
	.byte	16
	.byte	'pbuf_realloc',0,2,154,2,6,1,1,1,1,11
	.byte	'p',0,2,154,2,32
	.word	547
	.byte	11
	.byte	'size',0,2,154,2,41
	.word	368
	.byte	0,10
	.byte	'pbuf_remove_header',0,2,162,2,6
	.word	390
	.byte	1,1,1,1,11
	.byte	'p',0,2,162,2,38
	.word	547
	.byte	11
	.byte	'header_size',0,2,162,2,48
	.word	210
	.byte	0,10
	.byte	'pbuf_free',0,2,165,2,6
	.word	390
	.byte	1,1,1,1,11
	.byte	'p',0,2,165,2,29
	.word	547
	.byte	0,3
	.word	407
	.byte	7
	.word	700
	.byte	10
	.byte	'pbuf_clen',0,2,166,2,7
	.word	368
	.byte	1,1,1,1,11
	.byte	'p',0,2,166,2,36
	.word	705
	.byte	0,16
	.byte	'pbuf_cat',0,2,167,2,6,1,1,1,1,11
	.byte	'head',0,2,167,2,28
	.word	547
	.byte	11
	.byte	'tail',0,2,167,2,47
	.word	547
	.byte	0,10
	.byte	'lwip_htons',0,3,96,7
	.word	368
	.byte	1,1,1,1,11
	.byte	'x',0,3,96,24
	.word	368
	.byte	0
.L660:
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'lwip_htonl',0,3,101,7
	.word	826
	.byte	1,1,1,1,11
	.byte	'x',0,3,101,24
	.word	826
	.byte	0
.L624:
	.byte	7
	.word	.L1013-.L430
	.byte	14
	.byte	'ip4_addr',0,4,51,8,4,15
	.byte	'addr',0
	.word	826
	.byte	4,2,35,0,0,17
	.word	288
	.byte	1,1,5
	.word	547
	.byte	5
	.word	881
	.byte	0,7
	.word	915
	.byte	18
	.byte	'netif_input_fn',0,5,178,1,17
	.word	933
	.byte	3
	.word	886
	.byte	7
	.word	962
	.byte	17
	.word	288
	.byte	1,1,5
	.word	881
	.byte	5
	.word	547
	.byte	5
	.word	967
	.byte	0,7
	.word	972
	.byte	18
	.byte	'netif_output_fn',0,5,189,1,17
	.word	995
	.byte	17
	.word	288
	.byte	1,1,5
	.word	881
	.byte	5
	.word	547
	.byte	0,7
	.word	1025
	.byte	18
	.byte	'netif_linkoutput_fn',0,5,212,1,17
	.word	1043
	.byte	19,6
	.word	390
	.byte	20,5,0,19,2
	.word	296
	.byte	20,1,0
.L1013:
	.byte	14
	.byte	'netif',0,5,132,2,8,48,15
	.byte	'next',0
	.word	881
	.byte	4,2,35,0,15
	.byte	'ip_addr',0
	.word	886
	.byte	4,2,35,4,15
	.byte	'netmask',0
	.word	886
	.byte	4,2,35,8,15
	.byte	'gw',0
	.word	886
	.byte	4,2,35,12,15
	.byte	'input',0
	.word	938
	.byte	4,2,35,16,15
	.byte	'output',0
	.word	1000
	.byte	4,2,35,20,15
	.byte	'linkoutput',0
	.word	1048
	.byte	4,2,35,24,15
	.byte	'state',0
	.word	363
	.byte	4,2,35,28,15
	.byte	'mtu',0
	.word	368
	.byte	2,2,35,32,15
	.byte	'hwaddr',0
	.word	1077
	.byte	6,2,35,34,15
	.byte	'hwaddr_len',0
	.word	390
	.byte	1,2,35,40,15
	.byte	'flags',0
	.word	390
	.byte	1,2,35,41,15
	.byte	'name',0
	.word	1086
	.byte	2,2,35,42,15
	.byte	'num',0
	.word	390
	.byte	1,2,35,44,15
	.byte	'rs_count',0
	.word	390
	.byte	1,2,35,45,0,3
	.word	1095
	.byte	7
	.word	1343
	.byte	10
	.byte	'ip4_addr_isbroadcast_u32',0,4,151,1,6
	.word	390
	.byte	1,1,1,1,11
	.byte	'addr',0,4,151,1,37
	.word	826
	.byte	11
	.byte	'netif',0,4,151,1,63
	.word	1348
	.byte	0,7
	.word	915
	.byte	7
	.word	972
	.byte	7
	.word	1025
	.byte	3
	.word	886
	.byte	7
	.word	1436
	.byte	10
	.byte	'ip4_route',0,6,65,15
	.word	881
	.byte	1,1,1,1,11
	.byte	'dest',0,6,65,43
	.word	1441
	.byte	0,21
	.byte	'tcp_state',0,8,56,6,1,22
	.byte	'CLOSED',0,0,22
	.byte	'LISTEN',0,1,22
	.byte	'SYN_SENT',0,2,22
	.byte	'SYN_RCVD',0,3,22
	.byte	'ESTABLISHED',0,4,22
	.byte	'FIN_WAIT_1',0,5,22
	.byte	'FIN_WAIT_2',0,6,22
	.byte	'CLOSE_WAIT',0,7,22
	.byte	'CLOSING',0,8,22
	.byte	'LAST_ACK',0,9,22
	.byte	'TIME_WAIT',0,10,0
.L658:
	.byte	2
	.byte	'short int',0,2,5,14
	.byte	'tcp_hdr',0,10,56,8,20,15
	.byte	'src',0
	.word	368
	.byte	2,2,35,0,15
	.byte	'dest',0
	.word	368
	.byte	2,2,35,2,15
	.byte	'seqno',0
	.word	826
	.byte	4,2,35,4,15
	.byte	'ackno',0
	.word	826
	.byte	4,2,35,8,15
	.byte	'_hdrlen_rsvd_flags',0
	.word	368
	.byte	2,2,35,12,15
	.byte	'wnd',0
	.word	368
	.byte	2,2,35,14,15
	.byte	'chksum',0
	.word	368
	.byte	2,2,35,16,15
	.byte	'urgp',0
	.word	368
	.byte	2,2,35,18,0
.L723:
	.byte	7
	.word	1637
.L722:
	.byte	14
	.byte	'tcp_seg',0,9,253,1,8,20,15
	.byte	'next',0
	.word	.L644-.L430
	.byte	4,2,35,0,15
	.byte	'p',0
	.word	547
	.byte	4,2,35,4,15
	.byte	'len',0
	.word	368
	.byte	2,2,35,8,15
	.byte	'oversize_left',0
	.word	368
	.byte	2,2,35,10,15
	.byte	'flags',0
	.word	390
	.byte	1,2,35,12,15
	.byte	'tcphdr',0
	.word	1779
	.byte	4,2,35,16,0
.L644:
	.byte	7
	.word	1784
	.byte	17
	.word	288
	.byte	1,1,5
	.word	363
	.byte	5
	.word	.L627-.L430
	.byte	5
	.word	288
	.byte	0,7
	.word	1896
	.byte	18
	.byte	'tcp_accept_fn',0,7,70,17
	.word	1919
	.byte	14
	.byte	'tcp_pcb_listen',0,7,223,1,8,28,15
	.byte	'local_ip',0
	.word	886
	.byte	4,2,35,0,15
	.byte	'remote_ip',0
	.word	886
	.byte	4,2,35,4,15
	.byte	'netif_idx',0
	.word	390
	.byte	1,2,35,8,15
	.byte	'so_options',0
	.word	390
	.byte	1,2,35,9,15
	.byte	'tos',0
	.word	390
	.byte	1,2,35,10,15
	.byte	'ttl',0
	.word	390
	.byte	1,2,35,11,15
	.byte	'next',0
	.word	.L630-.L430
	.byte	4,2,35,12,15
	.byte	'callback_arg',0
	.word	363
	.byte	4,2,35,16,15
	.byte	'state',0
	.word	1482
	.byte	1,2,35,20,15
	.byte	'prio',0
	.word	390
	.byte	1,2,35,21,15
	.byte	'local_port',0
	.word	368
	.byte	2,2,35,22,15
	.byte	'accept',0
	.word	1924
	.byte	4,2,35,24,0
.L630:
	.byte	7
	.word	1946
	.byte	17
	.word	288
	.byte	1,1,5
	.word	363
	.byte	5
	.word	.L627-.L430
	.byte	5
	.word	368
	.byte	0,7
	.word	2176
	.byte	18
	.byte	'tcp_sent_fn',0,7,96,17
	.word	2199
	.byte	17
	.word	288
	.byte	1,1,5
	.word	363
	.byte	5
	.word	.L627-.L430
	.byte	5
	.word	547
	.byte	5
	.word	288
	.byte	0,7
	.word	2224
	.byte	18
	.byte	'tcp_recv_fn',0,7,82,17
	.word	2252
	.byte	18
	.byte	'tcp_connected_fn',0,7,134,1,17
	.word	1919
	.byte	17
	.word	288
	.byte	1,1,5
	.word	363
	.byte	5
	.word	.L627-.L430
	.byte	0,7
	.word	2303
	.byte	18
	.byte	'tcp_poll_fn',0,7,108,17
	.word	2321
	.byte	23,1,1,5
	.word	363
	.byte	5
	.word	288
	.byte	0,7
	.word	2346
	.byte	18
	.byte	'tcp_err_fn',0,7,120,17
	.word	2360
	.byte	14
	.byte	'tcp_pcb',0,7,242,1,8,156,1,15
	.byte	'local_ip',0
	.word	886
	.byte	4,2,35,0,15
	.byte	'remote_ip',0
	.word	886
	.byte	4,2,35,4,15
	.byte	'netif_idx',0
	.word	390
	.byte	1,2,35,8,15
	.byte	'so_options',0
	.word	390
	.byte	1,2,35,9,15
	.byte	'tos',0
	.word	390
	.byte	1,2,35,10,15
	.byte	'ttl',0
	.word	390
	.byte	1,2,35,11,15
	.byte	'next',0
	.word	.L627-.L430
	.byte	4,2,35,12,15
	.byte	'callback_arg',0
	.word	363
	.byte	4,2,35,16,15
	.byte	'state',0
	.word	1482
	.byte	1,2,35,20,15
	.byte	'prio',0
	.word	390
	.byte	1,2,35,21,15
	.byte	'local_port',0
	.word	368
	.byte	2,2,35,22,15
	.byte	'remote_port',0
	.word	368
	.byte	2,2,35,24,15
	.byte	'flags',0
	.word	368
	.byte	2,2,35,26,15
	.byte	'polltmr',0
	.word	390
	.byte	1,2,35,28,15
	.byte	'pollinterval',0
	.word	390
	.byte	1,2,35,29,15
	.byte	'last_timer',0
	.word	390
	.byte	1,2,35,30,15
	.byte	'tmr',0
	.word	826
	.byte	4,2,35,32,15
	.byte	'rcv_nxt',0
	.word	826
	.byte	4,2,35,36,15
	.byte	'rcv_wnd',0
	.word	368
	.byte	2,2,35,40,15
	.byte	'rcv_ann_wnd',0
	.word	368
	.byte	2,2,35,42,15
	.byte	'rcv_ann_right_edge',0
	.word	826
	.byte	4,2,35,44,15
	.byte	'rtime',0
	.word	1624
	.byte	2,2,35,48,15
	.byte	'mss',0
	.word	368
	.byte	2,2,35,50,15
	.byte	'rttest',0
	.word	826
	.byte	4,2,35,52,15
	.byte	'rtseq',0
	.word	826
	.byte	4,2,35,56,15
	.byte	'sa',0
	.word	1624
	.byte	2,2,35,60,15
	.byte	'sv',0
	.word	1624
	.byte	2,2,35,62,15
	.byte	'rto',0
	.word	1624
	.byte	2,2,35,64,15
	.byte	'nrtx',0
	.word	390
	.byte	1,2,35,66,15
	.byte	'dupacks',0
	.word	390
	.byte	1,2,35,67,15
	.byte	'lastack',0
	.word	826
	.byte	4,2,35,68,15
	.byte	'cwnd',0
	.word	368
	.byte	2,2,35,72,15
	.byte	'ssthresh',0
	.word	368
	.byte	2,2,35,74,15
	.byte	'rto_end',0
	.word	826
	.byte	4,2,35,76,15
	.byte	'snd_nxt',0
	.word	826
	.byte	4,2,35,80,15
	.byte	'snd_wl1',0
	.word	826
	.byte	4,2,35,84,15
	.byte	'snd_wl2',0
	.word	826
	.byte	4,2,35,88,15
	.byte	'snd_lbb',0
	.word	826
	.byte	4,2,35,92,15
	.byte	'snd_wnd',0
	.word	368
	.byte	2,2,35,96,15
	.byte	'snd_wnd_max',0
	.word	368
	.byte	2,2,35,98,15
	.byte	'snd_buf',0
	.word	368
	.byte	2,2,35,100,15
	.byte	'snd_queuelen',0
	.word	368
	.byte	2,2,35,102,15
	.byte	'unsent_oversize',0
	.word	368
	.byte	2,2,35,104,15
	.byte	'bytes_acked',0
	.word	368
	.byte	2,2,35,106,15
	.byte	'unsent',0
	.word	1891
	.byte	4,2,35,108,15
	.byte	'unacked',0
	.word	1891
	.byte	4,2,35,112,15
	.byte	'ooseq',0
	.word	1891
	.byte	4,2,35,116,15
	.byte	'refused_data',0
	.word	547
	.byte	4,2,35,120,15
	.byte	'listener',0
	.word	2171
	.byte	4,2,35,124,15
	.byte	'sent',0
	.word	2204
	.byte	4,3,35,128,1,15
	.byte	'recv',0
	.word	2257
	.byte	4,3,35,132,1,15
	.byte	'connected',0
	.word	2277
	.byte	4,3,35,136,1,15
	.byte	'poll',0
	.word	2326
	.byte	4,3,35,140,1,15
	.byte	'errf',0
	.word	2365
	.byte	4,3,35,144,1,15
	.byte	'keep_idle',0
	.word	826
	.byte	4,3,35,148,1,15
	.byte	'persist_cnt',0
	.word	390
	.byte	1,3,35,152,1,15
	.byte	'persist_backoff',0
	.word	390
	.byte	1,3,35,153,1,15
	.byte	'persist_probe',0
	.word	390
	.byte	1,3,35,154,1,15
	.byte	'keep_cnt_sent',0
	.word	390
	.byte	1,3,35,155,1,0
.L627:
	.byte	7
	.word	2384
	.byte	16
	.byte	'tcp_abort',0,7,213,3,18,1,1,1,1,11
	.byte	'pcb',0,7,213,3,45
	.word	3446
	.byte	0,7
	.word	1896
	.byte	7
	.word	2176
	.byte	7
	.word	2224
	.byte	7
	.word	1896
	.byte	7
	.word	2303
	.byte	7
	.word	2346
	.byte	10
	.byte	'tcp_output',0,7,222,3,18
	.word	288
	.byte	1,1,1,1,11
	.byte	'pcb',0,7,222,3,47
	.word	3446
	.byte	0,10
	.byte	'tcp_alloc',0,9,79,18
	.word	3446
	.byte	1,1,1,1,11
	.byte	'prio',0,9,79,36
	.word	390
	.byte	0,16
	.byte	'tcp_free',0,9,80,18,1,1,1,1,11
	.byte	'pcb',0,9,80,47
	.word	3446
	.byte	0,16
	.byte	'tcp_abandon',0,9,81,18,1,1,1,1,11
	.byte	'pcb',0,9,81,47
	.word	3446
	.byte	11
	.byte	'reset',0,9,81,56
	.word	161
	.byte	0,10
	.byte	'tcp_send_empty_ack',0,9,82,18
	.word	288
	.byte	1,1,1,1,11
	.byte	'pcb',0,9,82,53
	.word	3446
	.byte	0,10
	.byte	'tcp_rexmit',0,9,83,18
	.word	288
	.byte	1,1,1,1,11
	.byte	'pcb',0,9,83,47
	.word	3446
	.byte	0,16
	.byte	'tcp_rexmit_rto',0,9,86,18,1,1,1,1,11
	.byte	'pcb',0,9,86,51
	.word	3446
	.byte	0,16
	.byte	'tcp_rexmit_fast',0,9,87,18,1,1,1,1,11
	.byte	'pcb',0,9,87,51
	.word	3446
	.byte	0,10
	.byte	'tcp_update_rcv_ann_wnd',0,9,88,18
	.word	826
	.byte	1,1,1,1,11
	.byte	'pcb',0,9,88,57
	.word	3446
	.byte	0,10
	.byte	'tcp_process_refused_data',0,9,89,18
	.word	288
	.byte	1,1,1,1,11
	.byte	'pcb',0,9,89,59
	.word	3446
	.byte	0,16
	.byte	'tcp_pcb_purge',0,9,185,3,6,1,1,1,1,11
	.byte	'pcb',0,9,185,3,36
	.word	3446
	.byte	0,7
	.word	3446
	.byte	16
	.byte	'tcp_pcb_remove',0,9,186,3,6,1,1,1,1,11
	.byte	'pcblist',0,9,186,3,38
	.word	3953
	.byte	11
	.byte	'pcb',0,9,186,3,63
	.word	3446
	.byte	0,16
	.byte	'tcp_segs_free',0,9,188,3,6,1,1,1,1,11
	.byte	'seg',0,9,188,3,36
	.word	1891
	.byte	0,16
	.byte	'tcp_seg_free',0,9,189,3,6,1,1,1,1,11
	.byte	'seg',0,9,189,3,35
	.word	1891
	.byte	0,10
	.byte	'tcp_seg_copy',0,9,190,3,17
	.word	1891
	.byte	1,1,1,1,11
	.byte	'seg',0,9,190,3,46
	.word	1891
	.byte	0,10
	.byte	'tcp_enqueue_flags',0,9,207,3,7
	.word	288
	.byte	1,1,1,1,11
	.byte	'pcb',0,9,207,3,41
	.word	3446
	.byte	11
	.byte	'flags',0,9,207,3,51
	.word	390
	.byte	0,3
	.word	2384
	.byte	7
	.word	4186
	.byte	3
	.word	886
	.byte	7
	.word	4196
	.byte	16
	.byte	'tcp_rst',0,9,211,3,6,1,1,1,1,11
	.byte	'pcb',0,9,211,3,36
	.word	4191
	.byte	11
	.byte	'seqno',0,9,211,3,47
	.word	826
	.byte	11
	.byte	'ackno',0,9,211,3,60
	.word	826
	.byte	11
	.byte	'local_ip',0,9,212,3,25
	.word	4201
	.byte	11
	.byte	'remote_ip',0,9,212,3,52
	.word	4201
	.byte	11
	.byte	'local_port',0,9,213,3,14
	.word	368
	.byte	11
	.byte	'remote_port',0,9,213,3,32
	.word	368
	.byte	0,10
	.byte	'tcp_next_iss',0,9,215,3,7
	.word	826
	.byte	1,1,1,1,11
	.byte	'pcb',0,9,215,3,36
	.word	3446
	.byte	0,10
	.byte	'tcp_eff_send_mss_netif',0,9,223,3,7
	.word	368
	.byte	1,1,1,1,11
	.byte	'sendmss',0,9,223,3,36
	.word	368
	.byte	11
	.byte	'outif',0,9,223,3,59
	.word	881
	.byte	11
	.byte	'dest',0,9,224,3,47
	.word	4201
	.byte	0,10
	.byte	'tcp_recv_null',0,9,230,3,7
	.word	288
	.byte	1,1,1,1,11
	.byte	'arg',0,9,230,3,27
	.word	363
	.byte	11
	.byte	'pcb',0,9,230,3,48
	.word	3446
	.byte	11
	.byte	'p',0,9,230,3,66
	.word	547
	.byte	11
	.byte	'err',0,9,230,3,75
	.word	288
	.byte	0,16
	.byte	'tcp_debug_print',0,9,234,3,6,1,1,1,1,11
	.byte	'tcphdr',0,9,234,3,38
	.word	1779
	.byte	0,16
	.byte	'tcp_debug_print_flags',0,9,235,3,6,1,1,1,1,11
	.byte	'flags',0,9,235,3,33
	.word	390
	.byte	0,16
	.byte	'tcp_debug_print_state',0,9,236,3,6,1,1,1,1,11
	.byte	's',0,9,236,3,43
	.word	1482
	.byte	0,24
	.byte	'tcp_pcbs_sane',0,9,238,3,7
	.word	1624
	.byte	1,1,1,1,25
	.byte	'tcp_timer_needed',0,9,249,3,6,1,1,1,1,10
	.byte	'ip_chksum_pseudo',0,11,95,7
	.word	368
	.byte	1,1,1,1,11
	.byte	'p',0,11,95,37
	.word	547
	.byte	11
	.byte	'proto',0,11,95,45
	.word	390
	.byte	11
	.byte	'proto_len',0,11,95,58
	.word	368
	.byte	11
	.byte	'src',0,11,96,25
	.word	4201
	.byte	11
	.byte	'dest',0,11,96,47
	.word	4201
	.byte	0,26
	.byte	'__INDIRECT__',0,12,1,1,1,1,1,18
	.byte	'__wchar_t',0,12,1,1
	.word	1624
	.byte	18
	.byte	'__size_t',0,12,1,1
	.word	210
	.byte	18
	.byte	'__ptrdiff_t',0,12,1,1
	.word	161
	.byte	27,1,7
	.word	4903
	.byte	18
	.byte	'__codeptr',0,12,1,1
	.word	4905
	.byte	18
	.byte	'__intptr_t',0,12,1,1
	.word	161
	.byte	18
	.byte	'__uintptr_t',0,12,1,1
	.word	210
	.byte	18
	.byte	'size_t',0,13,24,25
	.word	210
	.byte	18
	.byte	'uint8',0,14,108,29
	.word	390
	.byte	18
	.byte	'uint16',0,14,112,29
	.word	368
	.byte	18
	.byte	'uint32',0,14,116,29
	.word	826
	.byte	18
	.byte	'sint8',0,14,125,29
	.word	288
	.byte	18
	.byte	'sint16',0,14,129,1,29
	.word	1624
	.byte	2
	.byte	'long int',0,4,5,18
	.byte	'sint32',0,14,134,1,29
	.word	5056
	.byte	2
	.byte	'long long int',0,8,5,18
	.byte	'sint64',0,14,141,1,29
	.word	5084
	.byte	2
	.byte	'float',0,4,4,18
	.byte	'float32',0,14,170,1,29
	.word	5117
	.byte	18
	.byte	'pvoid',0,15,54,28
	.word	363
	.byte	18
	.byte	'Ifx_TickTime',0,15,76,28
	.word	5084
	.byte	18
	.byte	'u8_t',0,1,85,16
	.word	390
	.byte	18
	.byte	'u16_t',0,1,86,16
	.word	368
	.byte	18
	.byte	'u32_t',0,1,87,16
	.word	826
	.byte	18
	.byte	's8_t',0,1,88,16
	.word	288
	.byte	18
	.byte	's16_t',0,1,89,16
	.word	1624
	.byte	18
	.byte	'intmax_t',0,16,198,2,41
	.word	5084
	.byte	18
	.byte	'tcpwnd_size_t',0,8,53,15
	.word	368
	.byte	18
	.byte	'mem_size_t',0,17,67,15
	.word	368
	.byte	18
	.byte	'err_t',0,18,96,14
	.word	288
	.byte	23,1,1,5
	.word	547
	.byte	0,7
	.word	5319
	.byte	18
	.byte	'pbuf_free_custom_fn',0,2,242,1,16
	.word	5328
	.byte	18
	.byte	'ip4_addr_t',0,4,57,25
	.word	886
	.byte	18
	.byte	'ip_addr_t',0,19,142,2,20
	.word	886
	.byte	14
	.byte	'stats_proto',0,20,64,8,24,15
	.byte	'xmit',0
	.word	368
	.byte	2,2,35,0,15
	.byte	'recv',0
	.word	368
	.byte	2,2,35,2,15
	.byte	'fw',0
	.word	368
	.byte	2,2,35,4,15
	.byte	'drop',0
	.word	368
	.byte	2,2,35,6,15
	.byte	'chkerr',0
	.word	368
	.byte	2,2,35,8,15
	.byte	'lenerr',0
	.word	368
	.byte	2,2,35,10,15
	.byte	'memerr',0
	.word	368
	.byte	2,2,35,12,15
	.byte	'rterr',0
	.word	368
	.byte	2,2,35,14,15
	.byte	'proterr',0
	.word	368
	.byte	2,2,35,16,15
	.byte	'opterr',0
	.word	368
	.byte	2,2,35,18,15
	.byte	'err',0
	.word	368
	.byte	2,2,35,20,15
	.byte	'cachehit',0
	.word	368
	.byte	2,2,35,22,0,14
	.byte	'stats_mem',0,20,98,8,16,15
	.byte	'name',0
	.word	309
	.byte	4,2,35,0,15
	.byte	'err',0
	.word	368
	.byte	2,2,35,4,15
	.byte	'avail',0
	.word	368
	.byte	2,2,35,6,15
	.byte	'used',0
	.word	368
	.byte	2,2,35,8,15
	.byte	'max',0
	.word	368
	.byte	2,2,35,10,15
	.byte	'illegal',0
	.word	368
	.byte	2,2,35,12,0,7
	.word	5599
	.byte	19,36
	.word	5701
	.byte	20,8,0,14
	.byte	'stats_',0,20,232,1,8,220,1,15
	.byte	'link',0
	.word	5400
	.byte	24,2,35,0,15
	.byte	'etharp',0
	.word	5400
	.byte	24,2,35,24,15
	.byte	'ip_frag',0
	.word	5400
	.byte	24,2,35,48,15
	.byte	'ip',0
	.word	5400
	.byte	24,2,35,72,15
	.byte	'icmp',0
	.word	5400
	.byte	24,2,35,96,15
	.byte	'udp',0
	.word	5400
	.byte	24,2,35,120,15
	.byte	'tcp',0
	.word	5400
	.byte	24,3,35,144,1,15
	.byte	'mem',0
	.word	5599
	.byte	16,3,35,168,1,15
	.byte	'memp',0
	.word	5706
	.byte	36,3,35,184,1,0,28
	.byte	'lwip_stats',0,20,176,2,22
	.word	5715
	.byte	1,1,14
	.byte	'link_changed_s',0,5,213,4,10,1,15
	.byte	'state',0
	.word	390
	.byte	1,2,35,0,0,14
	.byte	'status_changed_s',0,5,219,4,10,1,15
	.byte	'state',0
	.word	390
	.byte	1,2,35,0,0,14
	.byte	'ipv4_changed_s',0,5,225,4,10,12,15
	.byte	'old_address',0
	.word	4201
	.byte	4,2,35,0,15
	.byte	'old_netmask',0
	.word	4201
	.byte	4,2,35,4,15
	.byte	'old_gw',0
	.word	4201
	.byte	4,2,35,8,0,14
	.byte	'ipv6_set_s',0,5,233,4,10,8,15
	.byte	'addr_index',0
	.word	288
	.byte	1,2,35,0,15
	.byte	'old_address',0
	.word	4201
	.byte	4,2,35,4,0,14
	.byte	'ipv6_addr_state_changed_s',0,5,241,4,10,8,15
	.byte	'addr_index',0
	.word	288
	.byte	1,2,35,0,15
	.byte	'old_state',0
	.word	390
	.byte	1,2,35,1,15
	.byte	'address',0
	.word	4201
	.byte	4,2,35,4,0,29,5,210,4,9,12,15
	.byte	'link_changed',0
	.word	5881
	.byte	1,2,35,0,15
	.byte	'status_changed',0
	.word	5918
	.byte	1,2,35,0,15
	.byte	'ipv4_changed',0
	.word	5957
	.byte	12,2,35,0,15
	.byte	'ipv6_set',0
	.word	6037
	.byte	8,2,35,0,15
	.byte	'ipv6_addr_state_changed',0
	.word	6096
	.byte	8,2,35,0,0,3
	.word	6185
	.byte	7
	.word	6311
	.byte	23,1,1,5
	.word	881
	.byte	5
	.word	368
	.byte	5
	.word	6316
	.byte	0,7
	.word	6321
	.byte	18
	.byte	'netif_ext_callback_fn',0,5,132,5,16
	.word	6340
	.byte	14
	.byte	'ip4_addr_packed',0,21,53,8,4,15
	.byte	'addr',0
	.word	826
	.byte	4,2,35,0,0,18
	.byte	'ip4_addr_p_t',0,21,61,32
	.word	6376
	.byte	14
	.byte	'ip_hdr',0,21,73,8,20,15
	.byte	'_v_hl',0
	.word	390
	.byte	1,2,35,0,15
	.byte	'_tos',0
	.word	390
	.byte	1,2,35,1,15
	.byte	'_len',0
	.word	368
	.byte	2,2,35,2,15
	.byte	'_id',0
	.word	368
	.byte	2,2,35,4,15
	.byte	'_offset',0
	.word	368
	.byte	2,2,35,6,15
	.byte	'_ttl',0
	.word	390
	.byte	1,2,35,8,15
	.byte	'_proto',0
	.word	390
	.byte	1,2,35,9,15
	.byte	'_chksum',0
	.word	368
	.byte	2,2,35,10,15
	.byte	'src',0
	.word	6376
	.byte	4,2,35,12,15
	.byte	'dest',0
	.word	6376
	.byte	4,2,35,16,0,3
	.word	6433
	.byte	7
	.word	6593
	.byte	14
	.byte	'ip_globals',0,22,107,8,24,15
	.byte	'current_netif',0
	.word	881
	.byte	4,2,35,0,15
	.byte	'current_input_netif',0
	.word	881
	.byte	4,2,35,4,15
	.byte	'current_ip4_header',0
	.word	6598
	.byte	4,2,35,8,15
	.byte	'current_ip_header_tot_len',0
	.word	368
	.byte	2,2,35,12,15
	.byte	'current_iphdr_src',0
	.word	886
	.byte	4,2,35,14,15
	.byte	'current_iphdr_dest',0
	.word	886
	.byte	4,2,35,18,0,28
	.byte	'ip_data',0,22,128,1,26
	.word	6603
	.byte	1,1,23,1,1,5
	.word	390
	.byte	5
	.word	363
	.byte	0,7
	.word	6809
	.byte	18
	.byte	'tcp_extarg_callback_pcb_destroyed_fn',0,7,173,1,16
	.word	6823
	.byte	17
	.word	288
	.byte	1,1,5
	.word	390
	.byte	5
	.word	2171
	.byte	5
	.word	3446
	.byte	0,7
	.word	6874
	.byte	18
	.byte	'tcp_extarg_callback_passive_open_fn',0,7,182,1,17
	.word	6897
	.byte	18
	.byte	'tcpflags_t',0,7,206,1,15
	.word	368
	.byte	28
	.byte	'tcp_ticks',0,9,199,2,14
	.word	826
	.byte	1,1,28
	.byte	'tcp_active_pcbs_changed',0,9,200,2,13
	.word	390
	.byte	1,1,30
	.byte	'tcp_listen_pcbs_t',0,9,203,2,7,4,15
	.byte	'listen_pcbs',0
	.word	2171
	.byte	4,2,35,0,15
	.byte	'pcbs',0
	.word	3446
	.byte	4,2,35,0,0,28
	.byte	'tcp_listen_pcbs',0,9,208,2,32
	.word	7023
	.byte	1,1,28
	.byte	'tcp_active_pcbs',0,9,209,2,24
	.word	3446
	.byte	1,1,28
	.byte	'tcp_tw_pcbs',0,9,212,2,24
	.word	3446
	.byte	1,1
.L724:
	.byte	7
	.word	390
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L431:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,11
	.byte	5,0,3,8,58,15,59,15,57,15,73,19,0,0,12,24,0,58,15,59,15,57,15,0,0,13,59,0,3,8,0,0,14,19,1,3,8,58,15,59
	.byte	15,57,15,11,15,0,0,15,13,0,3,8,73,19,11,15,56,9,0,0,16,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60
	.byte	12,0,0,17,21,1,73,19,54,15,39,12,0,0,18,22,0,3,8,58,15,59,15,57,15,73,19,0,0,19,1,1,11,15,73,19,0,0,20
	.byte	33,0,47,15,0,0,21,4,1,3,8,58,15,59,15,57,15,11,15,0,0,22,40,0,3,8,28,13,0,0,23,21,1,54,15,39,12,0,0,24
	.byte	46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,25,46,0,3,8,58,15,59,15,57,15,54,15,39,12
	.byte	63,12,60,12,0,0,26,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,27,21,0,54,15,0,0,28,52,0,3,8,58,15
	.byte	59,15,57,15,73,19,63,12,60,12,0,0,29,23,1,58,15,59,15,57,15,11,15,0,0,30,23,1,3,8,58,15,59,15,57,15,11
	.byte	15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L432:
	.word	.L1015-.L1014
.L1014:
	.half	3
	.word	.L1017-.L1016
.L1016:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'cc.h',0,1,0,0
	.byte	'pbuf.h',0,2,0,0
	.byte	'def.h',0,2,0,0
	.byte	'ip4_addr.h',0,2,0,0
	.byte	'netif.h',0,2,0,0
	.byte	'ip4.h',0,2,0,0
	.byte	'tcp.h',0,2,0,0
	.byte	'tcpbase.h',0,2,0,0
	.byte	'tcp_priv.h',0,3,0,0
	.byte	'tcp.h',0,4,0,0
	.byte	'inet_chksum.h',0,2,0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0
	.byte	'stddef.h',0,5,0,0
	.byte	'Platform_Types.h',0,6,0,0
	.byte	'Ifx_Types.h',0,6,0,0
	.byte	'stdint.h',0,5,0,0
	.byte	'mem.h',0,2,0,0
	.byte	'err.h',0,2,0,0
	.byte	'ip_addr.h',0,2,0,0
	.byte	'stats.h',0,2,0,0
	.byte	'ip4.h',0,4,0,0
	.byte	'ip.h',0,2,0,0,0
.L1017:
.L1015:
	.sdecl	'.debug_info',debug,cluster('tcp_input')
	.sect	'.debug_info'
.L433:
	.word	394
	.half	3
	.word	.L434
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L436,.L435
	.byte	2
	.word	.L429
	.byte	3
	.byte	'tcp_input',0,1,118,1,1,1,1
	.word	.L366,.L621,.L365
	.byte	4
	.byte	'p',0,1,118,24
	.word	.L622,.L623
	.byte	4
	.byte	'inp',0,1,118,41
	.word	.L624,.L625
	.byte	5
	.word	.L626
	.byte	6
	.byte	'pcb',0,1,120,19
	.word	.L627,.L628
	.byte	6
	.byte	'prev',0,1,120,25
	.word	.L627,.L629
	.byte	6
	.byte	'lpcb',0,1,121,26
	.word	.L630,.L631
	.byte	6
	.byte	'hdrlen_bytes',0,1,126,8
	.word	.L632,.L633
	.byte	6
	.byte	'err',0,1,127,9
	.word	.L634,.L635
	.byte	7
	.word	.L5,.L7
	.byte	6
	.byte	'chksum',0,1,162,1,11
	.word	.L636,.L637
	.byte	0,7
	.word	.L11,.L12
	.byte	6
	.byte	'opt2len',0,1,191,1,11
	.word	.L636,.L638
	.byte	0,8
	.word	.L639,.L70
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_input')
	.sect	'.debug_abbrev'
.L434:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,11,1,17,1,18,1,0,0,8,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_input')
	.sect	'.debug_line'
.L435:
	.word	.L1019-.L1018
.L1018:
	.half	3
	.word	.L1021-.L1020
.L1020:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1021:
	.byte	5,1,7,0,5,2
	.word	.L366
	.byte	3,245,0,1,5,3,9
	.half	.L727-.L366
	.byte	3,13,1,7,9
	.half	.L1022-.L727
	.byte	1,9
	.half	.L2-.L1022
	.byte	3,4,1,5,31,9
	.half	.L1023-.L2
	.byte	3,3,1,5,10,9
	.half	.L733-.L1023
	.byte	1,5,19,9
	.half	.L1024-.L733
	.byte	3,3,1,5,8,9
	.half	.L1025-.L1024
	.byte	3,4,1,5,16,9
	.half	.L1026-.L1025
	.byte	1,5,3,9
	.half	.L1027-.L1026
	.byte	1,5,7,7,9
	.half	.L1028-.L1027
	.byte	3,8,1,9
	.half	.L1029-.L1028
	.byte	3,1,1,5,5,9
	.half	.L4-.L1029
	.byte	3,1,1,9
	.half	.L1030-.L4
	.byte	3,1,1,5,37,9
	.half	.L5-.L1030
	.byte	3,7,1,5,40,9
	.half	.L1031-.L5
	.byte	3,127,1,5,60,3,1,1,5,55,9
	.half	.L1032-.L1031
	.byte	3,127,1,5,60,9
	.half	.L1033-.L1032
	.byte	3,1,1,5,23,9
	.half	.L737-.L1033
	.byte	3,4,1,5,5,9
	.half	.L1034-.L737
	.byte	3,125,1,5,23,7,9
	.half	.L1035-.L1034
	.byte	3,3,1,5,7,9
	.half	.L738-.L1035
	.byte	3,1,1,9
	.half	.L1036-.L738
	.byte	3,1,1,5,18,9
	.half	.L7-.L1036
	.byte	3,6,1,5,23,9
	.half	.L1037-.L7
	.byte	3,1,1,5,7,9
	.half	.L1038-.L1037
	.byte	1,5,53,7,9
	.half	.L742-.L1038
	.byte	1,5,50,9
	.half	.L743-.L742
	.byte	1,5,40,7,9
	.half	.L1039-.L743
	.byte	3,8,1,5,17,1,9
	.half	.L1040-.L1039
	.byte	3,1,1,5,15,9
	.half	.L1041-.L1040
	.byte	1,5,8,9
	.half	.L744-.L1041
	.byte	3,1,1,5,3,9
	.half	.L745-.L744
	.byte	1,5,20,7,9
	.half	.L1042-.L745
	.byte	3,2,1,5,27,9
	.half	.L1043-.L1042
	.byte	3,1,1,5,35,9
	.half	.L741-.L1043
	.byte	3,127,1,5,5,9
	.half	.L11-.L741
	.byte	3,6,1,5,27,9
	.half	.L13-.L11
	.byte	3,3,1,5,23,9
	.half	.L751-.L13
	.byte	3,3,1,5,20,9
	.half	.L1044-.L751
	.byte	1,5,23,9
	.half	.L1045-.L1044
	.byte	3,1,1,5,39,9
	.half	.L1046-.L1045
	.byte	1,5,37,9
	.half	.L1047-.L1046
	.byte	1,5,15,9
	.half	.L1048-.L1047
	.byte	1,5,27,3,4,1,5,20,9
	.half	.L753-.L1048
	.byte	3,3,1,5,26,9
	.half	.L1049-.L753
	.byte	1,5,5,9
	.half	.L1050-.L1049
	.byte	1,5,34,7,9
	.half	.L1051-.L1050
	.byte	3,8,1,5,17,9
	.half	.L756-.L1051
	.byte	1,5,33,9
	.half	.L1052-.L756
	.byte	3,4,1,5,27,9
	.half	.L1053-.L1052
	.byte	3,1,1,5,37,9
	.half	.L1054-.L1053
	.byte	1,5,16,1,5,5,9
	.half	.L1055-.L1054
	.byte	3,2,1,9
	.half	.L15-.L1055
	.byte	3,1,1,5,17,9
	.half	.L12-.L15
	.byte	3,4,1,5,15,9
	.half	.L1056-.L12
	.byte	1,5,18,9
	.half	.L1057-.L1056
	.byte	3,1,1,5,16,9
	.half	.L1058-.L1057
	.byte	1,5,27,9
	.half	.L1059-.L1058
	.byte	3,1,1,5,11,9
	.half	.L1060-.L1059
	.byte	1,5,25,9
	.half	.L1061-.L1060
	.byte	1,5,9,9
	.half	.L1062-.L1061
	.byte	1,5,27,9
	.half	.L1063-.L1062
	.byte	3,1,1,5,11,9
	.half	.L1064-.L1063
	.byte	1,5,25,9
	.half	.L1065-.L1064
	.byte	1,5,9,9
	.half	.L1066-.L1065
	.byte	1,5,17,9
	.half	.L1067-.L1066
	.byte	3,1,1,5,15,9
	.half	.L1068-.L1067
	.byte	1,5,11,9
	.half	.L1069-.L1068
	.byte	3,2,1,5,13,9
	.half	.L1070-.L1069
	.byte	3,1,1,5,9,9
	.half	.L765-.L1070
	.byte	3,127,1,5,13,9
	.half	.L1071-.L765
	.byte	3,2,1,9
	.half	.L1072-.L1071
	.byte	3,127,1,5,10,9
	.half	.L1073-.L1072
	.byte	1,5,3,9
	.half	.L1074-.L1073
	.byte	3,1,1,5,11,7,9
	.half	.L1075-.L1074
	.byte	3,1,1,5,9,9
	.half	.L1076-.L1075
	.byte	3,1,1,5,5,9
	.half	.L1077-.L1076
	.byte	1,5,7,7,9
	.half	.L3-.L1077
	.byte	3,3,1,9
	.half	.L1078-.L3
	.byte	3,1,1,5,8,9
	.half	.L17-.L1078
	.byte	3,6,1,5,14,9
	.half	.L767-.L17
	.byte	3,2,1,5,42,9
	.half	.L768-.L767
	.byte	1,5,5,9
	.half	.L21-.L768
	.byte	3,1,1,9
	.half	.L22-.L21
	.byte	3,1,1,9
	.half	.L23-.L22
	.byte	3,1,1,5,13,9
	.half	.L24-.L23
	.byte	3,3,1,5,9,9
	.half	.L1079-.L24
	.byte	1,5,28,7,9
	.half	.L1080-.L1079
	.byte	3,1,1,5,25,9
	.half	.L774-.L1080
	.byte	1,5,29,7,9
	.half	.L25-.L774
	.byte	3,5,1,5,9,9
	.half	.L775-.L25
	.byte	1,5,12,7,9
	.half	.L1081-.L775
	.byte	3,1,1,5,34,9
	.half	.L1082-.L1081
	.byte	1,5,25,9
	.half	.L1083-.L1082
	.byte	1,5,9,7,9
	.half	.L1084-.L1083
	.byte	3,1,1,9
	.half	.L1085-.L1084
	.byte	3,1,1,5,7,9
	.half	.L1086-.L1085
	.byte	3,4,1,9
	.half	.L31-.L1086
	.byte	3,1,1,5,25,9
	.half	.L1087-.L31
	.byte	3,1,1,5,20,9
	.half	.L1088-.L1087
	.byte	1,5,21,9
	.half	.L1089-.L1088
	.byte	3,1,1,5,19,9
	.half	.L780-.L1089
	.byte	1,5,25,9
	.half	.L1090-.L780
	.byte	3,1,1,5,31,9
	.half	.L1091-.L1090
	.byte	3,126,1,5,9,9
	.half	.L32-.L1091
	.byte	3,4,1,5,7,9
	.half	.L33-.L32
	.byte	3,2,1,9
	.half	.L1092-.L33
	.byte	3,1,1,5,10,9
	.half	.L26-.L1092
	.byte	3,2,1,5,53,9
	.half	.L1093-.L26
	.byte	3,98,1,5,42,9
	.half	.L20-.L1093
	.byte	1,5,3,7,9
	.half	.L34-.L20
	.byte	3,33,1,5,16,7,9
	.half	.L1094-.L34
	.byte	3,3,1,5,40,9
	.half	.L784-.L1094
	.byte	1,5,7,9
	.half	.L38-.L784
	.byte	3,1,1,5,15,9
	.half	.L39-.L38
	.byte	3,3,1,5,11,9
	.half	.L1095-.L39
	.byte	1,5,30,7,9
	.half	.L1096-.L1095
	.byte	3,1,1,5,27,9
	.half	.L1097-.L1096
	.byte	1,5,31,7,9
	.half	.L40-.L1097
	.byte	3,4,1,5,11,9
	.half	.L1098-.L40
	.byte	1,5,14,7,9
	.half	.L1099-.L1098
	.byte	3,1,1,5,36,9
	.half	.L1100-.L1099
	.byte	1,5,27,9
	.half	.L1101-.L1100
	.byte	1,5,11,7,9
	.half	.L1102-.L1101
	.byte	3,1,1,9
	.half	.L1103-.L1102
	.byte	3,1,1,5,30,9
	.half	.L1104-.L1103
	.byte	3,10,1,5,9,9
	.half	.L788-.L1104
	.byte	3,3,1,5,51,9
	.half	.L41-.L788
	.byte	3,103,1,5,40,9
	.half	.L37-.L41
	.byte	1,5,10,7,9
	.half	.L1105-.L37
	.byte	3,31,1,5,17,9
	.half	.L786-.L1105
	.byte	3,1,1,5,32,9
	.half	.L1106-.L786
	.byte	1,5,31,9
	.half	.L790-.L1106
	.byte	3,8,1,5,58,9
	.half	.L1107-.L790
	.byte	3,120,1,5,16,9
	.half	.L48-.L1107
	.byte	3,2,1,5,11,9
	.half	.L1108-.L48
	.byte	1,5,31,7,9
	.half	.L1109-.L1108
	.byte	3,1,1,5,28,9
	.half	.L1110-.L1109
	.byte	1,5,15,7,9
	.half	.L49-.L1110
	.byte	3,5,1,5,37,9
	.half	.L1111-.L49
	.byte	1,5,7,9
	.half	.L1112-.L1111
	.byte	1,5,15,7,9
	.half	.L1113-.L1112
	.byte	3,10,1,5,11,9
	.half	.L1114-.L1113
	.byte	1,5,22,7,9
	.half	.L1115-.L1114
	.byte	3,3,1,5,12,7,9
	.half	.L50-.L1115
	.byte	3,11,1,5,71,9
	.half	.L1116-.L50
	.byte	3,96,1,5,58,9
	.half	.L47-.L1116
	.byte	1,5,5,7,9
	.half	.L52-.L47
	.byte	3,42,1,5,7,7,9
	.half	.L1117-.L52
	.byte	3,4,1,5,53,7,9
	.half	.L1118-.L1117
	.byte	3,1,1,5,47,9
	.half	.L1119-.L1118
	.byte	1,5,37,9
	.half	.L1120-.L1119
	.byte	3,2,1,5,20,9
	.half	.L1121-.L1120
	.byte	1,5,37,9
	.half	.L1122-.L1121
	.byte	3,2,1,5,59,9
	.half	.L1123-.L1122
	.byte	3,124,1,5,9,9
	.half	.L55-.L1123
	.byte	3,6,1,5,26,9
	.half	.L56-.L55
	.byte	3,9,1,5,7,9
	.half	.L789-.L56
	.byte	3,3,1,5,31,9
	.half	.L36-.L789
	.byte	3,168,127,1,5,25,9
	.half	.L1124-.L36
	.byte	3,222,0,1,5,3,9
	.half	.L1125-.L1124
	.byte	3,12,1,5,30,7,9
	.half	.L1126-.L1125
	.byte	3,3,1,5,5,9
	.half	.L1127-.L1126
	.byte	3,4,1,5,18,9
	.half	.L1128-.L1127
	.byte	1,5,16,9
	.half	.L1129-.L1128
	.byte	1,5,10,9
	.half	.L1130-.L1129
	.byte	3,2,1,5,18,9
	.half	.L1131-.L1130
	.byte	3,127,1,5,15,9
	.half	.L1132-.L1131
	.byte	1,5,13,9
	.half	.L1133-.L1132
	.byte	3,1,1,5,18,9
	.half	.L1134-.L1133
	.byte	3,4,1,5,20,9
	.half	.L1135-.L1134
	.byte	3,125,1,5,18,9
	.half	.L792-.L1135
	.byte	1,5,16,9
	.half	.L1136-.L792
	.byte	3,3,1,9
	.half	.L1137-.L1136
	.byte	3,1,1,5,9,9
	.half	.L1138-.L1137
	.byte	3,2,1,5,15,9
	.half	.L1139-.L1138
	.byte	3,124,1,5,5,9
	.half	.L1140-.L1139
	.byte	3,4,1,5,8,7,9
	.half	.L1141-.L1140
	.byte	3,1,1,5,16,9
	.half	.L1142-.L1141
	.byte	1,5,12,9
	.half	.L59-.L1142
	.byte	3,4,1,5,5,9
	.half	.L1143-.L59
	.byte	1,5,37,7,9
	.half	.L1144-.L1143
	.byte	3,1,1,5,45,9
	.half	.L795-.L1144
	.byte	1,5,11,9
	.half	.L1145-.L795
	.byte	1,5,16,7,9
	.half	.L1146-.L1145
	.byte	3,1,1,5,12,9
	.half	.L1147-.L1146
	.byte	1,5,44,7,9
	.half	.L1148-.L1147
	.byte	1,5,51,9
	.half	.L1149-.L1148
	.byte	1,5,16,7,9
	.half	.L61-.L1149
	.byte	3,3,1,5,9,9
	.half	.L1150-.L61
	.byte	1,5,30,7,9
	.half	.L1151-.L1150
	.byte	3,3,1,5,9,9
	.half	.L64-.L1151
	.byte	3,2,1,9
	.half	.L1152-.L64
	.byte	3,2,1,5,19,9
	.half	.L60-.L1152
	.byte	3,3,1,5,23,9
	.half	.L1153-.L60
	.byte	3,1,1,5,16,9
	.half	.L800-.L1153
	.byte	3,3,1,5,5,9
	.half	.L1154-.L800
	.byte	1,5,11,7,9
	.half	.L1155-.L1154
	.byte	3,1,1,5,7,9
	.half	.L1156-.L1155
	.byte	1,5,9,7,9
	.half	.L1157-.L1156
	.byte	3,5,1,5,14,9
	.half	.L68-.L1157
	.byte	3,187,126,1,5,42,9
	.half	.L1158-.L68
	.byte	3,198,1,1,5,18,9
	.half	.L802-.L1158
	.byte	3,1,1,5,46,9
	.half	.L804-.L802
	.byte	3,127,1,5,13,9
	.half	.L67-.L804
	.byte	3,7,1,5,9,9
	.half	.L1159-.L67
	.byte	1,5,13,7,9
	.half	.L639-.L1159
	.byte	3,13,1,5,23,9
	.half	.L1160-.L639
	.byte	3,126,1,5,13,9
	.half	.L806-.L1160
	.byte	3,2,1,5,24,9
	.half	.L72-.L806
	.byte	3,1,1,5,13,9
	.half	.L1161-.L72
	.byte	1,5,24,7,9
	.half	.L1162-.L1161
	.byte	3,4,1,5,22,1,5,37,9
	.half	.L70-.L1162
	.byte	3,2,1,5,9,9
	.half	.L808-.L70
	.byte	1,5,13,7,9
	.half	.L1163-.L808
	.byte	3,8,1,5,9,9
	.half	.L1164-.L1163
	.byte	1,5,11,7,9
	.half	.L1165-.L1164
	.byte	3,3,1,5,18,9
	.half	.L76-.L1165
	.byte	3,1,1,5,23,9
	.half	.L1166-.L76
	.byte	3,3,1,5,11,9
	.half	.L1167-.L1166
	.byte	3,125,1,5,23,7,9
	.half	.L1168-.L1167
	.byte	3,3,1,9
	.half	.L1169-.L1168
	.byte	3,6,1,5,13,9
	.half	.L810-.L1169
	.byte	3,1,1,5,11,9
	.half	.L77-.L810
	.byte	3,4,1,5,22,9
	.half	.L80-.L77
	.byte	3,1,1,5,11,9
	.half	.L1170-.L80
	.byte	1,7,9
	.half	.L1171-.L1170
	.byte	3,10,1,5,33,7,9
	.half	.L1172-.L1171
	.byte	3,6,1,5,31,9
	.half	.L1173-.L1172
	.byte	1,5,13,9
	.half	.L75-.L1173
	.byte	3,13,1,5,9,9
	.half	.L1174-.L75
	.byte	1,5,18,7,9
	.half	.L1175-.L1174
	.byte	3,1,1,5,11,9
	.half	.L1176-.L1175
	.byte	1,5,30,7,9
	.half	.L1177-.L1176
	.byte	3,2,1,5,38,9
	.half	.L1178-.L1177
	.byte	1,5,58,9
	.half	.L1179-.L1178
	.byte	1,5,20,9
	.half	.L84-.L1179
	.byte	3,4,1,5,33,9
	.half	.L1180-.L84
	.byte	1,5,13,9
	.half	.L1181-.L1180
	.byte	1,5,27,7,9
	.half	.L1182-.L1181
	.byte	3,1,1,5,13,9
	.half	.L86-.L1182
	.byte	3,2,1,5,24,9
	.half	.L88-.L86
	.byte	3,1,1,5,13,9
	.half	.L1183-.L88
	.byte	1,5,25,7,9
	.half	.L83-.L1183
	.byte	3,6,1,5,23,9
	.half	.L1184-.L83
	.byte	1,5,37,9
	.half	.L1185-.L1184
	.byte	3,1,1,5,9,9
	.half	.L817-.L1185
	.byte	1,5,20,7,9
	.half	.L1186-.L817
	.byte	3,4,1,5,34,9
	.half	.L819-.L1186
	.byte	3,3,1,5,21,9
	.half	.L65-.L819
	.byte	3,8,1,5,19,9
	.half	.L1187-.L65
	.byte	1,5,15,9
	.half	.L1188-.L1187
	.byte	3,1,1,5,14,9
	.half	.L1189-.L1188
	.byte	3,3,1,5,5,9
	.half	.L1190-.L1189
	.byte	1,5,22,7,9
	.half	.L1191-.L1190
	.byte	3,1,1,5,17,9
	.half	.L1192-.L1191
	.byte	3,1,1,5,15,9
	.half	.L1193-.L1192
	.byte	1,5,5,9
	.half	.L1194-.L1193
	.byte	3,126,1,5,11,9
	.half	.L58-.L1194
	.byte	3,8,1,5,10,9
	.half	.L1195-.L58
	.byte	1,5,7,7,9
	.half	.L1196-.L1195
	.byte	3,1,1,9
	.half	.L821-.L1196
	.byte	3,1,1,5,52,9
	.half	.L822-.L821
	.byte	3,2,1,5,28,9
	.half	.L1197-.L822
	.byte	3,127,1,5,36,9
	.half	.L1198-.L1197
	.byte	1,5,58,9
	.half	.L1199-.L1198
	.byte	3,1,1,5,34,9
	.half	.L1200-.L1199
	.byte	3,127,1,5,58,3,1,1,5,15,9
	.half	.L1201-.L1200
	.byte	3,127,1,5,21,9
	.half	.L1202-.L1201
	.byte	1,5,44,9
	.half	.L1203-.L1202
	.byte	3,1,1,5,58,9
	.half	.L1204-.L1203
	.byte	1,5,15,9
	.half	.L93-.L1204
	.byte	3,2,1,5,3,9
	.half	.L91-.L93
	.byte	3,3,1,5,1,9
	.half	.L94-.L91
	.byte	3,7,1,5,3,7,9
	.half	.L6-.L94
	.byte	3,125,1,5,13,9
	.half	.L46-.L6
	.byte	3,2,1,5,1,9
	.half	.L437-.L46
	.byte	3,1,0,1,1
.L1019:
	.sdecl	'.debug_ranges',debug,cluster('tcp_input')
	.sect	'.debug_ranges'
.L436:
	.word	-1,.L366,0,.L437-.L366,0,0
.L626:
	.word	-1,.L366,0,.L621-.L366,-1,.L368,0,.L562-.L368,-1,.L370,0,.L557-.L370,-1,.L372,0,.L552-.L372,-1,.L374,0
	.word	.L527-.L374,-1,.L376,0,.L497-.L376,-1,.L378,0,.L492-.L378,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_trigger_input_pcb_close')
	.sect	'.debug_info'
.L438:
	.word	225
	.half	3
	.word	.L439
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L441,.L440
	.byte	2
	.word	.L429
	.byte	3
	.byte	'tcp_trigger_input_pcb_close',0,1,239,15,1,1,1,1
	.word	.L428,.L640,.L427
	.byte	4
	.word	.L428,.L640
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_trigger_input_pcb_close')
	.sect	'.debug_abbrev'
.L439:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_trigger_input_pcb_close')
	.sect	'.debug_line'
.L440:
	.word	.L1206-.L1205
.L1205:
	.half	3
	.word	.L1208-.L1207
.L1207:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1208:
	.byte	5,14,7,0,5,2
	.word	.L428
	.byte	3,240,15,1,5,1,9
	.half	.L1209-.L428
	.byte	3,1,1,7,9
	.half	.L442-.L1209
	.byte	0,1,1
.L1206:
	.sdecl	'.debug_ranges',debug,cluster('tcp_trigger_input_pcb_close')
	.sect	'.debug_ranges'
.L441:
	.word	-1,.L428,0,.L442-.L428,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_process')
	.sect	'.debug_info'
.L443:
	.word	390
	.half	3
	.word	.L444
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L446,.L445
	.byte	2
	.word	.L429
	.byte	3
	.byte	'tcp_process',0,1,148,6,1
	.word	.L634
	.byte	1,1
	.word	.L394,.L641,.L393
	.byte	4
	.byte	'pcb',0,1,148,6,29
	.word	.L627,.L642
	.byte	5
	.word	.L643
	.byte	6
	.byte	'rseg',0,1,150,6,19
	.word	.L644,.L645
	.byte	6
	.byte	'acceptable',0,1,151,6,8
	.word	.L632,.L646
	.byte	6
	.byte	'err',0,1,152,6,9
	.word	.L634,.L647
	.byte	7
	.word	.L648,.L649
	.byte	6
	.byte	'tcp_tmp_pcb',0,1,229,7,11
	.word	.L627,.L650
	.byte	0,7
	.word	.L651,.L652
	.byte	6
	.byte	'tcp_tmp_pcb',0,1,247,7,9
	.word	.L627,.L653
	.byte	0,7
	.word	.L200,.L184
	.byte	6
	.byte	'tcp_tmp_pcb',0,1,129,8,9
	.word	.L627,.L654
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_process')
	.sect	'.debug_abbrev'
.L444:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,11,1,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_process')
	.sect	'.debug_line'
.L445:
	.word	.L1211-.L1210
.L1210:
	.half	3
	.word	.L1213-.L1212
.L1212:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1213:
	.byte	5,19,7,0,5,2
	.word	.L394
	.byte	3,150,6,1,5,7,3,8,1,5,1,9
	.half	.L854-.L394
	.byte	3,117,1,5,3,9
	.half	.L852-.L854
	.byte	3,11,1,5,12,7,9
	.half	.L1214-.L852
	.byte	3,2,1,5,5,9
	.half	.L1215-.L1214
	.byte	1,5,11,7,9
	.half	.L1216-.L1215
	.byte	3,3,1,5,23,9
	.half	.L1217-.L1216
	.byte	1,5,7,9
	.half	.L1218-.L1217
	.byte	1,7,9
	.half	.L1219-.L1218
	.byte	1,5,23,9
	.half	.L118-.L1219
	.byte	3,6,1,5,11,9
	.half	.L1220-.L118
	.byte	1,5,7,9
	.half	.L1221-.L1220
	.byte	1,5,20,7,9
	.half	.L120-.L1221
	.byte	3,1,1,5,23,1,5,19,9
	.half	.L121-.L120
	.byte	3,1,1,5,9,9
	.half	.L1222-.L121
	.byte	3,6,1,5,5,9
	.half	.L119-.L1222
	.byte	3,4,1,5,7,7,9
	.half	.L1223-.L119
	.byte	3,2,1,5,18,9
	.half	.L126-.L1223
	.byte	3,1,1,5,7,9
	.half	.L1224-.L126
	.byte	3,1,1,5,14,9
	.half	.L1225-.L1224
	.byte	3,1,1,5,7,9
	.half	.L1226-.L1225
	.byte	3,127,1,5,1,9
	.half	.L1227-.L1226
	.byte	3,216,1,1,5,7,7,9
	.half	.L117-.L1227
	.byte	3,179,126,1,5,32,7,9
	.half	.L1228-.L117
	.byte	1,5,29,9
	.half	.L1229-.L1228
	.byte	1,5,66,7,9
	.half	.L1230-.L1229
	.byte	1,5,11,7,9
	.half	.L128-.L1230
	.byte	3,6,1,5,3,9
	.half	.L1231-.L128
	.byte	1,5,16,7,9
	.half	.L1232-.L1231
	.byte	3,2,1,5,14,9
	.half	.L1233-.L1232
	.byte	1,5,24,9
	.half	.L131-.L1233
	.byte	3,2,1,5,22,1,9
	.half	.L1234-.L131
	.byte	3,1,1,5,16,9
	.half	.L1235-.L1234
	.byte	3,2,1,5,14,9
	.half	.L859-.L1235
	.byte	3,3,1,5,10,9
	.half	.L1236-.L859
	.byte	3,1,1,7,9
	.half	.L1237-.L1236
	.byte	3,196,0,1,7,9
	.half	.L1238-.L1237
	.byte	3,59,1,7,9
	.half	.L1239-.L1238
	.byte	3,7,1,7,9
	.half	.L1240-.L1239
	.byte	3,21,1,7,9
	.half	.L1241-.L1240
	.byte	3,98,1,7,9
	.half	.L1242-.L1241
	.byte	3,41,1,9
	.half	.L1243-.L1242
	.byte	3,10,1,5,12,9
	.half	.L132-.L1243
	.byte	3,212,126,1,5,11,9
	.half	.L1244-.L132
	.byte	1,5,39,7,9
	.half	.L1245-.L1244
	.byte	1,5,27,7,9
	.half	.L1246-.L1245
	.byte	3,1,1,5,15,9
	.half	.L1247-.L1246
	.byte	1,5,37,9
	.half	.L1248-.L1247
	.byte	1,5,21,9
	.half	.L1249-.L1248
	.byte	1,5,24,7,9
	.half	.L1250-.L1249
	.byte	3,1,1,5,30,9
	.half	.L1251-.L1250
	.byte	1,5,22,1,5,33,9
	.half	.L1252-.L1251
	.byte	3,1,1,5,22,9
	.half	.L1253-.L1252
	.byte	3,1,1,5,24,9
	.half	.L1254-.L1253
	.byte	3,1,1,5,30,9
	.half	.L1255-.L1254
	.byte	3,2,1,5,22,1,9
	.half	.L1256-.L1255
	.byte	3,1,1,5,20,1,9
	.half	.L1257-.L1256
	.byte	3,3,1,5,21,9
	.half	.L1258-.L1257
	.byte	3,3,1,5,18,3,125,1,5,21,9
	.half	.L1259-.L1258
	.byte	3,3,1,5,19,9
	.half	.L1260-.L1259
	.byte	1,5,9,9
	.half	.L1261-.L1260
	.byte	3,4,1,5,14,9
	.half	.L144-.L1261
	.byte	3,1,1,5,9,9
	.half	.L1262-.L144
	.byte	1,5,19,9
	.half	.L1263-.L1262
	.byte	3,2,1,5,9,9
	.half	.L863-.L1263
	.byte	3,1,1,5,21,7,9
	.half	.L1264-.L863
	.byte	3,3,1,5,11,9
	.half	.L1265-.L1264
	.byte	3,1,1,7,9
	.half	.L1266-.L1265
	.byte	1,5,29,9
	.half	.L146-.L1266
	.byte	3,1,1,5,23,9
	.half	.L1267-.L146
	.byte	1,5,35,9
	.half	.L1268-.L1267
	.byte	1,5,30,9
	.half	.L145-.L1268
	.byte	3,2,1,5,24,9
	.half	.L1269-.L145
	.byte	1,5,22,9
	.half	.L147-.L1269
	.byte	3,2,1,5,16,9
	.half	.L867-.L147
	.byte	3,4,1,5,9,9
	.half	.L1270-.L867
	.byte	1,5,24,7,9
	.half	.L1271-.L1270
	.byte	3,1,1,5,22,1,5,26,9
	.half	.L1272-.L1271
	.byte	1,5,24,9
	.half	.L148-.L1272
	.byte	3,2,1,5,22,1,5,21,9
	.half	.L1273-.L148
	.byte	3,1,1,5,9,9
	.half	.L149-.L1273
	.byte	3,5,1,5,20,9
	.half	.L151-.L149
	.byte	3,1,1,5,9,9
	.half	.L1274-.L151
	.byte	1,7,9
	.half	.L130-.L1274
	.byte	3,3,1,5,12,9
	.half	.L141-.L130
	.byte	3,3,1,5,54,7,9
	.half	.L1275-.L141
	.byte	3,3,1,5,29,9
	.half	.L1276-.L1275
	.byte	3,127,1,5,22,9
	.half	.L1277-.L1276
	.byte	1,5,37,9
	.half	.L1278-.L1277
	.byte	1,5,60,9
	.half	.L1279-.L1278
	.byte	3,1,1,5,16,9
	.half	.L872-.L1279
	.byte	3,4,1,5,9,9
	.half	.L1280-.L872
	.byte	1,5,24,7,9
	.half	.L1281-.L1280
	.byte	3,1,1,5,22,1,5,26,9
	.half	.L1282-.L1281
	.byte	3,1,1,5,7,9
	.half	.L874-.L1282
	.byte	3,3,1,5,11,9
	.half	.L133-.L874
	.byte	3,2,1,5,7,9
	.half	.L1283-.L133
	.byte	1,5,13,7,9
	.half	.L1284-.L1283
	.byte	3,2,1,5,24,9
	.half	.L1285-.L1284
	.byte	3,1,1,5,22,1,5,18,9
	.half	.L1286-.L1285
	.byte	3,3,1,5,11,9
	.half	.L1287-.L1286
	.byte	1,5,17,7,9
	.half	.L1288-.L1287
	.byte	3,2,1,5,26,1,5,13,9
	.half	.L160-.L1288
	.byte	3,5,1,9
	.half	.L162-.L160
	.byte	3,4,1,5,11,9
	.half	.L161-.L162
	.byte	3,2,1,5,24,7,9
	.half	.L1289-.L161
	.byte	3,4,1,5,13,9
	.half	.L1290-.L1289
	.byte	1,5,25,7,9
	.half	.L1291-.L1290
	.byte	3,1,1,5,20,9
	.half	.L152-.L1291
	.byte	3,2,1,5,1,3,221,0,1,5,23,7,9
	.half	.L165-.L152
	.byte	3,167,127,1,5,15,9
	.half	.L880-.L165
	.byte	3,3,1,5,23,9
	.half	.L1292-.L880
	.byte	3,4,1,9
	.half	.L1293-.L1292
	.byte	3,125,1,9
	.half	.L1294-.L1293
	.byte	3,3,1,5,21,9
	.half	.L1295-.L1294
	.byte	1,5,11,9
	.half	.L1296-.L1295
	.byte	3,5,1,5,56,9
	.half	.L158-.L1296
	.byte	3,7,1,5,31,9
	.half	.L876-.L158
	.byte	3,127,1,5,62,9
	.half	.L906-.L876
	.byte	3,1,1,5,11,9
	.half	.L883-.L906
	.byte	3,125,1,5,18,9
	.half	.L157-.L883
	.byte	3,5,1,5,52,7,9
	.half	.L1297-.L157
	.byte	1,5,40,9
	.half	.L1298-.L1297
	.byte	1,5,62,9
	.half	.L1299-.L1298
	.byte	1,5,46,9
	.half	.L1300-.L1299
	.byte	1,5,20,7,9
	.half	.L1301-.L1300
	.byte	3,2,1,5,7,9
	.half	.L885-.L1301
	.byte	3,2,1,5,19,9
	.half	.L137-.L885
	.byte	3,4,1,5,11,9
	.half	.L168-.L137
	.byte	3,1,1,5,7,9
	.half	.L1302-.L168
	.byte	1,5,9,7,9
	.half	.L1303-.L1302
	.byte	3,1,1,5,22,9
	.half	.L1304-.L1303
	.byte	3,1,1,5,7,3,2,1,5,19,9
	.half	.L135-.L1304
	.byte	3,2,1,5,14,9
	.half	.L888-.L135
	.byte	3,2,1,5,20,9
	.half	.L1305-.L888
	.byte	1,5,11,3,127,1,5,7,9
	.half	.L1306-.L1305
	.byte	1,5,11,7,9
	.half	.L1307-.L1306
	.byte	3,5,1,5,13,9
	.half	.L1308-.L1307
	.byte	3,124,1,5,35,7,9
	.half	.L1309-.L1308
	.byte	1,5,47,9
	.half	.L1310-.L1309
	.byte	1,5,41,9
	.half	.L1311-.L1310
	.byte	1,5,16,7,9
	.half	.L1312-.L1311
	.byte	3,1,1,5,25,9
	.half	.L1313-.L1312
	.byte	1,5,11,7,9
	.half	.L1314-.L1313
	.byte	3,3,1,5,25,9
	.half	.L1315-.L1314
	.byte	3,1,1,5,11,9
	.half	.L890-.L1315
	.byte	3,1,1,9
	.half	.L649-.L890
	.byte	3,2,1,9
	.half	.L176-.L649
	.byte	3,2,1,5,24,9
	.half	.L1316-.L176
	.byte	3,1,1,5,11,3,126,1,5,18,9
	.half	.L175-.L1316
	.byte	3,4,1,5,40,7,9
	.half	.L1317-.L175
	.byte	1,5,46,9
	.half	.L1318-.L1317
	.byte	1,5,21,7,9
	.half	.L1319-.L1318
	.byte	3,1,1,5,30,9
	.half	.L1320-.L1319
	.byte	1,5,22,7,9
	.half	.L1321-.L1320
	.byte	3,1,1,5,20,9
	.half	.L174-.L1321
	.byte	1,5,7,9
	.half	.L1322-.L174
	.byte	3,2,1,5,19,9
	.half	.L136-.L1322
	.byte	3,2,1,5,11,9
	.half	.L893-.L136
	.byte	3,1,1,5,7,9
	.half	.L1323-.L893
	.byte	1,5,9,7,9
	.half	.L1324-.L1323
	.byte	3,2,1,5,23,9
	.half	.L1325-.L1324
	.byte	3,1,1,5,9,9
	.half	.L895-.L1325
	.byte	3,1,1,5,7,9
	.half	.L652-.L895
	.byte	3,4,1,5,19,9
	.half	.L138-.L652
	.byte	3,2,1,5,12,9
	.half	.L900-.L138
	.byte	3,1,1,5,11,9
	.half	.L1326-.L900
	.byte	1,5,32,7,9
	.half	.L1327-.L1326
	.byte	1,5,38,9
	.half	.L1328-.L1327
	.byte	1,5,60,7,9
	.half	.L1329-.L1328
	.byte	1,5,69,9
	.half	.L1330-.L1329
	.byte	1,5,23,7,9
	.half	.L1331-.L1330
	.byte	3,2,1,5,9,9
	.half	.L902-.L1331
	.byte	3,1,1,5,22,9
	.half	.L1332-.L902
	.byte	3,1,1,5,20,1,5,9,9
	.half	.L1333-.L1332
	.byte	3,1,1,5,7,9
	.half	.L1334-.L1333
	.byte	3,2,1,5,19,9
	.half	.L139-.L1334
	.byte	3,2,1,5,12,9
	.half	.L905-.L139
	.byte	3,1,1,5,11,9
	.half	.L1335-.L905
	.byte	1,5,32,7,9
	.half	.L1336-.L1335
	.byte	1,5,38,9
	.half	.L1337-.L1336
	.byte	1,5,60,7,9
	.half	.L1338-.L1337
	.byte	1,5,69,9
	.half	.L1339-.L1338
	.byte	1,5,20,7,9
	.half	.L1340-.L1339
	.byte	3,3,1,5,10,9
	.half	.L125-.L1340
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L447-.L125
	.byte	0,1,1
.L1211:
	.sdecl	'.debug_ranges',debug,cluster('tcp_process')
	.sect	'.debug_ranges'
.L446:
	.word	-1,.L394,0,.L447-.L394,0,0
.L643:
	.word	-1,.L394,0,.L641-.L394,-1,.L396,0,.L567-.L396,-1,.L398,0,.L537-.L398,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_receive')
	.sect	'.debug_info'
.L448:
	.word	623
	.half	3
	.word	.L449
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L451,.L450
	.byte	2
	.word	.L429
	.byte	3
	.byte	'tcp_receive',0,1,245,8,1,1,1
	.word	.L404,.L655,.L403
	.byte	4
	.byte	'pcb',0,1,245,8,29
	.word	.L627,.L656
	.byte	5
	.word	.L657
	.byte	6
	.byte	'm',0,1,247,8,9
	.word	.L658,.L659
	.byte	6
	.byte	'right_wnd_edge',0,1,248,8,9
	.word	.L660,.L661
	.byte	6
	.byte	'found_dupack',0,1,249,8,7
	.word	.L662,.L663
	.byte	7
	.word	.L664,.L665
	.byte	6
	.byte	'acked',0,1,208,9,21
	.word	.L636,.L666
	.byte	7
	.word	.L667,.L253
	.byte	6
	.byte	'increase',0,1,236,9,25
	.word	.L636,.L668
	.byte	6
	.byte	'num_seg',0,1,238,9,16
	.word	.L632,.L669
	.byte	0,0,5
	.word	.L670
	.byte	6
	.byte	'p',0,1,147,11,20
	.word	.L622,.L674
	.byte	6
	.byte	'new_tot_len',0,1,149,11,13
	.word	.L636,.L675
	.byte	6
	.byte	'off',0,1,149,11,26
	.word	.L636,.L676
	.byte	0,8
	.word	.L292,.L291
	.byte	5
	.word	.L677
	.byte	6
	.byte	'next',0,1,225,11,29
	.word	.L644,.L678
	.byte	5
	.word	.L679
	.byte	6
	.byte	'tmp',0,1,231,11,31
	.word	.L644,.L680
	.byte	0,0,9
	.word	.L681
	.byte	5
	.word	.L682
	.byte	6
	.byte	'next',0,1,142,13,27
	.word	.L644,.L683
	.byte	6
	.byte	'prev',0,1,142,13,34
	.word	.L644,.L684
	.byte	7
	.word	.L685,.L321
	.byte	6
	.byte	'cseg',0,1,153,13,33
	.word	.L644,.L686
	.byte	0,7
	.word	.L687,.L327
	.byte	6
	.byte	'cseg',0,1,176,13,35
	.word	.L644,.L688
	.byte	0,7
	.word	.L689,.L328
	.byte	6
	.byte	'cseg',0,1,192,13,35
	.word	.L644,.L690
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_receive')
	.sect	'.debug_abbrev'
.L449:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58,15,59
	.byte	15,57,15,73,16,2,6,0,0,7,11,1,17,1,18,1,0,0,8,11,0,17,1,18,1,0,0,9,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_receive')
	.sect	'.debug_line'
.L450:
	.word	.L1342-.L1341
.L1341:
	.half	3
	.word	.L1344-.L1343
.L1343:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1344:
	.byte	5,1,7,0,5,2
	.word	.L404
	.byte	3,244,8,1,5,3,9
	.half	.L931-.L404
	.byte	3,7,1,5,20,9
	.half	.L1345-.L931
	.byte	3,125,1,5,1,3,124,1,5,3,9
	.half	.L929-.L1345
	.byte	3,7,1,7,9
	.half	.L1346-.L929
	.byte	1,5,7,9
	.half	.L227-.L1346
	.byte	3,2,1,5,3,9
	.half	.L1347-.L227
	.byte	1,5,9,7,9
	.half	.L1348-.L1347
	.byte	3,5,1,5,40,9
	.half	.L1349-.L1348
	.byte	3,125,1,5,9,9
	.half	.L1350-.L1349
	.byte	3,3,1,5,25,3,125,1,5,35,9
	.half	.L1351-.L1350
	.byte	1,5,9,9
	.half	.L935-.L1351
	.byte	3,3,1,5,10,7,9
	.half	.L1352-.L935
	.byte	3,1,1,5,35,7,9
	.half	.L1353-.L1352
	.byte	1,5,10,9
	.half	.L1354-.L1353
	.byte	3,1,1,5,42,7,9
	.half	.L1355-.L1354
	.byte	1,5,74,9
	.half	.L1356-.L1355
	.byte	1,5,22,7,9
	.half	.L229-.L1356
	.byte	3,1,1,5,35,9
	.half	.L1357-.L229
	.byte	3,126,1,5,22,9
	.half	.L1358-.L1357
	.byte	3,2,1,5,20,9
	.half	.L1359-.L1358
	.byte	1,5,14,9
	.half	.L1360-.L1359
	.byte	3,3,1,5,7,9
	.half	.L1361-.L1360
	.byte	1,5,26,7,9
	.half	.L1362-.L1361
	.byte	3,1,1,5,20,9
	.half	.L234-.L1362
	.byte	3,3,1,9
	.half	.L1363-.L234
	.byte	3,1,1,5,7,9
	.half	.L1364-.L1363
	.byte	3,1,1,5,114,9
	.half	.L1365-.L1364
	.byte	1,5,42,9
	.half	.L232-.L1365
	.byte	3,3,1,5,7,9
	.half	.L1366-.L232
	.byte	1,5,9,7,9
	.half	.L1367-.L1366
	.byte	3,1,1,9
	.half	.L236-.L1367
	.byte	3,29,1,5,5,9
	.half	.L1368-.L236
	.byte	1,5,9,9
	.half	.L1369-.L1368
	.byte	1,5,5,9
	.half	.L1370-.L1369
	.byte	1,5,11,7,9
	.half	.L1371-.L1370
	.byte	3,2,1,5,7,9
	.half	.L1372-.L1371
	.byte	1,5,16,7,9
	.half	.L1373-.L1372
	.byte	3,2,1,5,31,9
	.half	.L1374-.L1373
	.byte	1,5,26,9
	.half	.L1375-.L1374
	.byte	1,5,9,9
	.half	.L1376-.L1375
	.byte	1,5,18,7,9
	.half	.L1377-.L1376
	.byte	3,2,1,5,11,9
	.half	.L1378-.L1377
	.byte	1,5,13,7,9
	.half	.L1379-.L1378
	.byte	3,2,1,5,29,7,9
	.half	.L1380-.L1379
	.byte	3,2,1,5,28,9
	.half	.L1381-.L1380
	.byte	3,127,1,5,39,9
	.half	.L1382-.L1381
	.byte	3,1,1,5,19,9
	.half	.L1383-.L1382
	.byte	1,5,15,9
	.half	.L1384-.L1383
	.byte	1,5,17,7,9
	.half	.L1385-.L1384
	.byte	3,1,1,5,22,9
	.half	.L242-.L1385
	.byte	3,2,1,5,15,9
	.half	.L1386-.L242
	.byte	1,5,17,7,9
	.half	.L1387-.L1386
	.byte	3,2,1,5,22,9
	.half	.L243-.L1387
	.byte	3,2,1,5,15,9
	.half	.L1388-.L243
	.byte	1,5,33,7,9
	.half	.L1389-.L1388
	.byte	3,2,1,5,12,9
	.half	.L238-.L1389
	.byte	3,8,1,5,24,7,9
	.half	.L1390-.L238
	.byte	3,1,1,5,22,1,5,7,9
	.half	.L1391-.L1390
	.byte	3,127,1,5,16,9
	.half	.L237-.L1391
	.byte	3,3,1,5,14,9
	.half	.L664-.L237
	.byte	3,7,1,5,7,9
	.half	.L1392-.L664
	.byte	1,5,9,7,9
	.half	.L1393-.L1392
	.byte	3,1,1,5,24,9
	.half	.L1394-.L1393
	.byte	3,1,1,5,19,9
	.half	.L1395-.L1394
	.byte	1,5,26,9
	.half	.L1396-.L1395
	.byte	3,1,1,5,19,9
	.half	.L251-.L1396
	.byte	3,4,1,5,17,1,5,30,9
	.half	.L1397-.L251
	.byte	3,3,1,5,46,9
	.half	.L1398-.L1397
	.byte	1,5,35,9
	.half	.L1399-.L1398
	.byte	1,5,41,9
	.half	.L1400-.L1399
	.byte	1,5,16,1,5,42,9
	.half	.L1401-.L1400
	.byte	3,3,1,5,20,9
	.half	.L1402-.L1401
	.byte	3,3,1,5,37,9
	.half	.L1403-.L1402
	.byte	3,125,1,5,20,3,4,1,5,15,9
	.half	.L1404-.L1403
	.byte	3,124,1,5,14,9
	.half	.L939-.L1404
	.byte	3,8,1,5,7,9
	.half	.L1405-.L939
	.byte	1,5,16,7,9
	.half	.L1406-.L1405
	.byte	3,1,1,5,28,9
	.half	.L1407-.L1406
	.byte	1,5,9,9
	.half	.L1408-.L1407
	.byte	1,5,40,7,9
	.half	.L667-.L1408
	.byte	3,3,1,5,30,1,5,38,9
	.half	.L1409-.L667
	.byte	1,5,22,3,2,1,5,38,9
	.half	.L1410-.L1409
	.byte	3,126,1,5,26,9
	.half	.L941-.L1410
	.byte	1,5,22,9
	.half	.L1411-.L941
	.byte	3,2,1,5,11,9
	.half	.L943-.L1411
	.byte	3,1,1,9
	.half	.L253-.L943
	.byte	3,4,1,5,38,9
	.half	.L257-.L253
	.byte	3,1,1,5,18,9
	.half	.L1412-.L257
	.byte	1,5,11,9
	.half	.L1413-.L1412
	.byte	1,5,65,7,9
	.half	.L1414-.L1413
	.byte	3,1,1,5,30,1,5,13,9
	.half	.L937-.L1414
	.byte	3,1,1,5,54,9
	.half	.L252-.L937
	.byte	3,14,1,5,65,9
	.half	.L1415-.L252
	.byte	1,5,79,9
	.half	.L1416-.L1415
	.byte	1,5,20,9
	.half	.L949-.L1416
	.byte	1,5,63,9
	.half	.L1417-.L949
	.byte	3,7,1,5,53,9
	.half	.L1418-.L1417
	.byte	1,5,76,9
	.half	.L1419-.L1418
	.byte	1,5,19,9
	.half	.L951-.L1419
	.byte	1,5,14,9
	.half	.L1420-.L951
	.byte	3,4,1,5,27,9
	.half	.L1421-.L1420
	.byte	1,5,14,9
	.half	.L1422-.L1421
	.byte	1,5,24,9
	.half	.L1423-.L1422
	.byte	1,5,20,3,1,1,5,22,9
	.half	.L1424-.L1423
	.byte	3,5,1,5,20,1,5,14,9
	.half	.L1425-.L1424
	.byte	3,3,1,5,7,9
	.half	.L1426-.L1425
	.byte	1,5,30,7,9
	.half	.L1427-.L1426
	.byte	3,1,1,5,41,9
	.half	.L261-.L1427
	.byte	3,11,1,5,53,9
	.half	.L1428-.L261
	.byte	1,5,51,9
	.half	.L1429-.L1428
	.byte	1,5,20,1,5,14,9
	.half	.L1430-.L1429
	.byte	3,2,1,5,7,9
	.half	.L1431-.L1430
	.byte	1,5,16,7,9
	.half	.L1432-.L1431
	.byte	3,5,1,5,9,9
	.half	.L1433-.L1432
	.byte	1,5,19,7,9
	.half	.L1434-.L1433
	.byte	3,1,1,5,15,9
	.half	.L1435-.L1434
	.byte	1,5,16,7,9
	.half	.L1436-.L1435
	.byte	3,1,1,5,11,9
	.half	.L1437-.L1436
	.byte	3,127,1,5,20,9
	.half	.L263-.L1437
	.byte	3,4,1,5,16,9
	.half	.L1438-.L263
	.byte	1,5,11,7,9
	.half	.L264-.L1438
	.byte	3,1,1,5,7,9
	.half	.L665-.L264
	.byte	3,117,1,5,26,9
	.half	.L249-.L665
	.byte	3,17,1,5,12,9
	.half	.L247-.L249
	.byte	3,9,1,5,9,9
	.half	.L1439-.L247
	.byte	1,5,24,7,9
	.half	.L1440-.L1439
	.byte	1,5,27,9
	.half	.L1441-.L1440
	.byte	3,9,1,5,19,9
	.half	.L1442-.L1441
	.byte	3,122,1,5,29,9
	.half	.L1443-.L1442
	.byte	1,5,32,9
	.half	.L1444-.L1443
	.byte	3,6,1,5,21,9
	.half	.L1445-.L1444
	.byte	1,5,11,9
	.half	.L1446-.L1445
	.byte	1,5,33,9
	.half	.L953-.L1446
	.byte	3,1,1,5,15,1,5,13,9
	.half	.L1447-.L953
	.byte	3,1,1,5,27,9
	.half	.L954-.L1447
	.byte	3,3,1,5,32,9
	.half	.L1448-.L954
	.byte	1,5,21,9
	.half	.L1449-.L1448
	.byte	1,5,11,9
	.half	.L1450-.L1449
	.byte	1,5,33,9
	.half	.L955-.L1450
	.byte	3,1,1,5,15,1,5,30,9
	.half	.L1451-.L955
	.byte	3,1,1,5,46,9
	.half	.L956-.L1451
	.byte	1,5,35,9
	.half	.L1452-.L956
	.byte	1,5,41,9
	.half	.L1453-.L1452
	.byte	1,5,16,1,5,21,9
	.half	.L1454-.L1453
	.byte	3,5,1,5,19,1,5,3,9
	.half	.L228-.L1454
	.byte	3,167,126,1,5,8,3,225,1,1,5,9,9
	.half	.L946-.L228
	.byte	3,31,1,5,7,9
	.half	.L1455-.L946
	.byte	3,97,1,5,37,7,9
	.half	.L1456-.L1455
	.byte	1,5,27,1,5,35,9
	.half	.L1457-.L1456
	.byte	1,5,9,7,9
	.half	.L1458-.L1457
	.byte	3,31,1,5,24,9
	.half	.L671-.L1458
	.byte	3,21,1,5,29,9
	.half	.L1459-.L671
	.byte	1,5,7,9
	.half	.L1460-.L1459
	.byte	3,3,1,7,9
	.half	.L1461-.L1460
	.byte	1,9
	.half	.L275-.L1461
	.byte	3,1,1,9
	.half	.L276-.L275
	.byte	3,2,1,5,13,9
	.half	.L1462-.L276
	.byte	3,127,1,5,7,9
	.half	.L961-.L1462
	.byte	3,1,1,5,12,9
	.half	.L277-.L961
	.byte	3,1,1,5,17,9
	.half	.L1463-.L277
	.byte	1,5,34,9
	.half	.L1464-.L1463
	.byte	3,1,1,5,36,9
	.half	.L1465-.L1464
	.byte	1,5,46,9
	.half	.L964-.L1465
	.byte	1,5,26,3,1,1,5,17,9
	.half	.L279-.L964
	.byte	3,1,1,5,20,9
	.half	.L1466-.L279
	.byte	3,2,1,5,16,9
	.half	.L1467-.L1466
	.byte	3,1,1,5,13,9
	.half	.L1468-.L1467
	.byte	3,125,1,5,14,9
	.half	.L963-.L1468
	.byte	3,4,1,5,13,9
	.half	.L1469-.L963
	.byte	3,124,1,5,14,3,4,1,5,15,9
	.half	.L278-.L1469
	.byte	3,123,1,5,26,9
	.half	.L1470-.L278
	.byte	1,5,29,7,9
	.half	.L966-.L1470
	.byte	3,8,1,5,40,9
	.half	.L967-.L966
	.byte	3,1,1,5,35,9
	.half	.L965-.L967
	.byte	1,5,12,9
	.half	.L1471-.L965
	.byte	1,5,29,9
	.half	.L1472-.L1471
	.byte	1,5,27,9
	.half	.L1473-.L1472
	.byte	1,5,33,9
	.half	.L672-.L1473
	.byte	3,127,1,5,11,9
	.half	.L273-.L672
	.byte	3,3,1,5,7,9
	.half	.L1474-.L273
	.byte	1,5,9,7,9
	.half	.L1475-.L1474
	.byte	3,5,1,9
	.half	.L280-.L1475
	.byte	3,7,1,5,7,9
	.half	.L1476-.L280
	.byte	3,2,1,5,18,7,9
	.half	.L1477-.L1476
	.byte	3,4,1,5,16,9
	.half	.L1478-.L1477
	.byte	1,5,25,9
	.half	.L1479-.L1478
	.byte	3,2,1,5,13,9
	.half	.L1480-.L1479
	.byte	1,5,9,9
	.half	.L1481-.L1480
	.byte	1,5,15,7,9
	.half	.L1482-.L1481
	.byte	3,5,1,5,11,9
	.half	.L1483-.L1482
	.byte	1,5,13,7,9
	.half	.L1484-.L1483
	.byte	3,3,1,5,21,9
	.half	.L286-.L1484
	.byte	3,4,1,5,33,9
	.half	.L1485-.L286
	.byte	1,5,21,9
	.half	.L1486-.L1485
	.byte	1,5,15,9
	.half	.L1487-.L1486
	.byte	3,1,1,5,11,9
	.half	.L1488-.L1487
	.byte	1,5,18,7,9
	.half	.L1489-.L1488
	.byte	3,1,1,5,23,9
	.half	.L1490-.L1489
	.byte	1,5,29,9
	.half	.L287-.L1490
	.byte	3,2,1,5,38,9
	.half	.L1491-.L287
	.byte	1,5,20,9
	.half	.L1492-.L1491
	.byte	3,1,1,5,11,9
	.half	.L1493-.L1492
	.byte	3,1,1,7,9
	.half	.L970-.L1493
	.byte	1,5,29,9
	.half	.L285-.L970
	.byte	3,70,1,5,16,9
	.half	.L673-.L285
	.byte	3,193,0,1,5,9,9
	.half	.L1494-.L673
	.byte	1,5,15,7,9
	.half	.L1495-.L1494
	.byte	3,1,1,5,11,9
	.half	.L1496-.L1495
	.byte	1,5,38,7,9
	.half	.L1497-.L1496
	.byte	3,6,1,5,46,9
	.half	.L292-.L1497
	.byte	3,1,1,5,38,9
	.half	.L1498-.L292
	.byte	3,1,1,5,26,9
	.half	.L1499-.L1498
	.byte	1,5,46,9
	.half	.L1500-.L1499
	.byte	3,127,1,5,23,9
	.half	.L291-.L1500
	.byte	3,127,1,5,38,9
	.half	.L1501-.L291
	.byte	1,7,9
	.half	.L1502-.L1501
	.byte	1,5,39,9
	.half	.L290-.L1502
	.byte	3,6,1,5,64,9
	.half	.L972-.L290
	.byte	3,5,1,5,20,9
	.half	.L295-.L972
	.byte	3,3,1,5,19,9
	.half	.L1503-.L295
	.byte	1,5,20,7,9
	.half	.L1504-.L1503
	.byte	3,1,1,5,56,9
	.half	.L1505-.L1504
	.byte	1,5,17,7,9
	.half	.L1506-.L1505
	.byte	3,1,1,5,26,9
	.half	.L973-.L1506
	.byte	3,1,1,5,19,9
	.half	.L296-.L973
	.byte	3,2,1,5,26,9
	.half	.L978-.L296
	.byte	3,1,1,5,28,9
	.half	.L1507-.L978
	.byte	3,1,1,5,20,9
	.half	.L294-.L1507
	.byte	3,116,1,7,9
	.half	.L1508-.L294
	.byte	3,1,1,5,17,9
	.half	.L298-.L1508
	.byte	3,15,1,7,9
	.half	.L1509-.L298
	.byte	3,1,1,5,25,9
	.half	.L1510-.L1509
	.byte	3,3,1,5,55,9
	.half	.L1511-.L1510
	.byte	1,5,25,9
	.half	.L1512-.L1511
	.byte	1,5,19,9
	.half	.L1513-.L1512
	.byte	3,1,1,5,15,9
	.half	.L1514-.L1513
	.byte	1,5,22,7,9
	.half	.L1515-.L1514
	.byte	3,1,1,5,27,9
	.half	.L1516-.L1515
	.byte	1,5,33,9
	.half	.L301-.L1516
	.byte	3,2,1,5,42,9
	.half	.L1517-.L301
	.byte	1,5,24,9
	.half	.L1518-.L1517
	.byte	3,1,1,5,15,9
	.half	.L1519-.L1518
	.byte	3,1,1,5,24,9
	.half	.L299-.L1519
	.byte	3,3,1,5,32,9
	.half	.L289-.L299
	.byte	3,5,1,5,24,9
	.half	.L1520-.L289
	.byte	1,5,30,9
	.half	.L1521-.L1520
	.byte	1,5,22,1,5,9,9
	.half	.L1522-.L1521
	.byte	3,3,1,5,12,9
	.half	.L303-.L1522
	.byte	3,1,1,5,25,9
	.half	.L1523-.L303
	.byte	1,5,32,9
	.half	.L1524-.L1523
	.byte	3,2,1,5,22,9
	.half	.L985-.L1524
	.byte	3,126,1,5,32,9
	.half	.L1525-.L985
	.byte	3,2,1,5,18,9
	.half	.L986-.L1525
	.byte	3,11,1,5,20,9
	.half	.L1526-.L986
	.byte	1,5,9,9
	.half	.L1527-.L1526
	.byte	1,5,21,7,9
	.half	.L1528-.L1527
	.byte	3,1,1,5,19,9
	.half	.L1529-.L1528
	.byte	3,4,1,5,21,9
	.half	.L1530-.L1529
	.byte	1,5,19,9
	.half	.L1531-.L1530
	.byte	1,5,13,9
	.half	.L304-.L1531
	.byte	3,2,1,5,9,9
	.half	.L1532-.L304
	.byte	1,5,22,7,9
	.half	.L1533-.L1532
	.byte	3,2,1,5,57,9
	.half	.L1534-.L1533
	.byte	3,7,1,5,37,9
	.half	.L307-.L1534
	.byte	3,2,1,5,29,9
	.half	.L1535-.L307
	.byte	3,1,1,5,37,9
	.half	.L1536-.L1535
	.byte	1,5,17,9
	.half	.L1537-.L1536
	.byte	1,5,27,9
	.half	.L1538-.L1537
	.byte	3,2,1,5,14,9
	.half	.L1539-.L1538
	.byte	1,5,27,9
	.half	.L1540-.L1539
	.byte	1,5,24,9
	.half	.L1541-.L1540
	.byte	1,5,11,9
	.half	.L1542-.L1541
	.byte	3,1,1,5,27,9
	.half	.L308-.L1542
	.byte	3,2,1,5,14,9
	.half	.L1543-.L308
	.byte	1,5,27,9
	.half	.L1544-.L1543
	.byte	1,5,34,3,2,1,5,24,9
	.half	.L989-.L1544
	.byte	3,126,1,5,34,9
	.half	.L1545-.L989
	.byte	3,2,1,5,19,9
	.half	.L990-.L1545
	.byte	3,2,1,5,22,9
	.half	.L1546-.L990
	.byte	1,5,11,9
	.half	.L1547-.L1546
	.byte	1,5,17,7,9
	.half	.L1548-.L1547
	.byte	3,6,1,5,13,9
	.half	.L1549-.L1548
	.byte	1,5,39,9
	.half	.L1550-.L1549
	.byte	3,1,1,5,43,9
	.half	.L1551-.L1550
	.byte	1,5,25,9
	.half	.L310-.L1551
	.byte	3,2,1,5,21,9
	.half	.L311-.L310
	.byte	3,2,1,5,15,9
	.half	.L309-.L311
	.byte	3,2,1,5,11,9
	.half	.L1552-.L309
	.byte	1,5,24,7,9
	.half	.L1553-.L1552
	.byte	3,2,1,5,20,9
	.half	.L1554-.L1553
	.byte	3,1,1,5,13,9
	.half	.L1555-.L1554
	.byte	1,5,26,7,9
	.half	.L1556-.L1555
	.byte	3,1,1,5,28,9
	.half	.L312-.L1556
	.byte	3,4,1,5,22,9
	.half	.L1557-.L312
	.byte	1,5,37,9
	.half	.L1558-.L1557
	.byte	3,97,1,5,19,9
	.half	.L306-.L1558
	.byte	3,125,1,5,16,9
	.half	.L1559-.L306
	.byte	1,5,26,7,9
	.half	.L1560-.L1559
	.byte	3,1,1,5,48,9
	.half	.L1561-.L1560
	.byte	1,5,34,9
	.half	.L1562-.L1561
	.byte	1,5,42,9
	.half	.L1563-.L1562
	.byte	1,5,9,7,9
	.half	.L314-.L1563
	.byte	3,52,1,5,21,9
	.half	.L315-.L314
	.byte	1,5,16,9
	.half	.L284-.L315
	.byte	3,24,1,5,9,9
	.half	.L999-.L284
	.byte	1,5,38,7,9
	.half	.L1564-.L999
	.byte	3,1,1,5,22,9
	.half	.L1565-.L1564
	.byte	1,5,44,9
	.half	.L1566-.L1565
	.byte	1,5,39,9
	.half	.L318-.L1566
	.byte	3,26,1,5,30,9
	.half	.L320-.L318
	.byte	3,2,1,5,38,9
	.half	.L1567-.L320
	.byte	1,5,13,9
	.half	.L1568-.L1567
	.byte	1,5,19,7,9
	.half	.L1569-.L1568
	.byte	3,5,1,5,24,9
	.half	.L1570-.L1569
	.byte	1,5,35,9
	.half	.L1571-.L1570
	.byte	1,5,15,9
	.half	.L1572-.L1571
	.byte	1,5,54,7,9
	.half	.L685-.L1572
	.byte	3,4,1,5,17,9
	.half	.L991-.L685
	.byte	3,1,1,5,19,7,9
	.half	.L1573-.L991
	.byte	3,1,1,5,32,7,9
	.half	.L1574-.L1573
	.byte	3,1,1,5,38,9
	.half	.L1575-.L1574
	.byte	1,5,32,9
	.half	.L330-.L1575
	.byte	3,2,1,5,48,9
	.half	.L325-.L330
	.byte	3,2,1,5,17,9
	.half	.L992-.L325
	.byte	3,2,1,5,15,9
	.half	.L321-.L992
	.byte	3,8,1,5,21,7,9
	.half	.L1576-.L321
	.byte	3,1,1,5,17,9
	.half	.L1577-.L1576
	.byte	1,5,56,7,9
	.half	.L687-.L1577
	.byte	3,5,1,5,19,9
	.half	.L993-.L687
	.byte	3,1,1,7,9
	.half	.L1578-.L993
	.byte	3,4,1,5,21,9
	.half	.L327-.L1578
	.byte	3,5,1,5,56,9
	.half	.L689-.L327
	.byte	3,6,1,5,40,9
	.half	.L994-.L689
	.byte	1,5,19,9
	.half	.L996-.L994
	.byte	3,1,1,5,25,7,9
	.half	.L1579-.L996
	.byte	3,1,1,5,21,9
	.half	.L1580-.L1579
	.byte	1,5,49,7,9
	.half	.L1581-.L1580
	.byte	3,2,1,5,33,1,5,40,9
	.half	.L1582-.L1581
	.byte	3,1,1,5,49,9
	.half	.L1583-.L1582
	.byte	1,5,32,9
	.half	.L334-.L1583
	.byte	3,2,1,5,50,9
	.half	.L1584-.L334
	.byte	3,1,1,5,19,9
	.half	.L998-.L1584
	.byte	3,2,1,5,23,9
	.half	.L328-.L998
	.byte	3,20,1,5,20,9
	.half	.L1585-.L328
	.byte	3,123,1,5,19,9
	.half	.L1586-.L1585
	.byte	3,5,1,7,9
	.half	.L1587-.L1586
	.byte	3,1,1,5,21,9
	.half	.L1588-.L1587
	.byte	3,1,1,5,17,9
	.half	.L1589-.L1588
	.byte	1,5,44,7,9
	.half	.L1590-.L1589
	.byte	3,4,1,5,28,9
	.half	.L1591-.L1590
	.byte	1,5,25,9
	.half	.L1592-.L1591
	.byte	3,1,1,5,17,9
	.half	.L1593-.L1592
	.byte	1,5,23,7,9
	.half	.L1594-.L1593
	.byte	3,1,1,5,19,9
	.half	.L1595-.L1594
	.byte	1,5,47,7,9
	.half	.L1596-.L1595
	.byte	3,2,1,5,31,1,5,38,9
	.half	.L1597-.L1596
	.byte	3,1,1,5,47,9
	.half	.L1598-.L1597
	.byte	1,5,23,9
	.half	.L340-.L1598
	.byte	3,3,1,5,19,9
	.half	.L1599-.L340
	.byte	1,5,25,7,9
	.half	.L1600-.L1599
	.byte	3,5,1,5,21,9
	.half	.L1601-.L1600
	.byte	1,5,23,7,9
	.half	.L1602-.L1601
	.byte	3,3,1,5,50,9
	.half	.L342-.L1602
	.byte	3,3,1,5,65,9
	.half	.L1603-.L342
	.byte	1,5,25,9
	.half	.L1604-.L1603
	.byte	1,5,60,9
	.half	.L1605-.L1604
	.byte	1,5,77,1,5,75,9
	.half	.L1606-.L1605
	.byte	1,5,37,1,5,53,9
	.half	.L1607-.L1606
	.byte	3,1,1,5,44,9
	.half	.L1608-.L1607
	.byte	1,5,59,9
	.half	.L1609-.L1608
	.byte	1,5,30,9
	.half	.L1610-.L1609
	.byte	3,1,1,5,21,9
	.half	.L1002-.L1610
	.byte	3,1,1,7,9
	.half	.L1611-.L1002
	.byte	1,5,17,9
	.half	.L1612-.L1611
	.byte	3,4,1,5,54,9
	.half	.L336-.L1612
	.byte	3,145,127,1,5,47,9
	.half	.L1613-.L336
	.byte	1,5,26,7,9
	.half	.L282-.L1613
	.byte	3,199,1,1,5,10,9
	.half	.L271-.L282
	.byte	3,5,1,5,7,9
	.half	.L346-.L271
	.byte	3,1,1,5,1,9
	.half	.L347-.L346
	.byte	3,3,1,7,9
	.half	.L452-.L347
	.byte	0,1,1
.L1342:
	.sdecl	'.debug_ranges',debug,cluster('tcp_receive')
	.sect	'.debug_ranges'
.L451:
	.word	-1,.L404,0,.L452-.L404,0,0
.L657:
	.word	-1,.L404,0,.L655-.L404,-1,.L414,0,.L542-.L414,-1,.L416,0,.L522-.L416,-1,.L422,0,.L502-.L422,0,0
.L670:
	.word	-1,.L404,.L671-.L404,.L672-.L404,.L285-.L404,.L673-.L404,0,0
.L677:
	.word	-1,.L404,.L290-.L404,.L289-.L404,-1,.L406,0,.L592-.L406,-1,.L412,0,.L547-.L412,0,0
.L679:
	.word	-1,.L404,.L295-.L404,.L294-.L404,-1,.L408,0,.L587-.L408,-1,.L420,0,.L512-.L420,0,0
.L681:
	.word	-1,.L404,.L307-.L404,.L306-.L404,-1,.L418,0,.L517-.L418,0,0
.L682:
	.word	-1,.L404,.L318-.L404,.L282-.L404,-1,.L410,0,.L572-.L410,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_parseopt')
	.sect	'.debug_info'
.L453:
	.word	289
	.half	3
	.word	.L454
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L456,.L455
	.byte	2
	.word	.L429
	.byte	3
	.byte	'tcp_parseopt',0,1,247,14,1,1,1
	.word	.L426,.L691,.L425
	.byte	4
	.byte	'pcb',0,1,247,14,30
	.word	.L627,.L692
	.byte	5
	.word	.L426,.L691
	.byte	6
	.byte	'data',0,1,249,14,8
	.word	.L632,.L693
	.byte	6
	.byte	'mss',0,1,250,14,9
	.word	.L636,.L694
	.byte	5
	.word	.L353,.L355
	.byte	6
	.byte	'opt',0,1,132,15,12
	.word	.L632,.L695
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_parseopt')
	.sect	'.debug_abbrev'
.L454:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_parseopt')
	.sect	'.debug_line'
.L455:
	.word	.L1615-.L1614
.L1614:
	.half	3
	.word	.L1617-.L1616
.L1616:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1617:
	.byte	5,7,7,0,5,2
	.word	.L426
	.byte	3,129,15,1,5,1,9
	.half	.L1618-.L426
	.byte	3,117,1,5,3,9
	.half	.L1006-.L1618
	.byte	3,11,1,5,23,7,9
	.half	.L1619-.L1006
	.byte	3,1,1,5,21,1,5,38,9
	.half	.L353-.L1619
	.byte	3,1,1,5,14,9
	.half	.L1007-.L353
	.byte	3,2,1,7,9
	.half	.L1620-.L1007
	.byte	3,4,1,7,9
	.half	.L1621-.L1620
	.byte	3,4,1,5,35,7,9
	.half	.L1622-.L1621
	.byte	3,2,1,5,15,9
	.half	.L1008-.L1622
	.byte	1,5,66,7,9
	.half	.L1623-.L1008
	.byte	1,5,107,9
	.half	.L1624-.L1623
	.byte	1,5,81,9
	.half	.L1625-.L1624
	.byte	1,5,105,9
	.half	.L1626-.L1625
	.byte	1,5,45,7,9
	.half	.L1627-.L1626
	.byte	3,6,1,5,48,9
	.half	.L1628-.L1627
	.byte	1,5,38,3,1,1,5,15,9
	.half	.L1009-.L1628
	.byte	1,5,30,9
	.half	.L1629-.L1009
	.byte	3,2,1,5,23,9
	.half	.L1010-.L1629
	.byte	1,5,47,7,9
	.half	.L1630-.L1010
	.byte	1,5,54,7,9
	.half	.L360-.L1630
	.byte	1,5,20,9
	.half	.L361-.L360
	.byte	1,5,11,9
	.half	.L1011-.L361
	.byte	3,1,1,5,38,9
	.half	.L357-.L1011
	.byte	3,197,0,1,5,11,9
	.half	.L1012-.L357
	.byte	3,1,1,7,9
	.half	.L1631-.L1012
	.byte	3,8,1,5,22,9
	.half	.L1632-.L1631
	.byte	1,5,26,9
	.half	.L355-.L1632
	.byte	3,155,127,1,5,39,9
	.half	.L1633-.L355
	.byte	1,5,52,9
	.half	.L1634-.L1633
	.byte	1,5,1,7,9
	.half	.L352-.L1634
	.byte	3,233,0,1,7,9
	.half	.L457-.L352
	.byte	0,1,1
.L1615:
	.sdecl	'.debug_ranges',debug,cluster('tcp_parseopt')
	.sect	'.debug_ranges'
.L456:
	.word	-1,.L426,0,.L457-.L426,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_listen_input')
	.sect	'.debug_info'
.L458:
	.word	287
	.half	3
	.word	.L459
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L461,.L460
	.byte	2
	.word	.L429
	.byte	3
	.byte	'tcp_listen_input',0,1,246,4,1,1,1
	.word	.L382,.L696,.L381
	.byte	4
	.byte	'pcb',0,1,246,4,41
	.word	.L630,.L697
	.byte	5
	.word	.L698
	.byte	6
	.byte	'npcb',0,1,248,4,19
	.word	.L627,.L699
	.byte	6
	.byte	'iss',0,1,249,4,9
	.word	.L660,.L700
	.byte	6
	.byte	'rc',0,1,250,4,9
	.word	.L634,.L701
	.byte	7
	.word	.L702,.L105
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_listen_input')
	.sect	'.debug_abbrev'
.L459:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58,15,59
	.byte	15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_listen_input')
	.sect	'.debug_line'
.L460:
	.word	.L1636-.L1635
.L1635:
	.half	3
	.word	.L1638-.L1637
.L1637:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1638:
	.byte	5,7,7,0,5,2
	.word	.L382
	.byte	3,251,4,1,5,1,9
	.half	.L1639-.L382
	.byte	3,122,1,5,3,9
	.half	.L847-.L1639
	.byte	3,6,1,7,9
	.half	.L1640-.L847
	.byte	3,9,1,5,50,7,9
	.half	.L1641-.L1640
	.byte	3,5,1,5,42,9
	.half	.L833-.L1641
	.byte	3,127,1,5,49,9
	.half	.L1642-.L833
	.byte	1,5,56,9
	.half	.L1643-.L1642
	.byte	3,1,1,5,10,9
	.half	.L102-.L1643
	.byte	3,1,1,5,25,7,9
	.half	.L1644-.L102
	.byte	3,8,1,5,10,9
	.half	.L837-.L1644
	.byte	1,5,5,9
	.half	.L839-.L837
	.byte	3,4,1,5,7,7,9
	.half	.L702-.L839
	.byte	3,3,1,9
	.half	.L1645-.L702
	.byte	3,1,1,5,5,9
	.half	.L105-.L1645
	.byte	3,9,1,5,24,9
	.half	.L1646-.L105
	.byte	3,7,1,5,5,9
	.half	.L842-.L1646
	.byte	3,122,1,5,27,9
	.half	.L1647-.L842
	.byte	3,1,1,5,22,9
	.half	.L1648-.L1647
	.byte	1,5,25,9
	.half	.L1649-.L1648
	.byte	3,1,1,5,31,9
	.half	.L1650-.L1649
	.byte	1,5,23,9
	.half	.L1651-.L1650
	.byte	1,5,19,9
	.half	.L1652-.L1651
	.byte	3,1,1,5,17,1,5,21,9
	.half	.L1653-.L1652
	.byte	3,1,1,5,27,9
	.half	.L1654-.L1653
	.byte	1,5,19,1,5,30,9
	.half	.L1655-.L1654
	.byte	3,1,1,5,24,9
	.half	.L1656-.L1655
	.byte	3,1,1,5,19,9
	.half	.L843-.L1656
	.byte	3,1,1,9
	.half	.L1657-.L843
	.byte	3,1,1,9
	.half	.L1658-.L1657
	.byte	3,1,1,9
	.half	.L1659-.L1658
	.byte	3,1,1,5,21,9
	.half	.L1660-.L1659
	.byte	3,1,1,5,27,9
	.half	.L1661-.L1660
	.byte	1,5,19,1,5,29,9
	.half	.L1662-.L1661
	.byte	3,1,1,5,24,9
	.half	.L1663-.L1662
	.byte	1,5,20,9
	.half	.L1664-.L1663
	.byte	3,2,1,5,27,9
	.half	.L1665-.L1664
	.byte	3,3,1,5,40,9
	.half	.L1666-.L1665
	.byte	1,5,22,1,5,26,9
	.half	.L1667-.L1666
	.byte	3,1,1,5,21,9
	.half	.L1668-.L1667
	.byte	1,5,5,9
	.half	.L1669-.L1668
	.byte	3,3,1,5,18,9
	.half	.L1670-.L1669
	.byte	3,3,1,5,21,9
	.half	.L1671-.L1670
	.byte	3,1,1,5,17,9
	.half	.L846-.L1671
	.byte	3,4,1,5,15,9
	.half	.L1672-.L846
	.byte	1,5,42,9
	.half	.L1673-.L1672
	.byte	3,13,1,5,5,9
	.half	.L849-.L1673
	.byte	3,1,1,5,25,7,9
	.half	.L1674-.L849
	.byte	3,1,1,5,16,9
	.half	.L108-.L1674
	.byte	3,3,1,5,1,9
	.half	.L101-.L108
	.byte	3,3,1,7,9
	.half	.L462-.L101
	.byte	0,1,1
.L1636:
	.sdecl	'.debug_ranges',debug,cluster('tcp_listen_input')
	.sect	'.debug_ranges'
.L461:
	.word	-1,.L382,0,.L462-.L382,0,0
.L698:
	.word	-1,.L382,0,.L696-.L382,-1,.L384,0,.L582-.L384,-1,.L386,0,.L532-.L386,-1,.L388,0,.L507-.L388,-1,.L390,0
	.word	.L577-.L390,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_timewait_input')
	.sect	'.debug_info'
.L463:
	.word	232
	.half	3
	.word	.L464
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L466,.L465
	.byte	2
	.word	.L429
	.byte	3
	.byte	'tcp_timewait_input',0,1,227,5,1,1,1
	.word	.L392,.L703,.L391
	.byte	4
	.byte	'pcb',0,1,227,5,36
	.word	.L627,.L704
	.byte	5
	.word	.L392,.L703
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_timewait_input')
	.sect	'.debug_abbrev'
.L464:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_timewait_input')
	.sect	'.debug_line'
.L465:
	.word	.L1676-.L1675
.L1675:
	.half	3
	.word	.L1678-.L1677
.L1677:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1678:
	.byte	5,7,7,0,5,2
	.word	.L392
	.byte	3,233,5,1,5,3,9
	.half	.L1679-.L392
	.byte	1,7,9
	.half	.L1680-.L1679
	.byte	3,7,1,5,9,7,9
	.half	.L1681-.L1680
	.byte	3,3,1,5,52,9
	.half	.L1682-.L1681
	.byte	3,3,1,5,15,9
	.half	.L1683-.L1682
	.byte	1,5,35,9
	.half	.L1684-.L1683
	.byte	3,127,1,5,15,9
	.half	.L1685-.L1684
	.byte	3,1,1,5,33,9
	.half	.L1686-.L1685
	.byte	3,127,1,5,20,1,5,44,9
	.half	.L1687-.L1686
	.byte	3,1,1,5,58,9
	.half	.L1688-.L1687
	.byte	1,5,43,9
	.half	.L1689-.L1688
	.byte	3,127,1,5,15,9
	.half	.L1690-.L1689
	.byte	3,1,1,5,58,9
	.half	.L1691-.L1690
	.byte	1,5,10,7,9
	.half	.L111-.L1691
	.byte	3,3,1,5,16,7,9
	.half	.L1692-.L111
	.byte	3,3,1,5,14,9
	.half	.L1693-.L1692
	.byte	1,5,8,9
	.half	.L112-.L1693
	.byte	3,3,1,5,3,9
	.half	.L1694-.L112
	.byte	1,5,5,7,9
	.half	.L1695-.L1694
	.byte	3,2,1,5,16,9
	.half	.L1696-.L1695
	.byte	3,1,1,5,1,7,9
	.half	.L110-.L1696
	.byte	3,3,1,7,9
	.half	.L467-.L110
	.byte	0,1,1
.L1676:
	.sdecl	'.debug_ranges',debug,cluster('tcp_timewait_input')
	.sect	'.debug_ranges'
.L466:
	.word	-1,.L392,0,.L467-.L392,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_input_delayed_close')
	.sect	'.debug_info'
.L468:
	.word	241
	.half	3
	.word	.L469
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L471,.L470
	.byte	2
	.word	.L429
	.byte	3
	.byte	'tcp_input_delayed_close',0,1,216,4,1
	.word	.L662
	.byte	1,1
	.word	.L380,.L705,.L379
	.byte	4
	.byte	'pcb',0,1,216,4,41
	.word	.L627,.L706
	.byte	5
	.word	.L380,.L705
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_input_delayed_close')
	.sect	'.debug_abbrev'
.L469:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_input_delayed_close')
	.sect	'.debug_line'
.L470:
	.word	.L1698-.L1697
.L1697:
	.half	3
	.word	.L1700-.L1699
.L1699:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1700:
	.byte	5,7,7,0,5,2
	.word	.L380
	.byte	3,219,4,1,5,1,9
	.half	.L1701-.L380
	.byte	3,124,1,5,3,9
	.half	.L828-.L1701
	.byte	3,4,1,5,14,7,9
	.half	.L1702-.L828
	.byte	3,3,1,5,10,9
	.half	.L1703-.L1702
	.byte	1,5,7,7,9
	.half	.L1704-.L1703
	.byte	3,4,1,5,21,9
	.half	.L97-.L1704
	.byte	3,2,1,5,38,9
	.half	.L1705-.L97
	.byte	1,5,14,9
	.half	.L830-.L1705
	.byte	3,1,1,5,12,9
	.half	.L832-.L830
	.byte	3,1,1,5,1,3,3,1,5,10,7,9
	.half	.L96-.L832
	.byte	3,127,1,5,1,3,1,1,7,9
	.half	.L472-.L96
	.byte	0,1,1
.L1698:
	.sdecl	'.debug_ranges',debug,cluster('tcp_input_delayed_close')
	.sect	'.debug_ranges'
.L471:
	.word	-1,.L380,0,.L472-.L380,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_oos_insert_segment')
	.sect	'.debug_info'
.L473:
	.word	277
	.half	3
	.word	.L474
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L476,.L475
	.byte	2
	.word	.L429
	.byte	3
	.byte	'tcp_oos_insert_segment',0,1,155,8,1,1,1
	.word	.L400,.L707,.L399
	.byte	4
	.byte	'cseg',0,1,155,8,40
	.word	.L644,.L708
	.byte	4
	.byte	'next',0,1,155,8,62
	.word	.L644,.L709
	.byte	5
	.word	.L400,.L707
	.byte	6
	.byte	'old_seg',0,1,157,8,19
	.word	.L644,.L710
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_oos_insert_segment')
	.sect	'.debug_abbrev'
.L474:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_oos_insert_segment')
	.sect	'.debug_line'
.L475:
	.word	.L1707-.L1706
.L1706:
	.half	3
	.word	.L1709-.L1708
.L1708:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1709:
	.byte	5,1,7,0,5,2
	.word	.L400
	.byte	3,154,8,1,5,7,9
	.half	.L908-.L400
	.byte	3,6,1,5,1,9
	.half	.L1710-.L908
	.byte	3,122,1,5,7,9
	.half	.L909-.L1710
	.byte	3,6,1,5,3,9
	.half	.L907-.L909
	.byte	1,5,19,7,9
	.half	.L1711-.L907
	.byte	3,2,1,5,10,9
	.half	.L911-.L1711
	.byte	3,1,1,5,24,9
	.half	.L1712-.L911
	.byte	3,127,1,5,11,9
	.half	.L214-.L1712
	.byte	3,9,1,5,7,9
	.half	.L1713-.L214
	.byte	1,5,9,7,9
	.half	.L1714-.L1713
	.byte	3,1,1,5,15,9
	.half	.L215-.L1714
	.byte	3,2,1,5,18,9
	.half	.L912-.L215
	.byte	3,1,1,5,20,9
	.half	.L1715-.L912
	.byte	3,1,1,5,12,9
	.half	.L213-.L1715
	.byte	3,119,1,7,9
	.half	.L1716-.L213
	.byte	3,1,1,5,9,9
	.half	.L216-.L1716
	.byte	3,10,1,7,9
	.half	.L1717-.L216
	.byte	3,1,1,5,47,9
	.half	.L1718-.L1717
	.byte	3,2,1,5,17,1,5,24,9
	.half	.L1719-.L1718
	.byte	3,1,1,5,33,9
	.half	.L1720-.L1719
	.byte	1,5,14,9
	.half	.L212-.L1720
	.byte	3,3,1,5,1,9
	.half	.L1721-.L212
	.byte	3,1,1,7,9
	.half	.L477-.L1721
	.byte	0,1,1
.L1707:
	.sdecl	'.debug_ranges',debug,cluster('tcp_oos_insert_segment')
	.sect	'.debug_ranges'
.L476:
	.word	-1,.L400,0,.L477-.L400,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_free_acked_segments')
	.sect	'.debug_info'
.L478:
	.word	359
	.half	3
	.word	.L479
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L481,.L480
	.byte	2
	.word	.L429
	.byte	3
	.byte	'tcp_free_acked_segments',0,1,192,8,1
	.word	.L644
	.byte	1,1
	.word	.L402,.L711,.L401
	.byte	4
	.byte	'pcb',0,1,192,8,41
	.word	.L627,.L712
	.byte	4
	.byte	'seg_list',0,1,192,8,62
	.word	.L644,.L713
	.byte	4
	.byte	'dbg_list_name',0,1,192,8,84
	.word	.L714,.L715
	.byte	4
	.byte	'dbg_other_seg_list',0,1,193,8,41
	.word	.L644,.L716
	.byte	5
	.word	.L402,.L711
	.byte	6
	.byte	'next',0,1,195,8,19
	.word	.L644,.L717
	.byte	6
	.byte	'clen',0,1,196,8,9
	.word	.L636,.L718
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_free_acked_segments')
	.sect	'.debug_abbrev'
.L479:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_free_acked_segments')
	.sect	'.debug_line'
.L480:
	.word	.L1723-.L1722
.L1722:
	.half	3
	.word	.L1725-.L1724
.L1724:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1725:
	.byte	5,1,7,0,5,2
	.word	.L402
	.byte	3,191,8,1,5,50,9
	.half	.L917-.L402
	.byte	3,11,1,5,10,9
	.half	.L220-.L917
	.byte	3,6,1,5,26,9
	.half	.L919-.L220
	.byte	3,3,1,5,24,9
	.half	.L1726-.L919
	.byte	3,126,1,5,26,9
	.half	.L1727-.L1726
	.byte	3,2,1,5,10,9
	.half	.L921-.L1727
	.byte	1,5,5,3,3,1,5,36,9
	.half	.L221-.L921
	.byte	3,2,1,5,51,9
	.half	.L1728-.L221
	.byte	3,1,1,9
	.half	.L925-.L1728
	.byte	3,127,1,5,23,1,5,34,9
	.half	.L1729-.L925
	.byte	3,1,1,5,51,9
	.half	.L1730-.L1729
	.byte	1,5,45,9
	.half	.L1731-.L1730
	.byte	1,5,16,1,5,18,9
	.half	.L1732-.L1731
	.byte	3,1,1,5,12,9
	.half	.L926-.L1732
	.byte	3,5,1,5,5,9
	.half	.L1733-.L926
	.byte	1,5,7,7,9
	.half	.L1734-.L1733
	.byte	3,1,1,7,9
	.half	.L1735-.L1734
	.byte	1,7,9
	.half	.L1736-.L1735
	.byte	1,5,10,9
	.half	.L219-.L1736
	.byte	3,104,1,7,9
	.half	.L1737-.L219
	.byte	3,1,1,5,3,9
	.half	.L225-.L1737
	.byte	3,27,1,5,1,9
	.half	.L928-.L225
	.byte	3,1,1,7,9
	.half	.L482-.L928
	.byte	0,1,1
.L1723:
	.sdecl	'.debug_ranges',debug,cluster('tcp_free_acked_segments')
	.sect	'.debug_ranges'
.L481:
	.word	-1,.L402,0,.L482-.L402,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_get_next_optbyte')
	.sect	'.debug_info'
.L483:
	.word	240
	.half	3
	.word	.L484
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L486,.L485
	.byte	2
	.word	.L429
	.byte	3
	.byte	'tcp_get_next_optbyte',0,1,226,14,1
	.word	.L632
	.byte	1,1
	.word	.L424,.L719,.L423
	.byte	4
	.word	.L424,.L719
	.byte	5
	.word	.L348,.L720
	.byte	5
	.word	.L349,.L721
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_get_next_optbyte')
	.sect	'.debug_abbrev'
.L484:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_get_next_optbyte')
	.sect	'.debug_line'
.L485:
	.word	.L1739-.L1738
.L1738:
	.half	3
	.word	.L1741-.L1740
.L1740:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1741:
	.byte	5,8,7,0,5,2
	.word	.L424
	.byte	3,228,14,1,5,18,9
	.half	.L1742-.L424
	.byte	3,127,1,5,28,9
	.half	.L1743-.L1742
	.byte	1,5,7,9
	.half	.L1744-.L1743
	.byte	3,1,1,5,42,7,9
	.half	.L1745-.L1744
	.byte	1,5,40,9
	.half	.L1746-.L1745
	.byte	1,5,26,7,9
	.half	.L348-.L1746
	.byte	3,1,1,5,16,9
	.half	.L1747-.L348
	.byte	3,1,1,5,1,9
	.half	.L720-.L1747
	.byte	3,5,1,5,30,7,9
	.half	.L349-.L720
	.byte	3,125,1,5,16,9
	.half	.L1748-.L349
	.byte	1,5,23,9
	.half	.L1749-.L1748
	.byte	3,1,1,5,1,9
	.half	.L721-.L1749
	.byte	3,2,1,7,9
	.half	.L487-.L721
	.byte	0,1,1
.L1739:
	.sdecl	'.debug_ranges',debug,cluster('tcp_get_next_optbyte')
	.sect	'.debug_ranges'
.L486:
	.word	-1,.L424,0,.L487-.L424,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_84')
	.sect	'.debug_info'
.L488:
	.word	196
	.half	3
	.word	.L489
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L491,.L490
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_84',0,1,118,1,1
	.word	.L378,.L492,.L377
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_84')
	.sect	'.debug_abbrev'
.L489:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_84')
	.sect	'.debug_line'
.L490:
	.word	.L1751-.L1750
.L1750:
	.half	3
	.word	.L1753-.L1752
.L1752:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1753:
	.byte	5,5,7,0,5,2
	.word	.L378
	.byte	3,250,1,1,9
	.half	.L492-.L378
	.byte	0,1,1,5,3,0,5,2
	.word	.L378
	.byte	3,130,1,1,5,5,9
	.half	.L1754-.L378
	.byte	3,248,0,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,5,0,5,2
	.word	.L378
	.byte	3,193,1,1,9
	.half	.L1754-.L378
	.byte	3,57,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,5,0,5,2
	.word	.L378
	.byte	3,222,1,1,9
	.half	.L1754-.L378
	.byte	3,28,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,5,0,5,2
	.word	.L378
	.byte	3,223,1,1,9
	.half	.L1754-.L378
	.byte	3,27,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,5,0,5,2
	.word	.L378
	.byte	3,251,1,1,9
	.half	.L1754-.L378
	.byte	3,127,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,5,0,5,2
	.word	.L378
	.byte	3,252,1,1,9
	.half	.L1754-.L378
	.byte	3,126,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,7,0,5,2
	.word	.L378
	.byte	3,140,2,1,5,5,9
	.half	.L1754-.L378
	.byte	3,110,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,7,0,5,2
	.word	.L378
	.byte	3,148,2,1,5,5,9
	.half	.L1754-.L378
	.byte	3,102,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,7,0,5,2
	.word	.L378
	.byte	3,158,2,1,5,5,9
	.half	.L1754-.L378
	.byte	3,92,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,11,0,5,2
	.word	.L378
	.byte	3,229,3,1,5,5,9
	.half	.L1754-.L378
	.byte	3,149,126,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,3,0,5,2
	.word	.L378
	.byte	3,200,4,1,5,5,9
	.half	.L1754-.L378
	.byte	3,178,125,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,7,0,5,2
	.word	.L378
	.byte	3,183,6,1,5,5,9
	.half	.L1754-.L378
	.byte	3,195,123,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,9,0,5,2
	.word	.L378
	.byte	3,235,6,1,5,5,9
	.half	.L1754-.L378
	.byte	3,143,123,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,11,0,5,2
	.word	.L378
	.byte	3,243,6,1,5,5,9
	.half	.L1754-.L378
	.byte	3,135,123,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,13,0,5,2
	.word	.L378
	.byte	3,167,7,1,5,5,9
	.half	.L1754-.L378
	.byte	3,211,122,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,5,0,5,2
	.word	.L378
	.byte	3,214,8,1,9
	.half	.L1754-.L378
	.byte	3,164,121,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,7,0,5,2
	.word	.L378
	.byte	3,224,8,1,5,5,9
	.half	.L1754-.L378
	.byte	3,154,121,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,3,0,5,2
	.word	.L378
	.byte	3,251,8,1,5,5,9
	.half	.L1754-.L378
	.byte	3,255,120,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,7,0,5,2
	.word	.L378
	.byte	3,149,11,1,5,5,9
	.half	.L1754-.L378
	.byte	3,229,118,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,7,0,5,2
	.word	.L378
	.byte	3,150,11,1,5,5,9
	.half	.L1754-.L378
	.byte	3,228,118,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,7,0,5,2
	.word	.L378
	.byte	3,152,11,1,5,5,9
	.half	.L1754-.L378
	.byte	3,226,118,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,11,0,5,2
	.word	.L378
	.byte	3,204,11,1,5,5,9
	.half	.L1754-.L378
	.byte	3,174,118,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,15,0,5,2
	.word	.L378
	.byte	3,253,11,1,5,5,9
	.half	.L1754-.L378
	.byte	3,253,117,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,9,0,5,2
	.word	.L378
	.byte	3,136,12,1,5,5,9
	.half	.L1754-.L378
	.byte	3,242,117,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,11,0,5,2
	.word	.L378
	.byte	3,172,12,1,5,5,9
	.half	.L1754-.L378
	.byte	3,206,117,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1,5,21,0,5,2
	.word	.L378
	.byte	3,249,13,1,5,5,9
	.half	.L1754-.L378
	.byte	3,129,116,1,7,9
	.half	.L492-.L1754
	.byte	0,1,1
.L1751:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_84')
	.sect	'.debug_ranges'
.L491:
	.word	-1,.L378,0,.L492-.L378,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_85')
	.sect	'.debug_info'
.L493:
	.word	196
	.half	3
	.word	.L494
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L496,.L495
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_85',0,1,118,1,1
	.word	.L376,.L497,.L375
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_85')
	.sect	'.debug_abbrev'
.L494:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_85')
	.sect	'.debug_line'
.L495:
	.word	.L1756-.L1755
.L1755:
	.half	3
	.word	.L1758-.L1757
.L1757:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1758:
	.byte	5,5,7,0,5,2
	.word	.L376
	.byte	3,250,1,1,9
	.half	.L497-.L376
	.byte	0,1,1,5,3,0,5,2
	.word	.L376
	.byte	3,130,1,1,5,5,9
	.half	.L1759-.L376
	.byte	3,248,0,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,5,0,5,2
	.word	.L376
	.byte	3,193,1,1,9
	.half	.L1759-.L376
	.byte	3,57,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,5,0,5,2
	.word	.L376
	.byte	3,222,1,1,9
	.half	.L1759-.L376
	.byte	3,28,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,5,0,5,2
	.word	.L376
	.byte	3,223,1,1,9
	.half	.L1759-.L376
	.byte	3,27,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,5,0,5,2
	.word	.L376
	.byte	3,251,1,1,9
	.half	.L1759-.L376
	.byte	3,127,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,5,0,5,2
	.word	.L376
	.byte	3,252,1,1,9
	.half	.L1759-.L376
	.byte	3,126,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,7,0,5,2
	.word	.L376
	.byte	3,140,2,1,5,5,9
	.half	.L1759-.L376
	.byte	3,110,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,7,0,5,2
	.word	.L376
	.byte	3,148,2,1,5,5,9
	.half	.L1759-.L376
	.byte	3,102,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,7,0,5,2
	.word	.L376
	.byte	3,158,2,1,5,5,9
	.half	.L1759-.L376
	.byte	3,92,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,11,0,5,2
	.word	.L376
	.byte	3,229,3,1,5,5,9
	.half	.L1759-.L376
	.byte	3,149,126,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,3,0,5,2
	.word	.L376
	.byte	3,200,4,1,5,5,9
	.half	.L1759-.L376
	.byte	3,178,125,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,5,0,5,2
	.word	.L376
	.byte	3,214,8,1,9
	.half	.L1759-.L376
	.byte	3,164,121,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,7,0,5,2
	.word	.L376
	.byte	3,224,8,1,5,5,9
	.half	.L1759-.L376
	.byte	3,154,121,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,3,0,5,2
	.word	.L376
	.byte	3,251,8,1,5,5,9
	.half	.L1759-.L376
	.byte	3,255,120,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,7,0,5,2
	.word	.L376
	.byte	3,149,11,1,5,5,9
	.half	.L1759-.L376
	.byte	3,229,118,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,7,0,5,2
	.word	.L376
	.byte	3,150,11,1,5,5,9
	.half	.L1759-.L376
	.byte	3,228,118,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,7,0,5,2
	.word	.L376
	.byte	3,152,11,1,5,5,9
	.half	.L1759-.L376
	.byte	3,226,118,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,11,0,5,2
	.word	.L376
	.byte	3,204,11,1,5,5,9
	.half	.L1759-.L376
	.byte	3,174,118,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,15,0,5,2
	.word	.L376
	.byte	3,253,11,1,5,5,9
	.half	.L1759-.L376
	.byte	3,253,117,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,9,0,5,2
	.word	.L376
	.byte	3,136,12,1,5,5,9
	.half	.L1759-.L376
	.byte	3,242,117,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1,5,21,0,5,2
	.word	.L376
	.byte	3,249,13,1,5,5,9
	.half	.L1759-.L376
	.byte	3,129,116,1,7,9
	.half	.L497-.L1759
	.byte	0,1,1
.L1756:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_85')
	.sect	'.debug_ranges'
.L496:
	.word	-1,.L376,0,.L497-.L376,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_86')
	.sect	'.debug_info'
.L498:
	.word	197
	.half	3
	.word	.L499
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L501,.L500
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_86',0,1,245,8,1,1
	.word	.L422,.L502,.L421
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_86')
	.sect	'.debug_abbrev'
.L499:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_86')
	.sect	'.debug_line'
.L500:
	.word	.L1761-.L1760
.L1760:
	.half	3
	.word	.L1763-.L1762
.L1762:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1763:
	.byte	5,20,7,0,5,2
	.word	.L422
	.byte	3,203,11,1,5,11,9
	.half	.L1764-.L422
	.byte	3,1,1,9
	.half	.L502-.L1764
	.byte	0,1,1,5,20,0,5,2
	.word	.L422
	.byte	3,203,11,1,5,11,9
	.half	.L1764-.L422
	.byte	3,1,1,5,21,9
	.half	.L969-.L1764
	.byte	3,173,2,1,5,11,9
	.half	.L1765-.L969
	.byte	3,211,125,1,7,9
	.half	.L502-.L1765
	.byte	0,1,1
.L1761:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_86')
	.sect	'.debug_ranges'
.L501:
	.word	-1,.L422,0,.L502-.L422,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_87')
	.sect	'.debug_info'
.L503:
	.word	197
	.half	3
	.word	.L504
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L506,.L505
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_87',0,1,246,4,1,1
	.word	.L388,.L507,.L387
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_87')
	.sect	'.debug_abbrev'
.L504:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_87')
	.sect	'.debug_line'
.L505:
	.word	.L1767-.L1766
.L1766:
	.half	3
	.word	.L1769-.L1768
.L1768:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1769:
	.byte	5,49,7,0,5,2
	.word	.L388
	.byte	3,136,5,1,5,57,9
	.half	.L1770-.L388
	.byte	1,5,56,9
	.half	.L835-.L1770
	.byte	3,1,1,7,9
	.half	.L507-.L835
	.byte	0,1,1,5,31,0,5,2
	.word	.L388
	.byte	3,202,7,1,5,57,9
	.half	.L1770-.L388
	.byte	3,190,125,1,5,56,9
	.half	.L835-.L1770
	.byte	3,1,1,7,9
	.half	.L507-.L835
	.byte	0,1,1
.L1767:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_87')
	.sect	'.debug_ranges'
.L506:
	.word	-1,.L388,0,.L507-.L388,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_88')
	.sect	'.debug_info'
.L508:
	.word	197
	.half	3
	.word	.L509
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L511,.L510
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_88',0,1,245,8,1,1
	.word	.L420,.L512,.L419
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_88')
	.sect	'.debug_abbrev'
.L509:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_88')
	.sect	'.debug_line'
.L510:
	.word	.L1772-.L1771
.L1771:
	.half	3
	.word	.L1774-.L1773
.L1773:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1774:
	.byte	5,20,7,0,5,2
	.word	.L420
	.byte	3,233,11,1,9
	.half	.L512-.L420
	.byte	0,1,1,5,18,0,5,2
	.word	.L420
	.byte	3,184,11,1,5,20,9
	.half	.L1775-.L420
	.byte	3,49,1,7,9
	.half	.L512-.L1775
	.byte	0,1,1,5,15,0,5,2
	.word	.L420
	.byte	3,191,11,1,5,20,9
	.half	.L1775-.L420
	.byte	3,42,1,7,9
	.half	.L512-.L1775
	.byte	0,1,1,5,13,0,5,2
	.word	.L420
	.byte	3,194,11,1,5,20,9
	.half	.L1775-.L420
	.byte	3,39,1,7,9
	.half	.L512-.L1775
	.byte	0,1,1,5,15,0,5,2
	.word	.L420
	.byte	3,199,11,1,5,20,9
	.half	.L1775-.L420
	.byte	3,34,1,7,9
	.half	.L512-.L1775
	.byte	0,1,1,5,20,0,5,2
	.word	.L420
	.byte	3,203,11,1,9
	.half	.L1775-.L420
	.byte	3,30,1,7,9
	.half	.L512-.L1775
	.byte	0,1,1,5,15,0,5,2
	.word	.L420
	.byte	3,212,11,1,5,20,9
	.half	.L1775-.L420
	.byte	3,21,1,7,9
	.half	.L512-.L1775
	.byte	0,1,1,5,26,0,5,2
	.word	.L420
	.byte	3,235,11,1,5,20,9
	.half	.L1775-.L420
	.byte	3,126,1,7,9
	.half	.L512-.L1775
	.byte	0,1,1,5,19,0,5,2
	.word	.L420
	.byte	3,248,11,1,5,20,9
	.half	.L1775-.L420
	.byte	3,113,1,7,9
	.half	.L512-.L1775
	.byte	0,1,1,5,24,0,5,2
	.word	.L420
	.byte	3,252,11,1,5,20,9
	.half	.L1775-.L420
	.byte	3,109,1,7,9
	.half	.L512-.L1775
	.byte	0,1,1,5,13,0,5,2
	.word	.L420
	.byte	3,157,12,1,5,20,9
	.half	.L1775-.L420
	.byte	3,76,1,7,9
	.half	.L512-.L1775
	.byte	0,1,1
.L1772:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_88')
	.sect	'.debug_ranges'
.L511:
	.word	-1,.L420,0,.L512-.L420,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_89')
	.sect	'.debug_info'
.L513:
	.word	197
	.half	3
	.word	.L514
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L516,.L515
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_89',0,1,245,8,1,1
	.word	.L418,.L517,.L417
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_89')
	.sect	'.debug_abbrev'
.L514:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_89')
	.sect	'.debug_line'
.L515:
	.word	.L1777-.L1776
.L1776:
	.half	3
	.word	.L1779-.L1778
.L1778:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1779:
	.byte	5,11,7,0,5,2
	.word	.L418
	.byte	3,172,12,1,9
	.half	.L517-.L418
	.byte	0,1,1,5,7,0,5,2
	.word	.L418
	.byte	3,183,6,1,5,11,9
	.half	.L1780-.L418
	.byte	3,245,5,1,7,9
	.half	.L517-.L1780
	.byte	0,1,1,5,9,0,5,2
	.word	.L418
	.byte	3,235,6,1,5,11,9
	.half	.L1780-.L418
	.byte	3,193,5,1,7,9
	.half	.L517-.L1780
	.byte	0,1,1,5,11,0,5,2
	.word	.L418
	.byte	3,243,6,1,9
	.half	.L1780-.L418
	.byte	3,185,5,1,7,9
	.half	.L517-.L1780
	.byte	0,1,1,5,13,0,5,2
	.word	.L418
	.byte	3,167,7,1,5,11,9
	.half	.L1780-.L418
	.byte	3,133,5,1,7,9
	.half	.L517-.L1780
	.byte	0,1,1
.L1777:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_89')
	.sect	'.debug_ranges'
.L516:
	.word	-1,.L418,0,.L517-.L418,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_90')
	.sect	'.debug_info'
.L518:
	.word	197
	.half	3
	.word	.L519
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L521,.L520
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_90',0,1,245,8,1,1
	.word	.L416,.L522,.L415
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_90')
	.sect	'.debug_abbrev'
.L519:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_90')
	.sect	'.debug_line'
.L520:
	.word	.L1782-.L1781
.L1781:
	.half	3
	.word	.L1784-.L1783
.L1783:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1784:
	.byte	5,38,7,0,5,2
	.word	.L416
	.byte	3,243,12,1,9
	.half	.L522-.L416
	.byte	0,1,1,5,19,0,5,2
	.word	.L416
	.byte	3,148,13,1,5,38,9
	.half	.L1785-.L416
	.byte	3,95,1,7,9
	.half	.L522-.L1785
	.byte	0,1,1,5,56,0,5,2
	.word	.L416
	.byte	3,175,13,1,5,38,9
	.half	.L1785-.L416
	.byte	3,68,1,7,9
	.half	.L522-.L1785
	.byte	0,1,1,5,56,0,5,2
	.word	.L416
	.byte	3,191,13,1,5,38,9
	.half	.L1785-.L416
	.byte	3,180,127,1,7,9
	.half	.L522-.L1785
	.byte	0,1,1,5,44,0,5,2
	.word	.L416
	.byte	3,227,13,1,5,38,9
	.half	.L1785-.L416
	.byte	3,144,127,1,7,9
	.half	.L522-.L1785
	.byte	0,1,1
.L1782:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_90')
	.sect	'.debug_ranges'
.L521:
	.word	-1,.L416,0,.L522-.L416,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_91')
	.sect	'.debug_info'
.L523:
	.word	196
	.half	3
	.word	.L524
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L526,.L525
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_91',0,1,118,1,1
	.word	.L374,.L527,.L373
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_91')
	.sect	'.debug_abbrev'
.L524:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_91')
	.sect	'.debug_line'
.L525:
	.word	.L1787-.L1786
.L1786:
	.half	3
	.word	.L1789-.L1788
.L1788:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1789:
	.byte	5,9,7,0,5,2
	.word	.L374
	.byte	3,175,3,1,9
	.half	.L527-.L374
	.byte	0,1,1,5,7,0,5,2
	.word	.L374
	.byte	3,193,4,1,5,9,9
	.half	.L797-.L374
	.byte	3,238,126,1,7,9
	.half	.L527-.L797
	.byte	0,1,1,5,3,0,5,2
	.word	.L374
	.byte	3,204,4,1,5,9,9
	.half	.L797-.L374
	.byte	3,227,126,1,7,9
	.half	.L527-.L797
	.byte	0,1,1
.L1787:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_91')
	.sect	'.debug_ranges'
.L526:
	.word	-1,.L374,0,.L527-.L374,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_92')
	.sect	'.debug_info'
.L528:
	.word	197
	.half	3
	.word	.L529
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L531,.L530
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_92',0,1,246,4,1,1
	.word	.L386,.L532,.L385
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_92')
	.sect	'.debug_abbrev'
.L529:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_92')
	.sect	'.debug_line'
.L530:
	.word	.L1791-.L1790
.L1790:
	.half	3
	.word	.L1793-.L1792
.L1792:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1793:
	.byte	5,21,7,0,5,2
	.word	.L386
	.byte	3,189,5,1,5,27,9
	.half	.L1794-.L386
	.byte	1,5,19,9
	.half	.L1795-.L1794
	.byte	1,5,23,9
	.half	.L1796-.L1795
	.byte	3,1,1,9
	.half	.L532-.L1796
	.byte	0,1,1,5,24,0,5,2
	.word	.L386
	.byte	3,222,6,1,5,30,9
	.half	.L1794-.L386
	.byte	1,5,22,9
	.half	.L1795-.L1794
	.byte	1,5,26,9
	.half	.L1796-.L1795
	.byte	3,1,1,5,23,9
	.half	.L1797-.L1796
	.byte	3,223,126,1,7,9
	.half	.L532-.L1797
	.byte	0,1,1
.L1791:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_92')
	.sect	'.debug_ranges'
.L531:
	.word	-1,.L386,0,.L532-.L386,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_93')
	.sect	'.debug_info'
.L533:
	.word	197
	.half	3
	.word	.L534
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L536,.L535
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_93',0,1,148,6,1,1
	.word	.L398,.L537,.L397
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_93')
	.sect	'.debug_abbrev'
.L534:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_93')
	.sect	'.debug_line'
.L535:
	.word	.L1799-.L1798
.L1798:
	.half	3
	.word	.L1801-.L1800
.L1800:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1801:
	.byte	5,9,7,0,5,2
	.word	.L398
	.byte	3,177,6,1,9
	.half	.L537-.L398
	.byte	0,1,1,5,9,0,5,2
	.word	.L398
	.byte	3,137,7,1,9
	.half	.L853-.L398
	.byte	3,168,127,1,7,9
	.half	.L537-.L853
	.byte	0,1,1,5,9,0,5,2
	.word	.L398
	.byte	3,215,7,1,9
	.half	.L853-.L398
	.byte	3,218,126,1,7,9
	.half	.L537-.L853
	.byte	0,1,1,5,9,0,5,2
	.word	.L398
	.byte	3,244,7,1,9
	.half	.L853-.L398
	.byte	3,189,126,1,7,9
	.half	.L537-.L853
	.byte	0,1,1
.L1799:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_93')
	.sect	'.debug_ranges'
.L536:
	.word	-1,.L398,0,.L537-.L398,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_94')
	.sect	'.debug_info'
.L538:
	.word	197
	.half	3
	.word	.L539
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L541,.L540
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_94',0,1,245,8,1,1
	.word	.L414,.L542,.L413
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_94')
	.sect	'.debug_abbrev'
.L539:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_94')
	.sect	'.debug_line'
.L540:
	.word	.L1803-.L1802
.L1802:
	.half	3
	.word	.L1805-.L1804
.L1804:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1805:
	.byte	5,17,7,0,5,2
	.word	.L414
	.byte	3,190,9,1,9
	.half	.L542-.L414
	.byte	0,1,1,5,13,0,5,2
	.word	.L414
	.byte	3,247,9,1,5,17,9
	.half	.L1806-.L414
	.byte	3,71,1,7,9
	.half	.L542-.L1806
	.byte	0,1,1
.L1803:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_94')
	.sect	'.debug_ranges'
.L541:
	.word	-1,.L414,0,.L542-.L414,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_95')
	.sect	'.debug_info'
.L543:
	.word	197
	.half	3
	.word	.L544
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L546,.L545
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_95',0,1,245,8,1,1
	.word	.L412,.L547,.L411
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_95')
	.sect	'.debug_abbrev'
.L544:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_95')
	.sect	'.debug_line'
.L545:
	.word	.L1808-.L1807
.L1807:
	.half	3
	.word	.L1810-.L1809
.L1809:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1810:
	.byte	5,20,7,0,5,2
	.word	.L412
	.byte	3,228,11,1,9
	.half	.L547-.L412
	.byte	0,1,1,5,20,0,5,2
	.word	.L412
	.byte	3,228,11,1,5,15,9
	.half	.L979-.L412
	.byte	3,25,1,5,20,9
	.half	.L1811-.L979
	.byte	3,103,1,7,9
	.half	.L547-.L1811
	.byte	0,1,1
.L1808:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_95')
	.sect	'.debug_ranges'
.L546:
	.word	-1,.L412,0,.L547-.L412,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_96')
	.sect	'.debug_info'
.L548:
	.word	196
	.half	3
	.word	.L549
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L551,.L550
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_96',0,1,118,1,1
	.word	.L372,.L552,.L371
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_96')
	.sect	'.debug_abbrev'
.L549:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_96')
	.sect	'.debug_line'
.L550:
	.word	.L1813-.L1812
.L1812:
	.half	3
	.word	.L1815-.L1814
.L1814:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1815:
	.byte	5,11,7,0,5,2
	.word	.L372
	.byte	3,233,1,1,9
	.half	.L552-.L372
	.byte	0,1,1,5,31,0,5,2
	.word	.L372
	.byte	3,166,2,1,5,25,9
	.half	.L1816-.L372
	.byte	3,222,0,1,5,11,9
	.half	.L1817-.L1816
	.byte	3,229,126,1,7,9
	.half	.L552-.L1817
	.byte	0,1,1,5,11,0,5,2
	.word	.L372
	.byte	3,191,4,1,9
	.half	.L1817-.L372
	.byte	3,170,125,1,7,9
	.half	.L552-.L1817
	.byte	0,1,1
.L1813:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_96')
	.sect	'.debug_ranges'
.L551:
	.word	-1,.L372,0,.L552-.L372,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_97')
	.sect	'.debug_info'
.L553:
	.word	196
	.half	3
	.word	.L554
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L556,.L555
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_97',0,1,118,1,1
	.word	.L370,.L557,.L369
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_97')
	.sect	'.debug_abbrev'
.L554:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_97')
	.sect	'.debug_line'
.L555:
	.word	.L1819-.L1818
.L1818:
	.half	3
	.word	.L1821-.L1820
.L1820:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1821:
	.byte	5,28,7,0,5,2
	.word	.L370
	.byte	3,128,2,1,9
	.half	.L557-.L370
	.byte	0,1,1,5,30,0,5,2
	.word	.L370
	.byte	3,162,2,1,5,28,9
	.half	.L1822-.L370
	.byte	3,94,1,7,9
	.half	.L557-.L1822
	.byte	0,1,1
.L1819:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_97')
	.sect	'.debug_ranges'
.L556:
	.word	-1,.L370,0,.L557-.L370,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_98')
	.sect	'.debug_info'
.L558:
	.word	196
	.half	3
	.word	.L559
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L561,.L560
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_98',0,1,118,1,1
	.word	.L368,.L562,.L367
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_98')
	.sect	'.debug_abbrev'
.L559:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_98')
	.sect	'.debug_line'
.L560:
	.word	.L1824-.L1823
.L1823:
	.half	3
	.word	.L1826-.L1825
.L1825:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1826:
	.byte	5,29,7,0,5,2
	.word	.L368
	.byte	3,133,2,1,5,12,9
	.half	.L1827-.L368
	.byte	1,5,35,9
	.half	.L1828-.L1827
	.byte	1,9
	.half	.L562-.L1828
	.byte	0,1,1,5,31,0,5,2
	.word	.L368
	.byte	3,166,2,1,5,14,9
	.half	.L1827-.L368
	.byte	1,5,37,9
	.half	.L1828-.L1827
	.byte	1,5,35,9
	.half	.L1829-.L1828
	.byte	3,95,1,7,9
	.half	.L562-.L1829
	.byte	0,1,1
.L1824:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_98')
	.sect	'.debug_ranges'
.L561:
	.word	-1,.L368,0,.L562-.L368,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_99')
	.sect	'.debug_info'
.L563:
	.word	197
	.half	3
	.word	.L564
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L566,.L565
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_99',0,1,148,6,1,1
	.word	.L396,.L567,.L395
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_99')
	.sect	'.debug_abbrev'
.L564:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_99')
	.sect	'.debug_line'
.L565:
	.word	.L1831-.L1830
.L1830:
	.half	3
	.word	.L1833-.L1832
.L1832:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1833:
	.byte	5,40,7,0,5,2
	.word	.L396
	.byte	3,235,7,1,5,52,9
	.half	.L1834-.L396
	.byte	1,9
	.half	.L567-.L1834
	.byte	0,1,1,5,32,0,5,2
	.word	.L396
	.byte	3,253,7,1,5,44,9
	.half	.L1834-.L396
	.byte	1,5,52,9
	.half	.L1835-.L1834
	.byte	3,110,1,7,9
	.half	.L567-.L1835
	.byte	0,1,1,5,32,0,5,2
	.word	.L396
	.byte	3,135,8,1,5,44,9
	.half	.L1834-.L396
	.byte	1,5,52,9
	.half	.L1835-.L1834
	.byte	3,100,1,7,9
	.half	.L567-.L1835
	.byte	0,1,1
.L1831:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_99')
	.sect	'.debug_ranges'
.L566:
	.word	-1,.L396,0,.L567-.L396,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_100')
	.sect	'.debug_info'
.L568:
	.word	198
	.half	3
	.word	.L569
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L571,.L570
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_100',0,1,245,8,1,1
	.word	.L410,.L572,.L409
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_100')
	.sect	'.debug_abbrev'
.L569:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_100')
	.sect	'.debug_line'
.L570:
	.word	.L1837-.L1836
.L1836:
	.half	3
	.word	.L1839-.L1838
.L1838:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1839:
	.byte	5,25,7,0,5,2
	.word	.L410
	.byte	3,240,13,1,9
	.half	.L572-.L410
	.byte	0,1,1,5,23,0,5,2
	.word	.L410
	.byte	3,243,13,1,5,25,9
	.half	.L1840-.L410
	.byte	3,125,1,7,9
	.half	.L572-.L1840
	.byte	0,1,1,5,30,0,5,2
	.word	.L410
	.byte	3,248,13,1,5,25,9
	.half	.L1840-.L410
	.byte	3,120,1,7,9
	.half	.L572-.L1840
	.byte	0,1,1
.L1837:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_100')
	.sect	'.debug_ranges'
.L571:
	.word	-1,.L410,0,.L572-.L410,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_101')
	.sect	'.debug_info'
.L573:
	.word	198
	.half	3
	.word	.L574
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L576,.L575
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_101',0,1,246,4,1,1
	.word	.L390,.L577,.L389
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_101')
	.sect	'.debug_abbrev'
.L574:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_101')
	.sect	'.debug_line'
.L575:
	.word	.L1842-.L1841
.L1841:
	.half	3
	.word	.L1844-.L1843
.L1843:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1844:
	.byte	5,57,7,0,5,2
	.word	.L390
	.byte	3,136,5,1,5,65,9
	.half	.L1845-.L390
	.byte	1,5,55,9
	.half	.L1846-.L1845
	.byte	1,5,13,3,1,1,5,42,9
	.half	.L1847-.L1846
	.byte	1,5,56,9
	.half	.L1848-.L1847
	.byte	1,9
	.half	.L577-.L1848
	.byte	0,1,1,5,39,0,5,2
	.word	.L390
	.byte	3,202,7,1,5,47,9
	.half	.L1845-.L390
	.byte	1,5,37,9
	.half	.L1846-.L1845
	.byte	1,5,19,3,1,1,5,48,9
	.half	.L1847-.L1846
	.byte	1,5,62,9
	.half	.L1848-.L1847
	.byte	1,5,56,9
	.half	.L1849-.L1848
	.byte	3,190,125,1,7,9
	.half	.L577-.L1849
	.byte	0,1,1,5,37,0,5,2
	.word	.L390
	.byte	3,142,7,1,5,45,9
	.half	.L1845-.L390
	.byte	1,5,35,9
	.half	.L1846-.L1845
	.byte	1,5,17,3,1,1,5,46,9
	.half	.L1847-.L1846
	.byte	1,5,60,9
	.half	.L1848-.L1847
	.byte	1,5,56,9
	.half	.L1849-.L1848
	.byte	3,250,125,1,7,9
	.half	.L577-.L1849
	.byte	0,1,1
.L1842:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_101')
	.sect	'.debug_ranges'
.L576:
	.word	-1,.L390,0,.L577-.L390,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_102')
	.sect	'.debug_info'
.L578:
	.word	198
	.half	3
	.word	.L579
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L581,.L580
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_102',0,1,246,4,1,1
	.word	.L384,.L582,.L383
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_102')
	.sect	'.debug_abbrev'
.L579:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_102')
	.sect	'.debug_line'
.L580:
	.word	.L1851-.L1850
.L1850:
	.half	3
	.word	.L1853-.L1852
.L1852:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1853:
	.byte	5,50,7,0,5,2
	.word	.L384
	.byte	3,137,5,1,5,13,9
	.half	.L1854-.L384
	.byte	1,9
	.half	.L582-.L1854
	.byte	0,1,1,5,54,0,5,2
	.word	.L384
	.byte	3,143,7,1,5,17,9
	.half	.L1854-.L384
	.byte	1,5,13,9
	.half	.L1855-.L1854
	.byte	3,250,125,1,7,9
	.half	.L582-.L1855
	.byte	0,1,1,5,56,0,5,2
	.word	.L384
	.byte	3,203,7,1,5,19,9
	.half	.L1854-.L384
	.byte	1,5,13,9
	.half	.L1855-.L1854
	.byte	3,190,125,1,7,9
	.half	.L582-.L1855
	.byte	0,1,1
.L1851:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_102')
	.sect	'.debug_ranges'
.L581:
	.word	-1,.L384,0,.L582-.L384,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_103')
	.sect	'.debug_info'
.L583:
	.word	198
	.half	3
	.word	.L584
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L586,.L585
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_103',0,1,245,8,1,1
	.word	.L408,.L587,.L407
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_103')
	.sect	'.debug_abbrev'
.L584:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_103')
	.sect	'.debug_line'
.L585:
	.word	.L1857-.L1856
.L1856:
	.half	3
	.word	.L1859-.L1858
.L1858:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1859:
	.byte	5,26,7,0,5,2
	.word	.L408
	.byte	3,235,11,1,5,24,9
	.half	.L1860-.L408
	.byte	1,9
	.half	.L587-.L1860
	.byte	0,1,1,5,24,0,5,2
	.word	.L408
	.byte	3,252,11,1,5,22,9
	.half	.L1860-.L408
	.byte	1,5,24,9
	.half	.L977-.L1860
	.byte	3,111,1,7,9
	.half	.L587-.L977
	.byte	0,1,1,5,20,0,5,2
	.word	.L408
	.byte	3,203,11,1,5,18,9
	.half	.L1860-.L408
	.byte	1,5,24,9
	.half	.L977-.L1860
	.byte	3,32,1,7,9
	.half	.L587-.L977
	.byte	0,1,1,5,30,0,5,2
	.word	.L408
	.byte	3,248,13,1,5,28,9
	.half	.L1860-.L408
	.byte	1,5,24,9
	.half	.L977-.L1860
	.byte	3,243,125,1,7,9
	.half	.L587-.L977
	.byte	0,1,1
.L1857:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_103')
	.sect	'.debug_ranges'
.L586:
	.word	-1,.L408,0,.L587-.L408,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_104')
	.sect	'.debug_info'
.L588:
	.word	198
	.half	3
	.word	.L589
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L591,.L590
	.byte	2
	.word	.L429
	.byte	3
	.byte	'.cocofun_104',0,1,245,8,1,1
	.word	.L406,.L592,.L405
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_104')
	.sect	'.debug_abbrev'
.L589:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_104')
	.sect	'.debug_line'
.L590:
	.word	.L1862-.L1861
.L1861:
	.half	3
	.word	.L1864-.L1863
.L1863:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0,0,0,0,0
.L1864:
	.byte	5,17,7,0,5,2
	.word	.L406
	.byte	3,244,11,1,9
	.half	.L592-.L406
	.byte	0,1,1,5,20,0,5,2
	.word	.L406
	.byte	3,228,11,1,5,17,9
	.half	.L1865-.L406
	.byte	3,16,1,7,9
	.half	.L592-.L1865
	.byte	0,1,1,5,15,0,5,2
	.word	.L406
	.byte	3,253,11,1,5,17,9
	.half	.L1865-.L406
	.byte	3,119,1,7,9
	.half	.L592-.L1865
	.byte	0,1,1,5,11,0,5,2
	.word	.L406
	.byte	3,204,11,1,5,17,9
	.half	.L1865-.L406
	.byte	3,40,1,7,9
	.half	.L592-.L1865
	.byte	0,1,1,5,21,0,5,2
	.word	.L406
	.byte	3,249,13,1,5,17,9
	.half	.L1865-.L406
	.byte	3,251,125,1,7,9
	.half	.L592-.L1865
	.byte	0,1,1
.L1862:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_104')
	.sect	'.debug_ranges'
.L591:
	.word	-1,.L406,0,.L592-.L406,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_input_pcb')
	.sect	'.debug_info'
.L593:
	.word	188
	.half	3
	.word	.L594
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L429
	.byte	3
	.byte	'tcp_input_pcb',0,12,88,17
	.word	.L627
	.byte	1,5,3
	.word	tcp_input_pcb
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_input_pcb')
	.sect	'.debug_abbrev'
.L594:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('inseg')
	.sect	'.debug_info'
.L595:
	.word	179
	.half	3
	.word	.L596
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L429
	.byte	3
	.byte	'inseg',0,12,74,23
	.word	.L722
	.byte	5,3
	.word	inseg
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('inseg')
	.sect	'.debug_abbrev'
.L596:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('tcphdr')
	.sect	'.debug_info'
.L597:
	.word	180
	.half	3
	.word	.L598
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L429
	.byte	3
	.byte	'tcphdr',0,12,75,24
	.word	.L723
	.byte	5,3
	.word	tcphdr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcphdr')
	.sect	'.debug_abbrev'
.L598:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('tcphdr_optlen')
	.sect	'.debug_info'
.L599:
	.word	187
	.half	3
	.word	.L600
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L429
	.byte	3
	.byte	'tcphdr_optlen',0,12,76,14
	.word	.L636
	.byte	5,3
	.word	tcphdr_optlen
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcphdr_optlen')
	.sect	'.debug_abbrev'
.L600:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('tcphdr_opt1len')
	.sect	'.debug_info'
.L601:
	.word	188
	.half	3
	.word	.L602
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L429
	.byte	3
	.byte	'tcphdr_opt1len',0,12,77,14
	.word	.L636
	.byte	5,3
	.word	tcphdr_opt1len
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcphdr_opt1len')
	.sect	'.debug_abbrev'
.L602:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('tcphdr_opt2')
	.sect	'.debug_info'
.L603:
	.word	185
	.half	3
	.word	.L604
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L429
	.byte	3
	.byte	'tcphdr_opt2',0,12,78,14
	.word	.L724
	.byte	5,3
	.word	tcphdr_opt2
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcphdr_opt2')
	.sect	'.debug_abbrev'
.L604:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_optidx')
	.sect	'.debug_info'
.L605:
	.word	184
	.half	3
	.word	.L606
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L429
	.byte	3
	.byte	'tcp_optidx',0,12,79,14
	.word	.L636
	.byte	5,3
	.word	tcp_optidx
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_optidx')
	.sect	'.debug_abbrev'
.L606:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('seqno')
	.sect	'.debug_info'
.L607:
	.word	179
	.half	3
	.word	.L608
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L429
	.byte	3
	.byte	'seqno',0,12,80,14
	.word	.L660
	.byte	5,3
	.word	seqno
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('seqno')
	.sect	'.debug_abbrev'
.L608:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('ackno')
	.sect	'.debug_info'
.L609:
	.word	179
	.half	3
	.word	.L610
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L429
	.byte	3
	.byte	'ackno',0,12,80,21
	.word	.L660
	.byte	5,3
	.word	ackno
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('ackno')
	.sect	'.debug_abbrev'
.L610:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('recv_acked')
	.sect	'.debug_info'
.L611:
	.word	184
	.half	3
	.word	.L612
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L429
	.byte	3
	.byte	'recv_acked',0,12,81,22
	.word	.L636
	.byte	5,3
	.word	recv_acked
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('recv_acked')
	.sect	'.debug_abbrev'
.L612:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('tcplen')
	.sect	'.debug_info'
.L613:
	.word	180
	.half	3
	.word	.L614
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L429
	.byte	3
	.byte	'tcplen',0,12,82,14
	.word	.L636
	.byte	5,3
	.word	tcplen
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tcplen')
	.sect	'.debug_abbrev'
.L614:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('flags')
	.sect	'.debug_info'
.L615:
	.word	179
	.half	3
	.word	.L616
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L429
	.byte	3
	.byte	'flags',0,12,83,13
	.word	.L632
	.byte	5,3
	.word	flags
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('flags')
	.sect	'.debug_abbrev'
.L616:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('recv_flags')
	.sect	'.debug_info'
.L617:
	.word	184
	.half	3
	.word	.L618
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L429
	.byte	3
	.byte	'recv_flags',0,12,85,13
	.word	.L632
	.byte	5,3
	.word	recv_flags
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('recv_flags')
	.sect	'.debug_abbrev'
.L618:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('recv_data')
	.sect	'.debug_info'
.L619:
	.word	183
	.half	3
	.word	.L620
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_in.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L429
	.byte	3
	.byte	'recv_data',0,12,86,21
	.word	.L622
	.byte	5,3
	.word	recv_data
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('recv_data')
	.sect	'.debug_abbrev'
.L620:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_100')
	.sect	'.debug_loc'
.L409:
	.word	-1,.L410,0,.L572-.L410
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_101')
	.sect	'.debug_loc'
.L389:
	.word	-1,.L390,0,.L577-.L390
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_102')
	.sect	'.debug_loc'
.L383:
	.word	-1,.L384,0,.L582-.L384
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_103')
	.sect	'.debug_loc'
.L407:
	.word	-1,.L408,0,.L587-.L408
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_104')
	.sect	'.debug_loc'
.L405:
	.word	-1,.L406,0,.L592-.L406
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_84')
	.sect	'.debug_loc'
.L377:
	.word	-1,.L378,0,.L492-.L378
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_85')
	.sect	'.debug_loc'
.L375:
	.word	-1,.L376,0,.L497-.L376
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_86')
	.sect	'.debug_loc'
.L421:
	.word	-1,.L422,0,.L502-.L422
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_87')
	.sect	'.debug_loc'
.L387:
	.word	-1,.L388,0,.L507-.L388
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_88')
	.sect	'.debug_loc'
.L419:
	.word	-1,.L420,0,.L512-.L420
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_89')
	.sect	'.debug_loc'
.L417:
	.word	-1,.L418,0,.L517-.L418
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_90')
	.sect	'.debug_loc'
.L415:
	.word	-1,.L416,0,.L522-.L416
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_91')
	.sect	'.debug_loc'
.L373:
	.word	-1,.L374,0,.L527-.L374
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_92')
	.sect	'.debug_loc'
.L385:
	.word	-1,.L386,0,.L532-.L386
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_93')
	.sect	'.debug_loc'
.L397:
	.word	-1,.L398,0,.L537-.L398
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_94')
	.sect	'.debug_loc'
.L413:
	.word	-1,.L414,0,.L542-.L414
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_95')
	.sect	'.debug_loc'
.L411:
	.word	-1,.L412,0,.L547-.L412
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_96')
	.sect	'.debug_loc'
.L371:
	.word	-1,.L372,0,.L552-.L372
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_97')
	.sect	'.debug_loc'
.L369:
	.word	-1,.L370,0,.L557-.L370
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_98')
	.sect	'.debug_loc'
.L367:
	.word	-1,.L368,0,.L562-.L368
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_99')
	.sect	'.debug_loc'
.L395:
	.word	-1,.L396,0,.L567-.L396
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_free_acked_segments')
	.sect	'.debug_loc'
.L718:
	.word	-1,.L402,.L921-.L402,.L915-.L402
	.half	1
	.byte	82
	.word	.L922-.L402,.L915-.L402
	.half	1
	.byte	88
	.word	.L376-.L402,.L497-.L402
	.half	1
	.byte	82
	.word	.L376-.L402,.L497-.L402
	.half	1
	.byte	88
	.word	.L378-.L402,.L492-.L402
	.half	1
	.byte	82
	.word	.L378-.L402,.L492-.L402
	.half	1
	.byte	88
	.word	.L923-.L402,.L221-.L402
	.half	1
	.byte	82
	.word	.L923-.L402,.L924-.L402
	.half	1
	.byte	88
	.word	.L927-.L402,.L219-.L402
	.half	1
	.byte	88
	.word	0,0
.L715:
	.word	-1,.L402,0,.L220-.L402
	.half	1
	.byte	102
	.word	0,0
.L716:
	.word	-1,.L402,0,.L220-.L402
	.half	1
	.byte	103
	.word	.L917-.L402,.L915-.L402
	.half	1
	.byte	110
	.word	.L376-.L402,.L497-.L402
	.half	1
	.byte	110
	.word	.L378-.L402,.L492-.L402
	.half	1
	.byte	110
	.word	.L923-.L402,.L924-.L402
	.half	1
	.byte	110
	.word	.L927-.L402,.L711-.L402
	.half	1
	.byte	110
	.word	0,0
.L717:
	.word	-1,.L402,.L918-.L402,.L915-.L402
	.half	2
	.byte	145,124
	.word	.L919-.L402,.L920-.L402
	.half	1
	.byte	111
	.word	.L376-.L402,.L497-.L402
	.half	2
	.byte	145,124
	.word	.L378-.L402,.L492-.L402
	.half	2
	.byte	145,124
	.word	.L923-.L402,.L924-.L402
	.half	2
	.byte	145,124
	.word	.L925-.L402,.L926-.L402
	.half	1
	.byte	100
	.word	.L927-.L402,.L219-.L402
	.half	2
	.byte	145,124
	.word	0,0
.L712:
	.word	-1,.L402,0,.L220-.L402
	.half	1
	.byte	100
	.word	.L914-.L402,.L915-.L402
	.half	1
	.byte	108
	.word	.L376-.L402,.L497-.L402
	.half	1
	.byte	108
	.word	.L378-.L402,.L492-.L402
	.half	1
	.byte	108
	.word	.L923-.L402,.L924-.L402
	.half	1
	.byte	108
	.word	.L927-.L402,.L711-.L402
	.half	1
	.byte	108
	.word	0,0
.L713:
	.word	-1,.L402,0,.L220-.L402
	.half	1
	.byte	101
	.word	.L916-.L402,.L915-.L402
	.half	1
	.byte	109
	.word	.L376-.L402,.L497-.L402
	.half	1
	.byte	109
	.word	.L378-.L402,.L492-.L402
	.half	1
	.byte	109
	.word	.L923-.L402,.L924-.L402
	.half	1
	.byte	109
	.word	.L927-.L402,.L711-.L402
	.half	1
	.byte	109
	.word	.L928-.L402,.L711-.L402
	.half	1
	.byte	98
	.word	0,0
.L401:
	.word	-1,.L402,0,.L913-.L402
	.half	2
	.byte	138,0
	.word	.L913-.L402,.L711-.L402
	.half	2
	.byte	138,16
	.word	.L711-.L402,.L711-.L402
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_get_next_optbyte')
	.sect	'.debug_loc'
.L423:
	.word	-1,.L424,0,.L719-.L424
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_input')
	.sect	'.debug_loc'
.L637:
	.word	-1,.L366,.L737-.L366,.L738-.L366
	.half	1
	.byte	82
	.word	.L7-.L366,.L739-.L366
	.half	1
	.byte	82
	.word	0,0
.L635:
	.word	-1,.L366,.L800-.L366,.L68-.L366
	.half	1
	.byte	82
	.word	.L67-.L366,.L70-.L366
	.half	1
	.byte	82
	.word	.L812-.L366,.L79-.L366
	.half	1
	.byte	82
	.word	.L80-.L366,.L75-.L366
	.half	1
	.byte	82
	.word	.L815-.L366,.L87-.L366
	.half	1
	.byte	82
	.word	.L88-.L366,.L83-.L366
	.half	1
	.byte	82
	.word	0,0
.L633:
	.word	-1,.L366,.L740-.L366,.L741-.L366
	.half	1
	.byte	84
	.word	.L11-.L366,.L731-.L366
	.half	1
	.byte	84
	.word	.L376-.L366,.L497-.L366
	.half	1
	.byte	84
	.word	.L378-.L366,.L492-.L366
	.half	1
	.byte	84
	.word	.L748-.L366,.L13-.L366
	.half	1
	.byte	84
	.word	0,0
.L625:
	.word	-1,.L366,0,.L726-.L366
	.half	1
	.byte	101
	.word	.L376-.L366,.L497-.L366
	.half	1
	.byte	101
	.word	.L378-.L366,.L492-.L366
	.half	1
	.byte	101
	.word	.L728-.L366,.L2-.L366
	.half	1
	.byte	101
	.word	0,0
.L631:
	.word	-1,.L366,.L790-.L366,.L789-.L366
	.half	1
	.byte	100
	.word	0,0
.L638:
	.word	-1,.L366,.L753-.L366,.L754-.L366
	.half	1
	.byte	95
	.word	0,0
.L623:
	.word	-1,.L366,0,.L726-.L366
	.half	1
	.byte	100
	.word	.L727-.L366,.L726-.L366
	.half	2
	.byte	145,116
	.word	.L376-.L366,.L497-.L366
	.half	2
	.byte	145,116
	.word	.L376-.L366,.L497-.L366
	.half	1
	.byte	100
	.word	.L728-.L366,.L729-.L366
	.half	1
	.byte	100
	.word	.L378-.L366,.L492-.L366
	.half	2
	.byte	145,116
	.word	.L378-.L366,.L730-.L366
	.half	1
	.byte	100
	.word	.L728-.L366,.L731-.L366
	.half	2
	.byte	145,116
	.word	.L732-.L366,.L733-.L366
	.half	1
	.byte	111
	.word	.L734-.L366,.L735-.L366
	.half	1
	.byte	111
	.word	.L5-.L366,.L736-.L366
	.half	1
	.byte	111
	.word	.L736-.L366,.L737-.L366
	.half	1
	.byte	100
	.word	.L742-.L366,.L743-.L366
	.half	1
	.byte	111
	.word	.L744-.L366,.L745-.L366
	.half	1
	.byte	111
	.word	.L746-.L366,.L741-.L366
	.half	1
	.byte	100
	.word	.L11-.L366,.L747-.L366
	.half	1
	.byte	111
	.word	.L748-.L366,.L749-.L366
	.half	2
	.byte	145,116
	.word	.L750-.L366,.L751-.L366
	.half	1
	.byte	100
	.word	.L752-.L366,.L753-.L366
	.half	1
	.byte	100
	.word	.L755-.L366,.L756-.L366
	.half	1
	.byte	111
	.word	.L757-.L366,.L758-.L366
	.half	1
	.byte	111
	.word	.L759-.L366,.L760-.L366
	.half	2
	.byte	145,116
	.word	.L761-.L366,.L762-.L366
	.half	1
	.byte	111
	.word	.L372-.L366,.L552-.L366
	.half	2
	.byte	145,116
	.word	.L763-.L366,.L764-.L366
	.half	2
	.byte	145,116
	.word	.L765-.L366,.L3-.L366
	.half	1
	.byte	111
	.word	.L17-.L366,.L766-.L366
	.half	1
	.byte	111
	.word	.L769-.L366,.L770-.L366
	.half	2
	.byte	145,116
	.word	.L771-.L366,.L772-.L366
	.half	2
	.byte	145,116
	.word	.L773-.L366,.L774-.L366
	.half	2
	.byte	145,116
	.word	.L370-.L366,.L557-.L366
	.half	2
	.byte	145,116
	.word	.L368-.L366,.L562-.L366
	.half	2
	.byte	145,116
	.word	.L775-.L366,.L776-.L366
	.half	2
	.byte	145,116
	.word	.L777-.L366,.L778-.L366
	.half	2
	.byte	145,116
	.word	.L782-.L366,.L783-.L366
	.half	2
	.byte	145,116
	.word	.L791-.L366,.L792-.L366
	.half	1
	.byte	100
	.word	.L793-.L366,.L59-.L366
	.half	1
	.byte	111
	.word	.L374-.L366,.L797-.L366
	.half	2
	.byte	145,116
	.word	.L785-.L366,.L798-.L366
	.half	2
	.byte	145,116
	.word	.L820-.L366,.L821-.L366
	.half	2
	.byte	145,116
	.word	.L374-.L366,.L527-.L366
	.half	2
	.byte	145,116
	.word	.L822-.L366,.L823-.L366
	.half	2
	.byte	145,116
	.word	.L824-.L366,.L91-.L366
	.half	1
	.byte	100
	.word	.L825-.L366,.L621-.L366
	.half	2
	.byte	145,116
	.word	.L826-.L366,.L621-.L366
	.half	1
	.byte	100
	.word	0,0
.L628:
	.word	-1,.L366,.L768-.L366,.L764-.L366
	.half	1
	.byte	110
	.word	.L376-.L366,.L497-.L366
	.half	1
	.byte	110
	.word	.L378-.L366,.L492-.L366
	.half	1
	.byte	110
	.word	.L769-.L366,.L770-.L366
	.half	1
	.byte	110
	.word	.L771-.L366,.L772-.L366
	.half	1
	.byte	110
	.word	.L773-.L366,.L774-.L366
	.half	1
	.byte	110
	.word	.L370-.L366,.L557-.L366
	.half	1
	.byte	110
	.word	.L368-.L366,.L562-.L366
	.half	1
	.byte	110
	.word	.L775-.L366,.L776-.L366
	.half	1
	.byte	110
	.word	.L777-.L366,.L778-.L366
	.half	1
	.byte	110
	.word	.L782-.L366,.L783-.L366
	.half	1
	.byte	110
	.word	.L787-.L366,.L788-.L366
	.half	1
	.byte	100
	.word	.L372-.L366,.L552-.L366
	.half	1
	.byte	110
	.word	.L794-.L366,.L795-.L366
	.half	1
	.byte	100
	.word	.L796-.L366,.L64-.L366
	.half	1
	.byte	100
	.word	.L374-.L366,.L797-.L366
	.half	1
	.byte	110
	.word	.L785-.L366,.L798-.L366
	.half	1
	.byte	110
	.word	.L799-.L366,.L800-.L366
	.half	1
	.byte	100
	.word	.L801-.L366,.L802-.L366
	.half	1
	.byte	101
	.word	.L803-.L366,.L804-.L366
	.half	1
	.byte	100
	.word	.L805-.L366,.L806-.L366
	.half	1
	.byte	101
	.word	.L807-.L366,.L808-.L366
	.half	1
	.byte	100
	.word	.L809-.L366,.L810-.L366
	.half	1
	.byte	100
	.word	.L811-.L366,.L812-.L366
	.half	1
	.byte	101
	.word	.L813-.L366,.L80-.L366
	.half	1
	.byte	101
	.word	.L814-.L366,.L815-.L366
	.half	1
	.byte	101
	.word	.L816-.L366,.L817-.L366
	.half	1
	.byte	100
	.word	.L818-.L366,.L819-.L366
	.half	1
	.byte	100
	.word	.L820-.L366,.L821-.L366
	.half	1
	.byte	110
	.word	.L374-.L366,.L527-.L366
	.half	1
	.byte	110
	.word	.L822-.L366,.L823-.L366
	.half	1
	.byte	110
	.word	.L825-.L366,.L46-.L366
	.half	1
	.byte	110
	.word	0,0
.L629:
	.word	-1,.L366,.L766-.L366,.L21-.L366
	.half	1
	.byte	111
	.word	.L767-.L366,.L764-.L366
	.half	2
	.byte	145,108
	.word	.L768-.L366,.L764-.L366
	.half	1
	.byte	110
	.word	.L376-.L366,.L497-.L366
	.half	1
	.byte	110
	.word	.L376-.L366,.L497-.L366
	.half	2
	.byte	145,108
	.word	.L378-.L366,.L492-.L366
	.half	1
	.byte	110
	.word	.L378-.L366,.L492-.L366
	.half	2
	.byte	145,108
	.word	.L769-.L366,.L770-.L366
	.half	1
	.byte	110
	.word	.L769-.L366,.L770-.L366
	.half	2
	.byte	145,108
	.word	.L771-.L366,.L772-.L366
	.half	1
	.byte	110
	.word	.L771-.L366,.L772-.L366
	.half	2
	.byte	145,108
	.word	.L773-.L366,.L774-.L366
	.half	1
	.byte	110
	.word	.L773-.L366,.L774-.L366
	.half	2
	.byte	145,108
	.word	.L370-.L366,.L557-.L366
	.half	1
	.byte	110
	.word	.L370-.L366,.L557-.L366
	.half	2
	.byte	145,108
	.word	.L368-.L366,.L562-.L366
	.half	1
	.byte	110
	.word	.L368-.L366,.L562-.L366
	.half	2
	.byte	145,108
	.word	.L775-.L366,.L776-.L366
	.half	1
	.byte	110
	.word	.L775-.L366,.L776-.L366
	.half	2
	.byte	145,108
	.word	.L777-.L366,.L779-.L366
	.half	1
	.byte	110
	.word	.L777-.L366,.L778-.L366
	.half	2
	.byte	145,108
	.word	.L779-.L366,.L780-.L366
	.half	1
	.byte	111
	.word	.L32-.L366,.L781-.L366
	.half	1
	.byte	111
	.word	.L782-.L366,.L783-.L366
	.half	2
	.byte	145,108
	.word	.L26-.L366,.L34-.L366
	.half	1
	.byte	110
	.word	.L784-.L366,.L783-.L366
	.half	1
	.byte	110
	.word	.L785-.L366,.L786-.L366
	.half	1
	.byte	110
	.word	.L786-.L366,.L789-.L366
	.half	1
	.byte	98
	.word	.L372-.L366,.L552-.L366
	.half	2
	.byte	145,108
	.word	.L374-.L366,.L797-.L366
	.half	2
	.byte	145,108
	.word	.L785-.L366,.L798-.L366
	.half	2
	.byte	145,108
	.word	.L820-.L366,.L821-.L366
	.half	2
	.byte	145,108
	.word	.L374-.L366,.L527-.L366
	.half	2
	.byte	145,108
	.word	.L822-.L366,.L823-.L366
	.half	2
	.byte	145,108
	.word	.L825-.L366,.L46-.L366
	.half	2
	.byte	145,108
	.word	0,0
.L365:
	.word	-1,.L366,0,.L725-.L366
	.half	2
	.byte	138,0
	.word	.L725-.L366,.L94-.L366
	.half	2
	.byte	138,32
	.word	.L94-.L366,.L94-.L366
	.half	2
	.byte	138,0
	.word	.L94-.L366,.L19-.L366
	.half	2
	.byte	138,32
	.word	.L19-.L366,.L19-.L366
	.half	2
	.byte	138,0
	.word	.L19-.L366,.L621-.L366
	.half	2
	.byte	138,32
	.word	.L621-.L366,.L621-.L366
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_input_delayed_close')
	.sect	'.debug_loc'
.L706:
	.word	-1,.L380,0,.L827-.L380
	.half	1
	.byte	100
	.word	.L828-.L380,.L705-.L380
	.half	1
	.byte	111
	.word	.L829-.L380,.L830-.L380
	.half	1
	.byte	101
	.word	.L831-.L380,.L832-.L380
	.half	1
	.byte	100
	.word	.L96-.L380,.L705-.L380
	.half	1
	.byte	100
	.word	0,0
.L379:
	.word	-1,.L380,0,.L705-.L380
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_listen_input')
	.sect	'.debug_loc'
.L700:
	.word	-1,.L382,.L843-.L382,.L844-.L382
	.half	1
	.byte	82
	.word	0,0
.L699:
	.word	-1,.L382,.L837-.L382,.L838-.L382
	.half	1
	.byte	98
	.word	.L839-.L382,.L840-.L382
	.half	1
	.byte	111
	.word	.L105-.L382,.L841-.L382
	.half	1
	.byte	98
	.word	.L842-.L382,.L843-.L382
	.half	1
	.byte	100
	.word	.L845-.L382,.L846-.L382
	.half	1
	.byte	100
	.word	.L386-.L382,.L532-.L382
	.half	1
	.byte	111
	.word	.L105-.L382,.L101-.L382
	.half	1
	.byte	111
	.word	.L848-.L382,.L849-.L382
	.half	1
	.byte	100
	.word	.L850-.L382,.L108-.L382
	.half	1
	.byte	100
	.word	.L851-.L382,.L101-.L382
	.half	1
	.byte	100
	.word	0,0
.L697:
	.word	-1,.L382,0,.L833-.L382
	.half	1
	.byte	100
	.word	.L384-.L382,.L834-.L382
	.half	1
	.byte	100
	.word	.L384-.L382,.L582-.L382
	.half	1
	.byte	108
	.word	.L388-.L382,.L835-.L382
	.half	1
	.byte	108
	.word	.L390-.L382,.L577-.L382
	.half	1
	.byte	108
	.word	.L836-.L382,.L837-.L382
	.half	1
	.byte	100
	.word	.L386-.L382,.L532-.L382
	.half	1
	.byte	108
	.word	.L847-.L382,.L696-.L382
	.half	1
	.byte	108
	.word	0,0
.L701:
	.word	-1,.L382,.L849-.L382,.L101-.L382
	.half	1
	.byte	82
	.word	0,0
.L381:
	.word	-1,.L382,0,.L696-.L382
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_oos_insert_segment')
	.sect	'.debug_loc'
.L708:
	.word	-1,.L400,0,.L907-.L400
	.half	1
	.byte	100
	.word	.L908-.L400,.L707-.L400
	.half	1
	.byte	108
	.word	0,0
.L709:
	.word	-1,.L400,0,.L907-.L400
	.half	1
	.byte	101
	.word	.L909-.L400,.L707-.L400
	.half	1
	.byte	109
	.word	.L910-.L400,.L911-.L400
	.half	1
	.byte	100
	.word	0,0
.L710:
	.word	-1,.L400,.L912-.L400,.L213-.L400
	.half	1
	.byte	100
	.word	0,0
.L399:
	.word	-1,.L400,0,.L707-.L400
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_parseopt')
	.sect	'.debug_loc'
.L693:
	.word	-1,.L426,.L1012-.L426,.L355-.L426
	.half	1
	.byte	82
	.word	0,0
.L694:
	.word	-1,.L426,.L1009-.L426,.L360-.L426
	.half	1
	.byte	95
	.word	.L1010-.L426,.L357-.L426
	.half	5
	.byte	144,32,157,32,0
	.word	.L361-.L426,.L1011-.L426
	.half	1
	.byte	95
	.word	0,0
.L695:
	.word	-1,.L426,.L1007-.L426,.L1008-.L426
	.half	1
	.byte	82
	.word	.L357-.L426,.L1012-.L426
	.half	1
	.byte	82
	.word	0,0
.L692:
	.word	-1,.L426,0,.L353-.L426
	.half	1
	.byte	100
	.word	.L1006-.L426,.L691-.L426
	.half	1
	.byte	111
	.word	0,0
.L425:
	.word	-1,.L426,0,.L691-.L426
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_process')
	.sect	'.debug_loc'
.L646:
	.word	-1,.L394,.L398-.L394,.L853-.L394
	.half	5
	.byte	144,32,157,32,0
	.word	.L854-.L394,.L855-.L394
	.half	5
	.byte	144,32,157,32,0
	.word	.L418-.L394,.L517-.L394
	.half	5
	.byte	144,32,157,32,0
	.word	.L378-.L394,.L492-.L394
	.half	5
	.byte	144,32,157,32,0
	.word	.L857-.L394,.L126-.L394
	.half	5
	.byte	144,32,157,32,0
	.word	.L117-.L394,.L859-.L394
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L647:
	.word	-1,.L394,.L869-.L394,.L150-.L394
	.half	1
	.byte	82
	.word	.L151-.L394,.L865-.L394
	.half	1
	.byte	82
	.word	.L878-.L394,.L163-.L394
	.half	1
	.byte	82
	.word	.L161-.L394,.L152-.L394
	.half	1
	.byte	82
	.word	.L165-.L394,.L880-.L394
	.half	1
	.byte	82
	.word	0,0
.L642:
	.word	-1,.L394,.L398-.L394,.L853-.L394
	.half	1
	.byte	100
	.word	.L398-.L394,.L853-.L394
	.half	1
	.byte	111
	.word	0,.L855-.L394
	.half	1
	.byte	100
	.word	.L856-.L394,.L855-.L394
	.half	1
	.byte	111
	.word	.L418-.L394,.L517-.L394
	.half	1
	.byte	100
	.word	.L418-.L394,.L517-.L394
	.half	1
	.byte	111
	.word	.L857-.L394,.L858-.L394
	.half	1
	.byte	100
	.word	.L378-.L394,.L730-.L394
	.half	1
	.byte	100
	.word	.L378-.L394,.L492-.L394
	.half	1
	.byte	111
	.word	.L117-.L394,.L859-.L394
	.half	1
	.byte	100
	.word	.L386-.L394,.L532-.L394
	.half	1
	.byte	111
	.word	.L857-.L394,.L860-.L394
	.half	1
	.byte	111
	.word	.L861-.L394,.L862-.L394
	.half	1
	.byte	111
	.word	.L868-.L394,.L869-.L394
	.half	1
	.byte	101
	.word	.L398-.L394,.L537-.L394
	.half	1
	.byte	111
	.word	.L384-.L394,.L582-.L394
	.half	1
	.byte	111
	.word	.L390-.L394,.L577-.L394
	.half	1
	.byte	111
	.word	.L864-.L394,.L870-.L394
	.half	1
	.byte	111
	.word	.L871-.L394,.L872-.L394
	.half	1
	.byte	100
	.word	.L873-.L394,.L874-.L394
	.half	1
	.byte	100
	.word	.L875-.L394,.L876-.L394
	.half	1
	.byte	111
	.word	.L877-.L394,.L878-.L394
	.half	1
	.byte	101
	.word	.L879-.L394,.L152-.L394
	.half	1
	.byte	100
	.word	.L881-.L394,.L880-.L394
	.half	1
	.byte	100
	.word	.L388-.L394,.L835-.L394
	.half	1
	.byte	111
	.word	.L882-.L394,.L883-.L394
	.half	1
	.byte	100
	.word	.L884-.L394,.L885-.L394
	.half	1
	.byte	100
	.word	.L886-.L394,.L168-.L394
	.half	1
	.byte	100
	.word	.L887-.L394,.L888-.L394
	.half	1
	.byte	100
	.word	.L889-.L394,.L890-.L394
	.half	1
	.byte	100
	.word	.L396-.L394,.L567-.L394
	.half	1
	.byte	111
	.word	.L892-.L394,.L893-.L394
	.half	1
	.byte	100
	.word	.L894-.L394,.L895-.L394
	.half	1
	.byte	100
	.word	.L899-.L394,.L900-.L394
	.half	1
	.byte	100
	.word	.L901-.L394,.L902-.L394
	.half	1
	.byte	100
	.word	.L904-.L394,.L905-.L394
	.half	1
	.byte	100
	.word	.L906-.L394,.L641-.L394
	.half	1
	.byte	111
	.word	0,0
.L645:
	.word	-1,.L394,.L863-.L394,.L862-.L394
	.half	1
	.byte	108
	.word	.L418-.L394,.L517-.L394
	.half	1
	.byte	108
	.word	.L378-.L394,.L492-.L394
	.half	1
	.byte	108
	.word	.L864-.L394,.L865-.L394
	.half	1
	.byte	108
	.word	.L866-.L394,.L867-.L394
	.half	1
	.byte	100
	.word	0,0
.L393:
	.word	-1,.L394,0,.L852-.L394
	.half	2
	.byte	138,0
	.word	.L852-.L394,.L117-.L394
	.half	2
	.byte	138,16
	.word	.L117-.L394,.L117-.L394
	.half	2
	.byte	138,0
	.word	.L117-.L394,.L165-.L394
	.half	2
	.byte	138,16
	.word	.L165-.L394,.L165-.L394
	.half	2
	.byte	138,0
	.word	.L165-.L394,.L641-.L394
	.half	2
	.byte	138,16
	.word	.L641-.L394,.L641-.L394
	.half	2
	.byte	138,0
	.word	0,0
.L650:
	.word	-1,.L394,.L891-.L394,.L176-.L394
	.half	1
	.byte	100
	.word	0,0
.L653:
	.word	-1,.L394,.L896-.L394,.L183-.L394
	.half	1
	.byte	100
	.word	.L897-.L394,.L898-.L394
	.half	1
	.byte	100
	.word	.L194-.L394,.L138-.L394
	.half	1
	.byte	100
	.word	0,0
.L654:
	.word	-1,.L394,.L903-.L394,.L184-.L394
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_receive')
	.sect	'.debug_loc'
.L666:
	.word	-1,.L404,.L939-.L404,.L940-.L404
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L686:
	.word	-1,.L404,.L991-.L404,.L992-.L404
	.half	1
	.byte	98
	.word	.L992-.L404,.L321-.L404
	.half	1
	.byte	100
	.word	0,0
.L688:
	.word	-1,.L404,.L993-.L404,.L327-.L404
	.half	1
	.byte	98
	.word	0,0
.L690:
	.word	-1,.L404,.L994-.L404,.L995-.L404
	.half	1
	.byte	98
	.word	.L996-.L404,.L326-.L404
	.half	1
	.byte	111
	.word	.L997-.L404,.L998-.L404
	.half	1
	.byte	100
	.word	0,0
.L663:
	.word	-1,.L404,.L929-.L404,.L930-.L404
	.half	1
	.byte	88
	.word	.L376-.L404,.L497-.L404
	.half	1
	.byte	88
	.word	.L378-.L404,.L492-.L404
	.half	1
	.byte	88
	.word	.L932-.L404,.L934-.L404
	.half	1
	.byte	88
	.word	.L414-.L404,.L542-.L404
	.half	1
	.byte	88
	.word	.L936-.L404,.L937-.L404
	.half	1
	.byte	88
	.word	.L945-.L404,.L946-.L404
	.half	1
	.byte	88
	.word	0,0
.L668:
	.word	-1,.L404,.L943-.L404,.L944-.L404
	.half	1
	.byte	95
	.word	0,0
.L659:
	.word	-1,.L404,.L953-.L404,.L954-.L404
	.half	1
	.byte	95
	.word	.L955-.L404,.L956-.L404
	.half	1
	.byte	95
	.word	0,0
.L675:
	.word	-1,.L404,.L964-.L404,.L965-.L404
	.half	1
	.byte	95
	.word	0,0
.L678:
	.word	-1,.L404,.L420-.L404,.L512-.L404
	.half	1
	.byte	110
	.word	.L972-.L404,.L973-.L404
	.half	1
	.byte	110
	.word	.L975-.L404,.L976-.L404
	.half	1
	.byte	110
	.word	.L408-.L404,.L977-.L404
	.half	1
	.byte	110
	.word	.L406-.L404,.L592-.L404
	.half	1
	.byte	110
	.word	.L979-.L404,.L547-.L404
	.half	1
	.byte	110
	.word	.L296-.L404,.L980-.L404
	.half	1
	.byte	110
	.word	.L408-.L404,.L587-.L404
	.half	1
	.byte	110
	.word	.L981-.L404,.L982-.L404
	.half	1
	.byte	110
	.word	.L376-.L404,.L497-.L404
	.half	1
	.byte	110
	.word	.L378-.L404,.L492-.L404
	.half	1
	.byte	110
	.word	.L983-.L404,.L289-.L404
	.half	1
	.byte	110
	.word	0,0
.L683:
	.word	-1,.L404,.L416-.L404,.L522-.L404
	.half	1
	.byte	109
	.word	.L410-.L404,.L572-.L404
	.half	1
	.byte	109
	.word	.L999-.L404,.L1000-.L404
	.half	1
	.byte	109
	.word	.L408-.L404,.L587-.L404
	.half	1
	.byte	109
	.word	.L406-.L404,.L592-.L404
	.half	1
	.byte	109
	.word	.L969-.L404,.L502-.L404
	.half	1
	.byte	109
	.word	.L1002-.L404,.L1003-.L404
	.half	1
	.byte	109
	.word	.L376-.L404,.L497-.L404
	.half	1
	.byte	109
	.word	.L378-.L404,.L492-.L404
	.half	1
	.byte	109
	.word	.L1004-.L404,.L282-.L404
	.half	1
	.byte	109
	.word	0,0
.L669:
	.word	-1,.L404,.L941-.L404,.L942-.L404
	.half	1
	.byte	95
	.word	0,0
.L676:
	.word	-1,.L404,.L961-.L404,.L960-.L404
	.half	1
	.byte	90
	.word	.L376-.L404,.L497-.L404
	.half	1
	.byte	90
	.word	.L378-.L404,.L492-.L404
	.half	1
	.byte	90
	.word	.L962-.L404,.L963-.L404
	.half	1
	.byte	90
	.word	.L278-.L404,.L273-.L404
	.half	1
	.byte	90
	.word	0,0
.L674:
	.word	-1,.L404,.L966-.L404,.L967-.L404
	.half	1
	.byte	100
	.word	0,0
.L656:
	.word	-1,.L404,0,.L930-.L404
	.half	1
	.byte	100
	.word	.L931-.L404,.L930-.L404
	.half	1
	.byte	108
	.word	.L376-.L404,.L497-.L404
	.half	1
	.byte	108
	.word	.L376-.L404,.L497-.L404
	.half	1
	.byte	100
	.word	.L932-.L404,.L933-.L404
	.half	1
	.byte	100
	.word	.L378-.L404,.L492-.L404
	.half	1
	.byte	108
	.word	.L378-.L404,.L730-.L404
	.half	1
	.byte	100
	.word	.L932-.L404,.L934-.L404
	.half	1
	.byte	108
	.word	.L414-.L404,.L542-.L404
	.half	1
	.byte	108
	.word	.L936-.L404,.L937-.L404
	.half	1
	.byte	108
	.word	.L938-.L404,.L238-.L404
	.half	1
	.byte	100
	.word	.L945-.L404,.L947-.L404
	.half	1
	.byte	108
	.word	.L948-.L404,.L949-.L404
	.half	1
	.byte	100
	.word	.L950-.L404,.L951-.L404
	.half	1
	.byte	100
	.word	.L952-.L404,.L247-.L404
	.half	1
	.byte	100
	.word	.L957-.L404,.L958-.L404
	.half	1
	.byte	108
	.word	.L959-.L404,.L960-.L404
	.half	1
	.byte	108
	.word	.L420-.L404,.L512-.L404
	.half	1
	.byte	108
	.word	.L962-.L404,.L968-.L404
	.half	1
	.byte	108
	.word	.L408-.L404,.L587-.L404
	.half	1
	.byte	108
	.word	.L406-.L404,.L592-.L404
	.half	1
	.byte	108
	.word	.L969-.L404,.L502-.L404
	.half	1
	.byte	108
	.word	.L970-.L404,.L971-.L404
	.half	1
	.byte	108
	.word	.L974-.L404,.L973-.L404
	.half	1
	.byte	108
	.word	.L975-.L404,.L976-.L404
	.half	1
	.byte	108
	.word	.L408-.L404,.L977-.L404
	.half	1
	.byte	108
	.word	.L979-.L404,.L547-.L404
	.half	1
	.byte	108
	.word	.L296-.L404,.L980-.L404
	.half	1
	.byte	108
	.word	.L981-.L404,.L982-.L404
	.half	1
	.byte	108
	.word	.L983-.L404,.L984-.L404
	.half	1
	.byte	108
	.word	.L985-.L404,.L986-.L404
	.half	1
	.byte	100
	.word	.L987-.L404,.L988-.L404
	.half	1
	.byte	108
	.word	.L418-.L404,.L517-.L404
	.half	1
	.byte	108
	.word	.L989-.L404,.L990-.L404
	.half	1
	.byte	100
	.word	.L416-.L404,.L522-.L404
	.half	1
	.byte	108
	.word	.L410-.L404,.L572-.L404
	.half	1
	.byte	108
	.word	.L1001-.L404,.L1000-.L404
	.half	1
	.byte	108
	.word	.L1002-.L404,.L1003-.L404
	.half	1
	.byte	108
	.word	.L1004-.L404,.L655-.L404
	.half	1
	.byte	108
	.word	.L1005-.L404,.L271-.L404
	.half	1
	.byte	100
	.word	0,0
.L684:
	.word	-1,.L404,.L416-.L404,.L522-.L404
	.half	1
	.byte	110
	.word	.L410-.L404,.L572-.L404
	.half	1
	.byte	110
	.word	.L320-.L404,.L1000-.L404
	.half	1
	.byte	110
	.word	.L408-.L404,.L587-.L404
	.half	1
	.byte	110
	.word	.L406-.L404,.L592-.L404
	.half	1
	.byte	110
	.word	.L969-.L404,.L502-.L404
	.half	1
	.byte	110
	.word	.L1002-.L404,.L1003-.L404
	.half	1
	.byte	110
	.word	.L376-.L404,.L497-.L404
	.half	1
	.byte	110
	.word	.L378-.L404,.L492-.L404
	.half	1
	.byte	110
	.word	.L1004-.L404,.L282-.L404
	.half	1
	.byte	110
	.word	0,0
.L661:
	.word	-1,.L404,.L935-.L404,.L934-.L404
	.half	1
	.byte	89
	.word	.L414-.L404,.L542-.L404
	.half	1
	.byte	89
	.word	.L936-.L404,.L937-.L404
	.half	1
	.byte	89
	.word	.L945-.L404,.L228-.L404
	.half	1
	.byte	89
	.word	0,0
.L403:
	.word	-1,.L404,0,.L929-.L404
	.half	2
	.byte	138,0
	.word	.L929-.L404,.L272-.L404
	.half	2
	.byte	138,40
	.word	.L272-.L404,.L272-.L404
	.half	2
	.byte	138,0
	.word	.L272-.L404,.L655-.L404
	.half	2
	.byte	138,40
	.word	.L655-.L404,.L655-.L404
	.half	2
	.byte	138,0
	.word	0,0
.L680:
	.word	-1,.L404,.L978-.L404,.L294-.L404
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_timewait_input')
	.sect	'.debug_loc'
.L704:
	.word	-1,.L392,0,.L703-.L392
	.half	1
	.byte	100
	.word	0,0
.L391:
	.word	-1,.L392,0,.L703-.L392
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_trigger_input_pcb_close')
	.sect	'.debug_loc'
.L427:
	.word	-1,.L428,0,.L640-.L428
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1866:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('tcp_input')
	.sect	'.debug_frame'
	.word	68
	.word	.L1866,.L366,.L621-.L366
	.byte	4
	.word	(.L725-.L366)/2
	.byte	19,32,22,26,3,19,138,32,4
	.word	(.L94-.L725)/2
	.byte	19,0,8,26,19,32,22,26,3,19,138,32,4
	.word	(.L19-.L94)/2
	.byte	19,0,8,26,19,32,22,26,3,19,138,32,4
	.word	(.L621-.L19)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('tcp_input_delayed_close')
	.sect	'.debug_frame'
	.word	12
	.word	.L1866,.L380,.L705-.L380
	.sdecl	'.debug_frame',debug,cluster('tcp_listen_input')
	.sect	'.debug_frame'
	.word	12
	.word	.L1866,.L382,.L696-.L382
	.sdecl	'.debug_frame',debug,cluster('tcp_timewait_input')
	.sect	'.debug_frame'
	.word	12
	.word	.L1866,.L392,.L703-.L392
	.sdecl	'.debug_frame',debug,cluster('tcp_process')
	.sect	'.debug_frame'
	.word	68
	.word	.L1866,.L394,.L641-.L394
	.byte	4
	.word	(.L852-.L394)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L117-.L852)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L165-.L117)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L641-.L165)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('tcp_oos_insert_segment')
	.sect	'.debug_frame'
	.word	12
	.word	.L1866,.L400,.L707-.L400
	.sdecl	'.debug_frame',debug,cluster('tcp_free_acked_segments')
	.sect	'.debug_frame'
	.word	36
	.word	.L1866,.L402,.L711-.L402
	.byte	4
	.word	(.L913-.L402)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L711-.L913)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_receive')
	.sect	'.debug_frame'
	.word	52
	.word	.L1866,.L404,.L655-.L404
	.byte	4
	.word	(.L929-.L404)/2
	.byte	19,40,22,26,3,19,138,40,4
	.word	(.L272-.L929)/2
	.byte	19,0,8,26,19,40,22,26,3,19,138,40,4
	.word	(.L655-.L272)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_get_next_optbyte')
	.sect	'.debug_frame'
	.word	24
	.word	.L1866,.L424,.L719-.L424
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('tcp_parseopt')
	.sect	'.debug_frame'
	.word	12
	.word	.L1866,.L426,.L691-.L426
	.sdecl	'.debug_frame',debug,cluster('tcp_trigger_input_pcb_close')
	.sect	'.debug_frame'
	.word	24
	.word	.L1866,.L428,.L640-.L428
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1867:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_98')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L368,.L562-.L368
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_97')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L370,.L557-.L370
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_96')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L372,.L552-.L372
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_91')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L374,.L527-.L374
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_85')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L376,.L497-.L376
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_84')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L378,.L492-.L378
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_102')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L384,.L582-.L384
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_92')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L386,.L532-.L386
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_87')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L388,.L507-.L388
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_101')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L390,.L577-.L390
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_99')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L396,.L567-.L396
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_93')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L398,.L537-.L398
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_104')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L406,.L592-.L406
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_103')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L408,.L587-.L408
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_100')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L410,.L572-.L410
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_95')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L412,.L547-.L412
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_94')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L414,.L542-.L414
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_90')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L416,.L522-.L416
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_89')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L418,.L517-.L418
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_88')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L420,.L512-.L420
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_86')
	.sect	'.debug_frame'
	.word	24
	.word	.L1867,.L422,.L502-.L422
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2035  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2036  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2037  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2038   * Called by tcp_receive() to add new SACK entry.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2039   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2040   * The new SACK entry will be placed at the beginning of rcv_sacks[], as the newest one.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2041   * Existing SACK entries will be "pushed back", to preserve their order.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2042   * This is the behavior described in RFC 2018, section 4.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2043   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2044   * @param pcb the tcp_pcb for which a segment arrived
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2045   * @param left the left side of the SACK (the first sequence number)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2046   * @param right the right side of the SACK (the first sequence number past this SACK)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2047   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2048  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2049  tcp_add_sack(struct tcp_pcb *pcb, u32_t left, u32_t right)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2050  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2051    u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2052    u8_t unused_idx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2053  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2054    if ((pcb->flags & TF_SACK) == 0 || !TCP_SEQ_LT(left, right)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2055      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2056    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2057  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2058    /* First, let's remove all SACKs that are no longer needed (because they overlap with the newest one),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2059       while moving all other SACKs forward.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2060       We run this loop for all entries, until we find the first invalid one.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2061       There is no point checking after that. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2062    for (i = unused_idx = 0; (i < LWIP_TCP_MAX_SACK_NUM) && LWIP_TCP_SACK_VALID(pcb, i); ++i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2063      /* We only want to use SACK at [i] if it doesn't overlap with left:right range.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2064         It does not overlap if its right side is before the newly added SACK,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2065         or if its left side is after the newly added SACK.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2066         NOTE: The equality should not really happen, but it doesn't hurt. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2067      if (TCP_SEQ_LEQ(pcb->rcv_sacks[i].right, left) || TCP_SEQ_LEQ(right, pcb->rcv_sacks[i].left)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2068        if (unused_idx != i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2069          /* We don't need to copy if it's already in the right spot */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2070          pcb->rcv_sacks[unused_idx] = pcb->rcv_sacks[i];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2071        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2072        ++unused_idx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2073      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2074    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2075  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2076    /* Now 'unused_idx' is the index of the first invalid SACK entry,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2077       anywhere between 0 (no valid entries) and LWIP_TCP_MAX_SACK_NUM (all entries are valid).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2078       We want to clear this and all following SACKs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2079       However, we will be adding another one in the front (and shifting everything else back).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2080       So let's just iterate from the back, and set each entry to the one to the left if it's valid,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2081       or to 0 if it is not. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2082    for (i = LWIP_TCP_MAX_SACK_NUM - 1; i > 0; --i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2083      /* [i] is the index we are setting, and the value should be at index [i-1],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2084         or 0 if that index is unused (>= unused_idx). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2085      if (i - 1 >= unused_idx) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2086        /* [i-1] is unused. Let's clear [i]. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2087        pcb->rcv_sacks[i].left = pcb->rcv_sacks[i].right = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2088      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2089        pcb->rcv_sacks[i] = pcb->rcv_sacks[i - 1];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2090      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2091    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2092  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2093    /* And now we can store the newest SACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2094    pcb->rcv_sacks[0].left = left;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2095    pcb->rcv_sacks[0].right = right;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2096  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2097  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2098  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2099   * Called to remove a range of SACKs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2100   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2101   * SACK entries will be removed or adjusted to not acknowledge any sequence
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2102   * numbers that are less than 'seq' passed. It not only invalidates entries,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2103   * but also moves all entries that are still valid to the beginning.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2104   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2105   * @param pcb the tcp_pcb to modify
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2106   * @param seq the lowest sequence number to keep in SACK entries
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2107   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2108  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2109  tcp_remove_sacks_lt(struct tcp_pcb *pcb, u32_t seq)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2110  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2111    u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2112    u8_t unused_idx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2113  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2114    /* We run this loop for all entries, until we find the first invalid one.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2115       There is no point checking after that. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2116    for (i = unused_idx = 0; (i < LWIP_TCP_MAX_SACK_NUM) && LWIP_TCP_SACK_VALID(pcb, i); ++i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2117      /* We only want to use SACK at index [i] if its right side is > 'seq'. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2118      if (TCP_SEQ_GT(pcb->rcv_sacks[i].right, seq)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2119        if (unused_idx != i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2120          /* We only copy it if it's not in the right spot already. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2121          pcb->rcv_sacks[unused_idx] = pcb->rcv_sacks[i];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2122        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2123        /* NOTE: It is possible that its left side is < 'seq', in which case we should adjust it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2124        if (TCP_SEQ_LT(pcb->rcv_sacks[unused_idx].left, seq)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2125          pcb->rcv_sacks[unused_idx].left = seq;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2126        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2127        ++unused_idx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2128      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2129    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2130  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2131    /* We also need to invalidate everything from 'unused_idx' till the end */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2132    for (i = unused_idx; i < LWIP_TCP_MAX_SACK_NUM; ++i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2133      pcb->rcv_sacks[i].left = pcb->rcv_sacks[i].right = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2134    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2135  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2136  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2137  #if defined(TCP_OOSEQ_BYTES_LIMIT) || defined(TCP_OOSEQ_PBUFS_LIMIT)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2138  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2139   * Called to remove a range of SACKs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2140   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2141   * SACK entries will be removed or adjusted to not acknowledge any sequence
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2142   * numbers that are greater than (or equal to) 'seq' passed. It not only invalidates entries,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2143   * but also moves all entries that are still valid to the beginning.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2144   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2145   * @param pcb the tcp_pcb to modify
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2146   * @param seq the highest sequence number to keep in SACK entries
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2147   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2148  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2149  tcp_remove_sacks_gt(struct tcp_pcb *pcb, u32_t seq)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2150  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2151    u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2152    u8_t unused_idx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2153  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2154    /* We run this loop for all entries, until we find the first invalid one.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2155       There is no point checking after that. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2156    for (i = unused_idx = 0; (i < LWIP_TCP_MAX_SACK_NUM) && LWIP_TCP_SACK_VALID(pcb, i); ++i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2157      /* We only want to use SACK at index [i] if its left side is < 'seq'. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2158      if (TCP_SEQ_LT(pcb->rcv_sacks[i].left, seq)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2159        if (unused_idx != i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2160          /* We only copy it if it's not in the right spot already. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2161          pcb->rcv_sacks[unused_idx] = pcb->rcv_sacks[i];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2162        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2163        /* NOTE: It is possible that its right side is > 'seq', in which case we should adjust it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2164        if (TCP_SEQ_GT(pcb->rcv_sacks[unused_idx].right, seq)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2165          pcb->rcv_sacks[unused_idx].right = seq;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2166        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2167        ++unused_idx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2168      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2169    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2170  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2171    /* We also need to invalidate everything from 'unused_idx' till the end */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2172    for (i = unused_idx; i < LWIP_TCP_MAX_SACK_NUM; ++i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2173      pcb->rcv_sacks[i].left = pcb->rcv_sacks[i].right = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2174    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2175  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2176  #endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2177  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2178  #endif /* LWIP_TCP_SACK_OUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2179  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_in.c	  2180  #endif /* LWIP_TCP */

	; Module end
