	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\.udp.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc37x -D__CPU_TC37X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c'

	
$TC162
	
	.sdecl	'.text.udp.udp_init',code,cluster('udp_init')
	.sect	'.text.udp.udp_init'
	.align	2
	
	.global	udp_init

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	     3   * User Datagram Protocol module\n
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	     4   * The code for the User Datagram Protocol UDP & UDPLite (RFC 3828).\n
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	     5   * See also @ref udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	     6   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	     7   * @defgroup udp_raw UDP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	     8   * @ingroup callbackstyle_api
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	     9   * User Datagram Protocol module\n
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    10   * @see @ref api
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    11   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    12  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    13  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    14   * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    15   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    16   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    17   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    18   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    19   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    20   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    21   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    22   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    23   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    24   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    25   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    26   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    27   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    28   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    29   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    30   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    31   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    32   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    33   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    34   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    35   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    36   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    37   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    38   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    39   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    40   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    41   * Author: Adam Dunkels <adam@sics.se>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    42   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    43   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    44  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    45  /* @todo Check the use of '(struct udp_pcb).chksum_len_rx'!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    46   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    47  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    48  #include "lwip/opt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    49  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    50  #if LWIP_UDP /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    51  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    52  #include "lwip/udp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    53  #include "lwip/def.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    54  #include "lwip/memp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    55  #include "lwip/inet_chksum.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    56  #include "lwip/ip_addr.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    57  #include "lwip/ip6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    58  #include "lwip/ip6_addr.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    59  #include "lwip/netif.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    60  #include "lwip/icmp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    61  #include "lwip/icmp6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    62  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    63  #include "lwip/snmp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    64  #include "lwip/dhcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    65  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    66  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    67  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    68  #ifndef UDP_LOCAL_PORT_RANGE_START
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    69  /* From http://www.iana.org/assignments/port-numbers:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    70     "The Dynamic and/or Private Ports are those from 49152 through 65535" */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    71  #define UDP_LOCAL_PORT_RANGE_START  0xc000
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    72  #define UDP_LOCAL_PORT_RANGE_END    0xffff
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    73  #define UDP_ENSURE_LOCAL_PORT_RANGE(port) ((u16_t)(((port) & (u16_t)~UDP_LOCAL_PORT_RANGE_START) + UDP_LOCAL_PORT_RANGE_START))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    74  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    75  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    76  /* last local UDP port */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    77  static u16_t udp_port = UDP_LOCAL_PORT_RANGE_START;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    78  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    79  /* The list of UDP PCBs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    80  /* exported in udp.h (was static) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    81  struct udp_pcb *udp_pcbs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    82  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    83  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    84   * Initialize this module.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    85   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    86  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    87  udp_init(void)
; Function udp_init
.L165:
udp_init:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    88  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    89  #ifdef LWIP_RAND
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    90    udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    91  #endif /* LWIP_RAND */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    92  }
	ret
.L392:
	
__udp_init_function_end:
	.size	udp_init,__udp_init_function_end-udp_init
.L277:
	; End of function
	
	.sdecl	'.text.udp.udp_new_port',code,cluster('udp_new_port')
	.sect	'.text.udp.udp_new_port'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    93  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    94  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    95   * Allocate a new local UDP port.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    96   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    97   * @return a new (free) local UDP port number
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    98   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	    99  static u16_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   100  udp_new_port(void)
; Function udp_new_port
.L167:
udp_new_port:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   101  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   102    u16_t n = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   103    struct udp_pcb *pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   104  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   105  again:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   106    if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
	mov	d0,#0
	ld.hu	d1,udp_port

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   107      udp_port = UDP_LOCAL_PORT_RANGE_START;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   108    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   109    /* Check all PCBs. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   110    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   111      if (pcb->local_port == udp_port) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   112        if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
.L2:
	mov	d15,d1
	ld.a	a15,udp_pcbs
.L407:
	add	d1,#1
	extr.u	d1,d1,#0,#16
.L802:
	mov.u	d2,#65535
.L803:
	eq	d15,d15,d2
.L804:
	mov.u	d2,#49152
.L805:
	cmov	d1,d15,d2
	j	.L4
.L5:
	ld.hu	d15,[a15]18
.L806:
	jne	d15,d1,.L6
.L807:
	add	d0,#1
.L808:
	mov	d15,#16383
.L809:
	jge.u	d15,d0,.L2
.L810:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   113          return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   114        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   115        goto again;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   116      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   117    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   118    return udp_port;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   119  }
	mov	d2,#0
	j	.L7
.L6:
	ld.a	a15,[a15]12
.L4:
	jnz.a	a15,.L5
.L811:
	mov	d2,d1
.L7:
	st.h	udp_port,d1
	ret
.L399:
	
__udp_new_port_function_end:
	.size	udp_new_port,__udp_new_port_function_end-udp_new_port
.L292:
	; End of function
	
	.sdecl	'.text.udp.udp_input_local_match',code,cluster('udp_input_local_match')
	.sect	'.text.udp.udp_input_local_match'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   120  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   121  /** Common code to see if the current input packet matches the pcb
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   122   * (current input packet is accessed via ip(4/6)_current_* macros)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   123   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   124   * @param pcb pcb to check
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   125   * @param inp network interface on which the datagram was received (only used for IPv4)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   126   * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   127   * @return 1 on match, 0 otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   128   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   129  static u8_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   130  udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
; Function udp_input_local_match
.L169:
udp_input_local_match:	.type	func
	sub.a	a10,#16
.L408:
	mov.aa	a12,a4
.L410:
	mov.aa	a13,a5
.L411:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   131  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   132    LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   133    LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   134  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   135    LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   136    LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
	mov	d8,d4
	jnz.a	a13,.L9
.L412:
	movh.a	a2,#@his(.4.str)
	lea	a2,[a2]@los(.4.str)
	st.a	[a10],a2
	mov	d15,#136
	st.w	[a10]4,d15
.L409:
	fcall	.cocofun_62
.L413:
	st.a	[a10]8,a15
	fcall	.cocofun_63
.L414:
	call	Ifx_Lwip_printf
.L9:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   137  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   138    /* check if PCB is bound to specific netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   139    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
	ld.bu	d15,[a12]8
.L816:
	jeq	d15,#0,.L10
.L817:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   140        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
	movh.a	a15,#@his(ip_data+4)
	ld.a	a15,[a15]@los(ip_data+4)
	ld.bu	d0,[a15]44
	add	d0,#1
	extr.u	d0,d0,#0,#8
.L818:
	jne	d15,d0,.L11
.L10:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   141      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   142    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   143  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   144    /* Dual-stack: PCBs listening to any IP type also listen to any IP address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   145    if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   146  #if LWIP_IPV4 && IP_SOF_BROADCAST_RECV
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   147      if ((broadcast != 0) && !ip_get_option(pcb, SOF_BROADCAST)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   148        return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   149      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   150  #endif /* LWIP_IPV4 && IP_SOF_BROADCAST_RECV */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   151      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   152    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   153  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   154    /* Only need to check PCB if incoming IP version matches PCB IP version */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   155    if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   156  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   157      /* Special case: IPv4 broadcast: all or broadcasts in my subnet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   158       * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   159      if (broadcast != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   160  #if IP_SOF_BROADCAST_RECV
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   161        if (ip_get_option(pcb, SOF_BROADCAST))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   162  #endif /* IP_SOF_BROADCAST_RECV */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   163        {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   164          if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
	ld.w	d15,[a12]
.L819:
	jeq	d8,#0,.L12
.L820:
	jeq	d15,#0,.L13
.L821:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   165              ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
	movh.a	a15,#@his(ip_data+18)
.L822:
	ld.w	d0,[a15]@los(ip_data+18)
.L823:
	jeq	d0,#-1,.L14
.L824:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   166              ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
	ld.w	d1,[a13]8
	and	d15,d1
	and	d0,d1
	jne	d15,d0,.L15
.L825:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   167            return 1;
	j	.L16
.L12:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   168          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   169        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   170      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   171  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   172        /* Handle IPv4 and IPv6: all or exact match */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   173        if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
	jeq	d15,#0,.L17
.L826:
	movh.a	a15,#@his(ip_data+18)
	ld.w	d0,[a15]@los(ip_data+18)
	jne	d15,d0,.L18
.L17:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   174          return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   175        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   176    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   177  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   178    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   179  }
.L16:
.L14:
.L13:
	mov	d2,#1
	ret
.L18:
.L15:
.L11:
	mov	d2,#0
	ret
.L402:
	
__udp_input_local_match_function_end:
	.size	udp_input_local_match,__udp_input_local_match_function_end-udp_input_local_match
.L297:
	; End of function
	
	.sdecl	'.text.udp..cocofun_63',code,cluster('.cocofun_63')
	.sect	'.text.udp..cocofun_63'
	.align	2
; Function .cocofun_63
.L171:
.cocofun_63:	.type	func
; Function body .cocofun_63, coco_iter:0
	movh.a	a4,#@his(.1.str)
.L415:
	lea	a4,[a4]@los(.1.str)
.L836:
	fret
.L307:
	; End of function
	.sdecl	'.text.udp..cocofun_62',code,cluster('.cocofun_62')
	.sect	'.text.udp..cocofun_62'
	.align	2
; Function .cocofun_62
.L173:
.cocofun_62:	.type	func
; Function body .cocofun_62, coco_iter:0
	movh.a	a15,#@his(.3.str)
.L421:
	lea	a15,[a15]@los(.3.str)
.L831:
	fret
.L302:
	; End of function
	.sdecl	'.text.udp.udp_input',code,cluster('udp_input')
	.sect	'.text.udp.udp_input'
	.align	2
	
	.global	udp_input

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   180  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   181  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   182   * Process an incoming UDP datagram.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   183   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   184   * Given an incoming UDP datagram (as a chain of pbufs) this function
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   185   * finds a corresponding UDP PCB and hands over the pbuf to the pcbs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   186   * recv function. If no pcb is found or the datagram is incorrect, the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   187   * pbuf is freed.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   188   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   189   * @param p pbuf to be demultiplexed to a UDP PCB (p->payload pointing to the UDP header)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   190   * @param inp network interface on which the datagram was received.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   191   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   192   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   193  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   194  udp_input(struct pbuf *p, struct netif *inp)
; Function udp_input
.L175:
udp_input:	.type	func
	sub.a	a10,#40
.L416:
	st.a	[a10]24,a4
.L418:
	mov.aa	a12,a5
.L419:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   195  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   196    struct udp_hdr *udphdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   197    struct udp_pcb *pcb, *prev;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   198    struct udp_pcb *uncon_pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   199    u16_t src, dest;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   200    u8_t broadcast;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   201    u8_t for_us = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   202  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   203    LWIP_UNUSED_ARG(inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   204  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   205    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   206  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   207    LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
	mov.aa	a15,a4
.L420:
	jnz.a	a15,.L21
	movh.a	a2,#@his(.5.str)
	lea	a2,[a2]@los(.5.str)
	st.a	[a10],a2
	mov	d15,#207
	st.w	[a10]4,d15
.L417:
	fcall	.cocofun_62
.L422:
	st.a	[a10]8,a15
	fcall	.cocofun_63
.L423:
	call	Ifx_Lwip_printf
.L21:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   208    LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
	jnz.a	a12,.L22
.L742:
	movh.a	a15,#@his(.6.str)
	lea	a15,[a15]@los(.6.str)
	st.a	[a10],a15
	mov	d15,#208
	st.w	[a10]4,d15
.L424:
	fcall	.cocofun_62
.L425:
	st.a	[a10]8,a15
	fcall	.cocofun_63
	call	Ifx_Lwip_printf
.L22:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   209  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   210    PERF_START;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   211  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   212    UDP_STATS_INC(udp.recv);
	movh.a	a15,#@his(lwip_stats)
	lea	a15,[a15]@los(lwip_stats)
	st.a	[a10]20,a15
	ld.hu	d15,[a15]122
	add	d15,#1
	st.h	[a15]122,d15
.L743:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   213  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   214    /* Check minimum length (UDP header) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   215    if (p->len < UDP_HLEN) {
	ld.a	a15,[a10]24
.L427:
	ld.hu	d15,[a15]10
.L744:
	jge.u	d15,#8,.L23
.L745:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   216      /* drop short packets */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   217      LWIP_DEBUGF(UDP_DEBUG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   218                  ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   219      UDP_STATS_INC(udp.lenerr);
	ld.a	a15,[a10]20
.L428:
	ld.hu	d15,[a15]130
	add	d15,#1
	st.h	[a15]130,d15
.L746:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   220      UDP_STATS_INC(udp.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   221      MIB2_STATS_INC(mib2.udpinerrors);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   222      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   223      goto end;
	j	.L24
.L23:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   224    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   225  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   226    udphdr = (struct udp_hdr *)p->payload;
	ld.a	a15,[a15]4
.L429:
	st.a	[a10]28,a15
.L431:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   227  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   228    /* is broadcast packet ? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   229    broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
	movh.a	a2,#@his(ip_data)
	lea	a2,[a2]@los(ip_data)
	st.a	[a10]12,a2
	lea	a15,[a2]18
.L430:
	st.a	[a10]16,a15
	ld.w	d4,[a2]18
	ld.a	a4,[a2]
	call	ip4_addr_isbroadcast_u32
.L432:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   230  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   231    LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   232  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   233    /* convert src and dest ports to host byte order */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   234    src = lwip_ntohs(udphdr->src);
	ld.a	a15,[a10]28
.L434:
	mov	d8,d2
.L436:
	ld.hu	d4,[a15]0
	call	lwip_htons
.L433:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   235    dest = lwip_ntohs(udphdr->dest);
	mov	d9,d2
	ld.hu	d4,[a15]2
.L438:
	call	lwip_htons
.L437:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   236  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   237    udp_debug_print(udphdr);
	mov	d10,d2
	ld.a	a4,[a10]28
.L435:
	call	udp_debug_print
.L439:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   238  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   239    /* print the UDP source and destination */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   240    LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   241    ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   242    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   243    ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   244    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   245  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   246    pcb = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   247    prev = NULL;
	mov.a	a13,#0
.L440:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   248    uncon_pcb = NULL;
	mov.aa	a14,a13
.L441:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   249    /* Iterate through the UDP pcb list for a matching pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   250     * 'Perfect match' pcbs (connected to the remote port & ip address) are
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   251     * preferred. If no perfect match is found, the first unconnected pcb that
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   252     * matches the local port and ip address gets the datagram. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   253    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
	ld.a	a15,udp_pcbs
.L442:
	j	.L25
.L26:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   254      /* print the PCB local and remote address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   255      LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   256      ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   257      LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   258      ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   259      LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   260  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   261      /* compare PCB local addr+port to UDP destination addr+port */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   262      if ((pcb->local_port == dest) &&
	ld.hu	d0,[a15]18
.L443:
	jne	d0,d10,.L27
.L747:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   263          (udp_input_local_match(pcb, inp, broadcast) != 0)) {
	ld.a	a4,[a10]32
.L444:
	mov.aa	a5,a12
.L446:
	mov	d4,d8
	call	udp_input_local_match
.L445:
	jeq	d2,#0,.L28
.L447:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   264        if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
	ld.bu	d0,[a15]16
.L448:
	jnz.t	d0:2,.L29
.L449:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   265          if (uncon_pcb == NULL) {
	jz.a	a14,.L30
.L450:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   266            /* the first unconnected matching PCB */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   267            uncon_pcb = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   268  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   269          } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
	jeq	d8,#0,.L31
.L748:
	ld.a	a15,[a10]16
	ld.w	d15,[a15]
.L749:
	jne	d15,#-1,.L32
.L750:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   270            /* global broadcast address (only valid for IPv4; match was checked before) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   271            if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
	ld.w	d15,[a12]4
.L451:
	ld.w	d0,[a14]
.L452:
	jeq	d15,d0,.L33
.L751:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   272              /* uncon_pcb does not match the input netif, check this pcb */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   273              if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
	ld.a	a15,[a10]32
.L453:
	ld.w	d0,[a15]
	jne	d15,d0,.L34
.L30:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   274                /* better match */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   275                uncon_pcb = pcb;
	ld.a	a14,[a10]32
.L34:
.L33:
.L32:
.L31:
.L29:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   276              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   277            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   278  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   279          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   280  #if SO_REUSE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   281          else if (!ip_addr_isany(&pcb->local_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   282            /* prefer specific IPs over catch-all */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   283            uncon_pcb = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   284          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   285  #endif /* SO_REUSE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   286        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   287  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   288        /* compare PCB remote addr+port to UDP source addr+port */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   289        if ((pcb->remote_port == src) &&
	ld.a	a15,[a10]32
.L454:
	ld.hu	d15,[a15]20
.L752:
	jne	d15,d9,.L35
.L753:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   290            (ip_addr_isany_val(pcb->remote_ip) ||
	ld.w	d15,[a15]4
	jeq	d15,#0,.L36
.L754:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   291             ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
	ld.a	a15,[a10]12
.L455:
	ld.w	d0,[a15]14
	jne	d15,d0,.L37
.L36:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   292          /* the first fully matching PCB */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   293          if (prev != NULL) {
	jz.a	a13,.L38
.L755:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   294            /* move the pcb to the front of udp_pcbs so that is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   295               found faster next time */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   296            prev->next = pcb->next;
	ld.a	a15,[a10]32
.L456:
	ld.a	a15,[a15]12
.L457:
	st.a	[a13]12,a15
.L756:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   297            pcb->next = udp_pcbs;
	ld.a	a15,[a10]32
.L458:
	ld.a	a2,udp_pcbs
.L757:
	st.a	[a15]12,a2
.L758:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   298            udp_pcbs = pcb;
	st.a	udp_pcbs,a15
.L759:
	j	.L39
.L38:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   299          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   300            UDP_STATS_INC(udp.cachehit);
	ld.a	a15,[a10]20
	ld.hu	d15,[a15]142
	add	d15,#1
	st.h	[a15]142,d15
.L760:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   301          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   302          break;
	j	.L40
.L37:
.L35:
.L28:
.L27:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   303        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   304      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   305  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   306      prev = pcb;
	ld.a	a15,[a10]32
.L459:
	mov.aa	a13,a15
.L761:
	ld.a	a15,[a15]12
.L25:
	st.a	[a10]32,a15
.L460:
	jnz.a	a15,.L26

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   307    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   308    /* no fully matching pcb found? then look for an unconnected pcb */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   309    if (pcb == NULL) {
.L40:
.L39:
	ld.a	a15,[a10]32
.L461:
	jnz.a	a15,.L41
.L463:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   310      pcb = uncon_pcb;
	mov.aa	a15,a14
	st.a	[a10]32,a14
.L41:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   311    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   312  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   313    /* Check checksum if this is a match or if it was directed at us. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   314    if (pcb != NULL) {
	jz.a	a15,.L42
.L462:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   315      for_us = 1;
	mov	d15,#1
	j	.L43
.L42:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   316    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   317  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   318      if (ip_current_is_v6()) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   319        for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   320      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   321  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   322  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   323      if (!ip_current_is_v6()) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   324        for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
	ld.a	a15,[a10]16
	ld.w	d15,[a12]4
	ld.w	d0,[a15]
	eq	d15,d15,d0
.L43:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   325      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   326  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   327    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   328  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   329    if (for_us) {
	jeq	d15,#0,.L44
.L762:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   330      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   331  #if CHECKSUM_CHECK_UDP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   332      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_UDP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   333  #if LWIP_UDPLITE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   334        if (ip_current_header_proto() == IP_PROTO_UDPLITE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   335          /* Do the UDP Lite checksum */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   336          u16_t chklen = lwip_ntohs(udphdr->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   337          if (chklen < sizeof(struct udp_hdr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   338            if (chklen == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   339              /* For UDP-Lite, checksum length of 0 means checksum
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   340                 over the complete packet (See RFC 3828 chap. 3.1) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   341              chklen = p->tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   342            } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   343              /* At least the UDP-Lite header must be covered by the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   344                 checksum! (Again, see RFC 3828 chap. 3.1) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   345              goto chkerr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   346            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   347          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   348          if (ip_chksum_pseudo_partial(p, IP_PROTO_UDPLITE,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   349                                       p->tot_len, chklen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   350                                       ip_current_src_addr(), ip_current_dest_addr()) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   351            goto chkerr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   352          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   353        } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   354  #endif /* LWIP_UDPLITE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   355        {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   356          if (udphdr->chksum != 0) {
	ld.a	a15,[a10]28
.L465:
	ld.hu	d15,[a15]6
.L464:
	jeq	d15,#0,.L45
.L763:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   357            if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
	ld.a	a4,[a10]24
.L467:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   358                                 ip_current_src_addr(),
	ld.a	a15,[a10]12
.L466:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   359                                 ip_current_dest_addr()) != 0) {
	mov	d4,#17
	ld.a	a6,[a10]16
.L764:
	ld.hu	d5,[a4]8
.L765:
	lea	a5,[a15]14
.L766:
	call	ip_chksum_pseudo
.L468:
	jne	d2,#0,.L46
.L45:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   360              goto chkerr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   361            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   362          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   363        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   364      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   365  #endif /* CHECKSUM_CHECK_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   366      if (pbuf_remove_header(p, UDP_HLEN)) {
	mov	d4,#8
	ld.a	a4,[a10]24
.L469:
	call	pbuf_remove_header
.L470:
	jeq	d2,#0,.L47
.L767:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   367        /* Can we cope with this failing? Just assert for now */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   368        LWIP_ASSERT("pbuf_remove_header failed\n", 0);
	movh.a	a15,#@his(.15.str)
	lea	a15,[a15]@los(.15.str)
	st.a	[a10],a15
	mov	d15,#368
	st.w	[a10]4,d15
.L426:
	fcall	.cocofun_62
.L471:
	st.a	[a10]8,a15
	fcall	.cocofun_63
	call	Ifx_Lwip_printf
.L768:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   369        UDP_STATS_INC(udp.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   370        MIB2_STATS_INC(mib2.udpinerrors);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   371        pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   372        goto end;
	j	.L48
.L47:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   373      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   374  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   375      if (pcb != NULL) {
	ld.a	a15,[a10]32
.L472:
	jz.a	a15,.L49
.L769:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   376        MIB2_STATS_INC(mib2.udpindatagrams);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   377  #if SO_REUSE && SO_REUSE_RXTOALL
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   378        if (ip_get_option(pcb, SOF_REUSEADDR) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   379            (broadcast || ip_addr_ismulticast(ip_current_dest_addr()))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   380          /* pass broadcast- or multicast packets to all multicast pcbs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   381             if SOF_REUSEADDR is set on the first match */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   382          struct udp_pcb *mpcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   383          for (mpcb = udp_pcbs; mpcb != NULL; mpcb = mpcb->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   384            if (mpcb != pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   385              /* compare PCB local addr+port to UDP destination addr+port */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   386              if ((mpcb->local_port == dest) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   387                  (udp_input_local_match(mpcb, inp, broadcast) != 0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   388                /* pass a copy of the packet to all local matches */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   389                if (mpcb->recv != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   390                  struct pbuf *q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   391                  q = pbuf_clone(PBUF_RAW, PBUF_POOL, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   392                  if (q != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   393                    mpcb->recv(mpcb->recv_arg, mpcb, q, ip_current_src_addr(), src);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   394                  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   395                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   396              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   397            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   398          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   399        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   400  #endif /* SO_REUSE && SO_REUSE_RXTOALL */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   401        /* callback */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   402        if (pcb->recv != NULL) {
	ld.a	a2,[a15]24
.L770:
	jz.a	a2,.L50
.L771:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   403          /* now the recv function is responsible for freeing p */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   404          pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
	ld.a	a4,[a15]28
.L772:
	ld.a	a15,[a10]12
.L473:
	mov	d4,d9
	ld.a	a5,[a10]32
.L474:
	ld.a	a6,[a10]24
.L475:
	lea	a7,[a15]14
.L773:
	ji	a2
.L49:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   405        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   406          /* no recv function registered? then we have to free the pbuf! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   407          pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   408          goto end;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   409        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   410      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   411        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   412  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   413  #if LWIP_ICMP || LWIP_ICMP6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   414        /* No match was found, send ICMP destination port unreachable unless
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   415           destination address was broadcast/multicast. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   416        if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
	jne	d8,#0,.L52
.L774:
	ld.a	a15,[a10]16
.L476:
	mov	d0,#224
	ld.w	d15,[a15]
	and	d15,#240
	jeq	d15,d0,.L53
.L775:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   417          /* move payload pointer back to ip header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   418          pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
	ld.a	a15,[a10]12
.L776:
	ld.a	a4,[a10]24
.L477:
	ld.hu	d15,[a15]12
.L777:
	add	d15,d15,#8
.L778:
	extr	d4,d15,#0,#16
	call	pbuf_header_force
.L478:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   419          icmp_port_unreach(ip_current_is_v6(), p);
	mov	d4,#3
	ld.a	a4,[a10]24
.L479:
	call	icmp_dest_unreach
.L53:
.L52:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   420        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   421  #endif /* LWIP_ICMP || LWIP_ICMP6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   422        UDP_STATS_INC(udp.proterr);
	ld.a	a15,[a10]20
	ld.hu	d15,[a15]136
	add	d15,#1
	st.h	[a15]136,d15
.L779:
	j	.L54

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   423        UDP_STATS_INC(udp.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   424        MIB2_STATS_INC(mib2.udpnoports);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   425        pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   426      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   427    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   428      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   429    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   430  end:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   431    PERF_STOP("udp_input");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   432    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   433  #if CHECKSUM_CHECK_UDP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   434  chkerr:
.L46:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   435    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   436                ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   437    UDP_STATS_INC(udp.chkerr);
	ld.a	a15,[a10]20
	ld.hu	d15,[a15]128
	add	d15,#1
	st.h	[a15]128,d15
.L54:
.L48:
.L24:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   438    UDP_STATS_INC(udp.drop);
	ld.a	a15,[a10]20
	ld.hu	d15,[a15]126
	add	d15,#1
	st.h	[a15]126,d15
.L50:
.L44:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   439    MIB2_STATS_INC(mib2.udpinerrors);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   440    pbuf_free(p);
	ld.a	a4,[a10]24
.L480:
	j	pbuf_free
.L381:
	
__udp_input_function_end:
	.size	udp_input,__udp_input_function_end-udp_input
.L272:
	; End of function
	
	.sdecl	'.text.udp.udp_send',code,cluster('udp_send')
	.sect	'.text.udp.udp_send'
	.align	2
	
	.global	udp_send

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   441    PERF_STOP("udp_input");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   442  #endif /* CHECKSUM_CHECK_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   443  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   444  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   445  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   446   * @ingroup udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   447   * Sends the pbuf p using UDP. The pbuf is not deallocated.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   448   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   449   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   450   * @param pcb UDP PCB used to send the data.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   451   * @param p chain of pbuf's to be sent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   452   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   453   * The datagram will be sent to the current remote_ip & remote_port
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   454   * stored in pcb. If the pcb is not bound to a port, it will
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   455   * automatically be bound to a random port.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   456   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   457   * @return lwIP error code.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   458   * - ERR_OK. Successful. No error occurred.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   459   * - ERR_MEM. Out of memory.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   460   * - ERR_RTE. Could not find route to destination address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   461   * - ERR_VAL. No PCB or PCB is dual-stack
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   462   * - More errors could be returned by lower protocol layers.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   463   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   464   * @see udp_disconnect() udp_sendto()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   465   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   466  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   467  udp_send(struct udp_pcb *pcb, struct pbuf *p)
; Function udp_send
.L177:
udp_send:	.type	func
	sub.a	a10,#16
.L481:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   468  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   469    LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
	jnz.a	a4,.L55
.L734:
	movh.a	a15,#@his(.18.str)
	lea	a15,[a15]@los(.18.str)
	mov	d15,#469
	j	.L56
.L55:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   470    LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
	jnz.a	a5,.L57
.L735:
	mov	d15,#470
	movh.a	a15,#@his(.19.str)
	lea	a15,[a15]@los(.19.str)

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   471  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   472    if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   473      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   474    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   475  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   476    /* send to the packet using remote ip and port stored in the pcb */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   477    return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   478  }
.L56:
	st.a	[a10],a15
	st.w	[a10]4,d15
	fcall	.cocofun_62
	st.a	[a10]8,a15
	fcall	.cocofun_63
.L482:
	call	Ifx_Lwip_printf
.L483:
	mov	d2,#-16
	ret
.L57:
	ld.hu	d4,[a4]20
.L736:
	lea	a6,[a4]4
.L737:
	j	udp_sendto
.L378:
	
__udp_send_function_end:
	.size	udp_send,__udp_send_function_end-udp_send
.L267:
	; End of function
	
	.sdecl	'.text.udp.udp_sendto',code,cluster('udp_sendto')
	.sect	'.text.udp.udp_sendto'
	.align	2
	
	.global	udp_sendto

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   479  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   480  #if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   481  /** @ingroup udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   482   * Same as udp_send() but with checksum
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   483   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   484  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   485  udp_send_chksum(struct udp_pcb *pcb, struct pbuf *p,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   486                  u8_t have_chksum, u16_t chksum)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   487  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   488    LWIP_ERROR("udp_send_chksum: invalid pcb", pcb != NULL, return ERR_ARG);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   489    LWIP_ERROR("udp_send_chksum: invalid pbuf", p != NULL, return ERR_ARG);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   490  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   491    if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   492      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   493    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   494  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   495    /* send to the packet using remote ip and port stored in the pcb */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   496    return udp_sendto_chksum(pcb, p, &pcb->remote_ip, pcb->remote_port,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   497                             have_chksum, chksum);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   498  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   499  #endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   500  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   501  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   502   * @ingroup udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   503   * Send data to a specified address using UDP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   504   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   505   * @param pcb UDP PCB used to send the data.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   506   * @param p chain of pbuf's to be sent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   507   * @param dst_ip Destination IP address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   508   * @param dst_port Destination UDP port.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   509   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   510   * dst_ip & dst_port are expected to be in the same byte order as in the pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   511   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   512   * If the PCB already has a remote address association, it will
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   513   * be restored after the data is sent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   514   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   515   * @return lwIP error code (@see udp_send for possible error codes)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   516   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   517   * @see udp_disconnect() udp_send()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   518   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   519  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   520  udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
; Function udp_sendto
.L179:
udp_sendto:	.type	func
	sub.a	a10,#16
.L484:
	mov.aa	a15,a4
.L485:
	mov.aa	a12,a5
.L493:
	mov.aa	a13,a6
.L492:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   521             const ip_addr_t *dst_ip, u16_t dst_port)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   522  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   523  #if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   524    return udp_sendto_chksum(pcb, p, dst_ip, dst_port, 0, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   525  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   526  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   527  /** @ingroup udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   528   * Same as udp_sendto(), but with checksum */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   529  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   530  udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   531                    u16_t dst_port, u8_t have_chksum, u16_t chksum)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   532  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   533  #endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   534    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   535  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   536    LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
	mov	d15,d4
	jnz.a	a15,.L60
.L487:
	movh.a	a15,#@his(.20.str)
.L486:
	lea	a15,[a15]@los(.20.str)
	mov	d15,#536
	j	.L61
.L60:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   537    LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
	jnz.a	a12,.L62
.L724:
	movh.a	a15,#@his(.21.str)
.L489:
	lea	a15,[a15]@los(.21.str)
	mov	d15,#537
	j	.L63
.L62:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   538    LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
	jnz.a	a13,.L64
.L725:
	mov	d15,#538
	movh.a	a15,#@his(.22.str)
.L488:
	lea	a15,[a15]@los(.22.str)

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   539  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   540    if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   541      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   542    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   543  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   544    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   545  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   546    if (pcb->netif_idx != NETIF_NO_INDEX) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   547      netif = netif_get_by_index(pcb->netif_idx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   548    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   549  #if LWIP_MULTICAST_TX_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   550      netif = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   551      if (ip_addr_ismulticast(dst_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   552        /* For IPv6, the interface to use for packets with a multicast destination
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   553         * is specified using an interface index. The same approach may be used for
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   554         * IPv4 as well, in which case it overrides the IPv4 multicast override
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   555         * address below. Here we have to look up the netif by going through the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   556         * list, but by doing so we skip a route lookup. If the interface index has
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   557         * gone stale, we fall through and do the regular route lookup after all. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   558        if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   559          netif = netif_get_by_index(pcb->mcast_ifindex);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   560        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   561  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   562        else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   563  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   564          if (IP_IS_V4(dst_ip))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   565  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   566          {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   567            /* IPv4 does not use source-based routing by default, so we use an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   568               administratively selected interface for multicast by default.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   569               However, this can be overridden by setting an interface address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   570               in pcb->mcast_ip4 that is used for routing. If this routing lookup
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   571               fails, we try regular routing as though no override was set. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   572            if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   573                !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   574              netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   575            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   576          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   577  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   578      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   579  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   580      if (netif == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   581  #endif /* LWIP_MULTICAST_TX_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   582      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   583        /* find the outgoing network interface for this packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   584        netif = ip_route(&pcb->local_ip, dst_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   585      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   586    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   587  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   588    /* no outgoing network interface could be found? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   589    if (netif == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   590      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   591      ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   592      LWIP_DEBUGF(UDP_DEBUG, ("\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   593      UDP_STATS_INC(udp.rterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   594      return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   595    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   596  #if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   597    return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   598  #else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   599    return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   600  #endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   601  }
.L61:
.L63:
	st.a	[a10],a15
	st.w	[a10]4,d15
	fcall	.cocofun_62
	st.a	[a10]8,a15
	fcall	.cocofun_63
.L490:
	call	Ifx_Lwip_printf
.L491:
	mov	d2,#-16
	ret
.L64:
	ld.bu	d4,[a15]8
.L496:
	jeq	d4,#0,.L66
.L726:
	call	netif_get_by_index
.L494:
	j	.L67
.L66:
	mov.aa	a4,a13
.L498:
	call	ip4_route
.L67:
	jnz.a	a2,.L68
.L727:
	movh.a	a15,#@his(lwip_stats+134)
.L497:
	ld.hu	d15,[a15]@los(lwip_stats+134)
.L495:
	mov	d2,#-4
.L728:
	add	d15,#1
	st.h	[a15]@los(lwip_stats+134),d15
.L729:
	ret
.L68:
	mov.aa	a4,a15
.L499:
	mov.aa	a5,a12
.L500:
	mov.aa	a6,a13
.L501:
	mov	d4,d15
	mov.aa	a7,a2
.L502:
	j	udp_sendto_if
.L372:
	
__udp_sendto_function_end:
	.size	udp_sendto,__udp_sendto_function_end-udp_sendto
.L262:
	; End of function
	
	.sdecl	'.text.udp.udp_sendto_if',code,cluster('udp_sendto_if')
	.sect	'.text.udp.udp_sendto_if'
	.align	2
	
	.global	udp_sendto_if

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   602  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   603  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   604   * @ingroup udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   605   * Send data to a specified address using UDP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   606   * The netif used for sending can be specified.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   607   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   608   * This function exists mainly for DHCP, to be able to send UDP packets
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   609   * on a netif that is still down.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   610   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   611   * @param pcb UDP PCB used to send the data.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   612   * @param p chain of pbuf's to be sent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   613   * @param dst_ip Destination IP address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   614   * @param dst_port Destination UDP port.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   615   * @param netif the netif used for sending.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   616   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   617   * dst_ip & dst_port are expected to be in the same byte order as in the pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   618   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   619   * @return lwIP error code (@see udp_send for possible error codes)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   620   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   621   * @see udp_disconnect() udp_send()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   622   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   623  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   624  udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
; Function udp_sendto_if
.L181:
udp_sendto_if:	.type	func
	sub.a	a10,#16
.L503:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   625                const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   626  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   627  #if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   628    return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, 0, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   629  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   630  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   631  /** Same as udp_sendto_if(), but with checksum */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   632  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   633  udp_sendto_if_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   634                       u16_t dst_port, struct netif *netif, u8_t have_chksum,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   635                       u16_t chksum)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   636  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   637  #endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   638    const ip_addr_t *src_ip;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   639  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   640    LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
	jnz.a	a4,.L71
.L685:
	movh.a	a15,#@his(.26.str)
	lea	a15,[a15]@los(.26.str)
	mov	d15,#640
	j	.L72
.L71:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   641    LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
	jnz.a	a5,.L73
.L686:
	movh.a	a15,#@his(.27.str)
	lea	a15,[a15]@los(.27.str)
	mov	d15,#641
	j	.L74
.L73:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   642    LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
	jnz.a	a6,.L75
.L687:
	movh.a	a15,#@his(.28.str)
	lea	a15,[a15]@los(.28.str)
	mov	d15,#642
	j	.L76
.L75:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   643    LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
	jnz.a	a7,.L77
.L688:
	mov	d15,#643
	movh.a	a15,#@his(.29.str)
	lea	a15,[a15]@los(.29.str)

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   644  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   645    if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   646      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   647    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   648  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   649    /* PCB local address is IP_ANY_ADDR or multicast? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   650  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   651    if (IP_IS_V6(dst_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   652      if (ip6_addr_isany(ip_2_ip6(&pcb->local_ip)) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   653          ip6_addr_ismulticast(ip_2_ip6(&pcb->local_ip))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   654        src_ip = ip6_select_source_address(netif, ip_2_ip6(dst_ip));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   655        if (src_ip == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   656          /* No suitable source address was found. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   657          return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   658        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   659      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   660        /* use UDP PCB local IPv6 address as source address, if still valid. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   661        if (netif_get_ip6_addr_match(netif, ip_2_ip6(&pcb->local_ip)) < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   662          /* Address isn't valid anymore. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   663          return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   664        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   665        src_ip = &pcb->local_ip;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   666      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   667    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   668  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   669  #if LWIP_IPV4 && LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   670    else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   671  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   672  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   673      if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   674          ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   675        /* if the local_ip is any or multicast
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   676         * use the outgoing network interface IP address as source address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   677        src_ip = netif_ip_addr4(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   678      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   679        /* check if UDP PCB local IP address is correct
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   680         * this could be an old address if netif->ip_addr has changed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   681        if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   682          /* local_ip doesn't match, drop the packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   683          return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   684        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   685        /* use UDP PCB local IP address as source address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   686        src_ip = &pcb->local_ip;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   687      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   688  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   689  #if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   690    return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   691  #else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   692    return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   693  #endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   694  }
.L72:
.L74:
.L76:
	st.a	[a10],a15
	st.w	[a10]4,d15
	fcall	.cocofun_62
	st.a	[a10]8,a15
	fcall	.cocofun_63
.L504:
	call	Ifx_Lwip_printf
.L505:
	mov	d2,#-16
	ret
.L77:
	ld.w	d0,[a4]
	jeq	d0,#0,.L79
.L689:
	and	d15,d0,#240
	mov	d1,#224
	jne	d15,d1,.L80
.L79:
	lea	a15,[a7]4
.L506:
	j	.L81
.L80:
	ld.w	d15,[a7]4
	jeq	d15,d0,.L82
.L690:
	mov	d2,#-4
	ret
.L82:
	mov.aa	a15,a4
.L81:
	st.a	[a10],a15
.L691:
	j	udp_sendto_if_src
.L350:
	
__udp_sendto_if_function_end:
	.size	udp_sendto_if,__udp_sendto_if_function_end-udp_sendto_if
.L252:
	; End of function
	
	.sdecl	'.text.udp.udp_sendto_if_src',code,cluster('udp_sendto_if_src')
	.sect	'.text.udp.udp_sendto_if_src'
	.align	2
	
	.global	udp_sendto_if_src

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   695  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   696  /** @ingroup udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   697   * Same as @ref udp_sendto_if, but with source address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   698  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   699  udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
; Function udp_sendto_if_src
.L183:
udp_sendto_if_src:	.type	func
	sub.a	a10,#24
.L507:
	mov.aa	a12,a4
.L518:
	mov.aa	a13,a5
.L517:
	st.a	[a10]12,a6
.L513:
	mov	d8,d4
	st.a	[a10]16,a7
.L515:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   700                    const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   701  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   702  #if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   703    return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, 0, 0, src_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   704  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   705  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   706  /** Same as udp_sendto_if_src(), but with checksum */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   707  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   708  udp_sendto_if_src_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   709                           u16_t dst_port, struct netif *netif, u8_t have_chksum,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   710                           u16_t chksum, const ip_addr_t *src_ip)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   711  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   712  #endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   713    struct udp_hdr *udphdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   714    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   715    struct pbuf *q; /* q will be sent down the stack */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   716    u8_t ip_proto;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   717    u8_t ttl;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   718  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   719    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   720  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   721    LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
	jnz.a	a12,.L85
.L696:
	movh.a	a15,#@his(.30.str)
	lea	a15,[a15]@los(.30.str)
	mov	d15,#721
	j	.L86
.L85:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   722    LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
	jnz.a	a13,.L87
.L697:
	movh.a	a15,#@his(.31.str)
	lea	a15,[a15]@los(.31.str)
	mov	d15,#722
	j	.L88
.L87:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   723    LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
	ld.a	a2,[a10]12
.L508:
	jnz.a	a2,.L89
	movh.a	a15,#@his(.32.str)
	lea	a15,[a15]@los(.32.str)
	mov	d15,#723
	j	.L90
.L89:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   724    LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
	ld.a	a2,[a10]24
.L510:
	jnz.a	a2,.L91
	movh.a	a15,#@his(.33.str)
	lea	a15,[a15]@los(.33.str)
	mov	d15,#724
	j	.L92
.L91:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   725    LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
	ld.a	a15,[a10]16
.L509:
	jnz.a	a15,.L93
	mov	d15,#725
	movh.a	a15,#@his(.34.str)
.L511:
	lea	a15,[a15]@los(.34.str)

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   726  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   727    if (!IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   728        !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   729      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   730    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   731  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   732  #if LWIP_IPV4 && IP_SOF_BROADCAST
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   733    /* broadcast filter? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   734    if (!ip_get_option(pcb, SOF_BROADCAST) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   735  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   736        IP_IS_V4(dst_ip) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   737  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   738        ip_addr_isbroadcast(dst_ip, netif)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   739      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   740                  ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   741      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   742    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   743  #endif /* LWIP_IPV4 && IP_SOF_BROADCAST */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   744  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   745    /* if the PCB is not yet bound to a port, bind it here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   746    if (pcb->local_port == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   747      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   748      err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   749      if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   750        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   751        return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   752      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   753    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   754  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   755    /* packet too large to add a UDP header without causing an overflow? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   756    if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   757      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   758    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   759    /* not enough space to add an UDP header to first pbuf in given p chain? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   760    if (pbuf_add_header(p, UDP_HLEN)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   761      /* allocate header in a separate new pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   762      q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   763      /* new header pbuf could not be allocated? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   764      if (q == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   765        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   766        return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   767      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   768      if (p->tot_len != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   769        /* chain header q in front of given pbuf p (only if p contains data) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   770        pbuf_chain(q, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   771      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   772      /* first pbuf q points to header pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   773      LWIP_DEBUGF(UDP_DEBUG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   774                  ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   775    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   776      /* adding space for header within p succeeded */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   777      /* first pbuf q equals given pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   778      q = p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   779      LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   780    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   781    LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   782                (q->len >= sizeof(struct udp_hdr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   783    /* q now represents the packet to be sent */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   784    udphdr = (struct udp_hdr *)q->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   785    udphdr->src = lwip_htons(pcb->local_port);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   786    udphdr->dest = lwip_htons(dst_port);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   787    /* in UDP, 0 checksum means 'no checksum' */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   788    udphdr->chksum = 0x0000;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   789  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   790    /* Multicast Loop? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   791  #if LWIP_MULTICAST_TX_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   792    if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   793      q->flags |= PBUF_FLAG_MCASTLOOP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   794    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   795  #endif /* LWIP_MULTICAST_TX_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   796  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   797    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   798  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   799  #if LWIP_UDPLITE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   800    /* UDP Lite protocol? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   801    if (pcb->flags & UDP_FLAGS_UDPLITE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   802      u16_t chklen, chklen_hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   803      LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP LITE packet length %"U16_F"\n", q->tot_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   804      /* set UDP message length in UDP header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   805      chklen_hdr = chklen = pcb->chksum_len_tx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   806      if ((chklen < sizeof(struct udp_hdr)) || (chklen > q->tot_len)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   807        if (chklen != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   808          LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP LITE pcb->chksum_len is illegal: %"U16_F"\n", chklen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   809        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   810        /* For UDP-Lite, checksum length of 0 means checksum
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   811           over the complete packet. (See RFC 3828 chap. 3.1)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   812           At least the UDP-Lite header must be covered by the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   813           checksum, therefore, if chksum_len has an illegal
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   814           value, we generate the checksum over the complete
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   815           packet to be safe. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   816        chklen_hdr = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   817        chklen = q->tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   818      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   819      udphdr->len = lwip_htons(chklen_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   820      /* calculate checksum */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   821  #if CHECKSUM_GEN_UDP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   822      IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   823  #if LWIP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   824        if (have_chksum) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   825          chklen = UDP_HLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   826        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   827  #endif /* LWIP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   828        udphdr->chksum = ip_chksum_pseudo_partial(q, IP_PROTO_UDPLITE,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   829                         q->tot_len, chklen, src_ip, dst_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   830  #if LWIP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   831        if (have_chksum) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   832          u32_t acc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   833          acc = udphdr->chksum + (u16_t)~(chksum);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   834          udphdr->chksum = FOLD_U32T(acc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   835        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   836  #endif /* LWIP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   837  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   838        /* chksum zero must become 0xffff, as zero means 'no checksum' */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   839        if (udphdr->chksum == 0x0000) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   840          udphdr->chksum = 0xffff;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   841        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   842      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   843  #endif /* CHECKSUM_GEN_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   844  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   845      ip_proto = IP_PROTO_UDPLITE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   846    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   847  #endif /* LWIP_UDPLITE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   848    {      /* UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   849      LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   850      udphdr->len = lwip_htons(q->tot_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   851      /* calculate checksum */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   852  #if CHECKSUM_GEN_UDP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   853      IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   854        /* Checksum is mandatory over IPv6. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   855        if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   856          u16_t udpchksum;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   857  #if LWIP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   858          if (have_chksum) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   859            u32_t acc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   860            udpchksum = ip_chksum_pseudo_partial(q, IP_PROTO_UDP,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   861                                                 q->tot_len, UDP_HLEN, src_ip, dst_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   862            acc = udpchksum + (u16_t)~(chksum);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   863            udpchksum = FOLD_U32T(acc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   864          } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   865  #endif /* LWIP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   866          {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   867            udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   868                                         src_ip, dst_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   869          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   870  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   871          /* chksum zero must become 0xffff, as zero means 'no checksum' */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   872          if (udpchksum == 0x0000) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   873            udpchksum = 0xffff;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   874          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   875          udphdr->chksum = udpchksum;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   876        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   877      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   878  #endif /* CHECKSUM_GEN_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   879      ip_proto = IP_PROTO_UDP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   880    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   881  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   882    /* Determine TTL to use */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   883  #if LWIP_MULTICAST_TX_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   884    ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   885  #else /* LWIP_MULTICAST_TX_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   886    ttl = pcb->ttl;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   887  #endif /* LWIP_MULTICAST_TX_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   888  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   889    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   890    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   891    /* output to IP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   892    NETIF_SET_HINTS(netif, &(pcb->netif_hints));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   893    err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   894    NETIF_RESET_HINTS(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   895  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   896    /* @todo: must this be increased even if error occurred? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   897    MIB2_STATS_INC(mib2.udpoutdatagrams);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   898  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   899    /* did we chain a separate header pbuf earlier? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   900    if (q != p) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   901      /* free the header pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   902      pbuf_free(q);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   903      q = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   904      /* p is still referenced by the caller, and will live on */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   905    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   906  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   907    UDP_STATS_INC(udp.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   908    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   909  }
.L86:
.L88:
.L90:
.L92:
	st.a	[a10],a15
	st.w	[a10]4,d15
	fcall	.cocofun_62
	st.a	[a10]8,a15
	fcall	.cocofun_63
.L512:
	call	Ifx_Lwip_printf
.L516:
	mov	d2,#-16
	ret
.L93:
	ld.hu	d15,[a12]18
.L698:
	jne	d15,#0,.L95
.L699:
	mov	d4,#0
	mov.aa	a5,a12
.L519:
	call	udp_bind
.L520:
	mov	d15,d2
.L521:
	jne	d15,#0,.L96
.L95:
	ld.hu	d15,[a13]8
.L700:
	add	d0,d15,#8
.L701:
	extr.u	d0,d0,#0,#16
.L702:
	jlt.u	d0,d15,.L97
.L703:
	mov	d4,#8
	mov.aa	a4,a13
.L522:
	call	pbuf_add_header
.L523:
	jeq	d2,#0,.L98
.L704:
	mov	d4,#36
.L705:
	mov	d5,#8
.L706:
	mov	d6,#640
	call	pbuf_alloc
.L524:
	mov.aa	a14,a2
.L525:
	jnz.a	a14,.L99
.L97:
	mov	d2,#-1
	ret
.L99:
	ld.hu	d15,[a13]8
.L707:
	jeq	d15,#0,.L101
.L708:
	mov.aa	a4,a14
.L526:
	mov.aa	a5,a13
.L528:
	call	pbuf_chain
.L527:
	j	.L102
.L98:
	mov.aa	a14,a13
.L102:
.L101:
	ld.hu	d15,[a14]10
	jge.u	d15,#8,.L103
	movh.a	a2,#@his(.40.str)
	lea	a2,[a2]@los(.40.str)
	st.a	[a10],a2
	mov	d15,#781
	st.w	[a10]4,d15
.L514:
	fcall	.cocofun_62
.L529:
	st.a	[a10]8,a15
	fcall	.cocofun_63
	call	Ifx_Lwip_printf
.L103:
	ld.a	a15,[a14]4
.L530:
	ld.hu	d4,[a12]18
	call	lwip_htons
.L709:
	st.h	[a15],d2
.L710:
	mov	d4,d8
	call	lwip_htons
.L711:
	st.h	[a15]2,d2
.L712:
	mov	d15,#0
	st.h	[a15]6,d15
.L713:
	ld.hu	d4,[a14]8
	call	lwip_htons
.L714:
	st.h	[a15]4,d2
.L715:
	ld.bu	d15,[a12]16
.L716:
	jnz.t	d15:0,.L104
.L370:
	mov	d4,#17
	ld.hu	d5,[a14]8
.L717:
	mov.aa	a4,a14
.L532:
	ld.a	a5,[a10]24
.L534:
	ld.a	a6,[a10]12
.L535:
	call	ip_chksum_pseudo
.L533:
	mov.u	d15,#65535
.L718:
	sel	d2,d2,d2,d15
	st.h	[a15]6,d2
.L104:
	ld.bu	d4,[a12]11
.L719:
	ld.bu	d5,[a12]10
	mov	d6,#17
	mov.aa	a4,a14
.L536:
	ld.a	a5,[a10]24
.L538:
	ld.a	a6,[a10]12
.L539:
	ld.a	a7,[a10]16
.L540:
	call	ip4_output_if_src
.L537:
	mov	d15,d2
	jeq.a	a14,a13,.L106
.L541:
	mov.aa	a4,a14
.L542:
	call	pbuf_free
.L106:
	movh.a	a15,#@his(lwip_stats+120)
.L531:
	ld.hu	d0,[a15]@los(lwip_stats+120)
	add	d0,#1
	st.h	[a15]@los(lwip_stats+120),d0
.L96:
	mov	d2,d15
	ret
.L359:
	
__udp_sendto_if_src_function_end:
	.size	udp_sendto_if_src,__udp_sendto_if_src_function_end-udp_sendto_if_src
.L257:
	; End of function
	
	.sdecl	'.text.udp.udp_bind',code,cluster('udp_bind')
	.sect	'.text.udp.udp_bind'
	.align	2
	
	.global	udp_bind

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   910  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   911  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   912   * @ingroup udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   913   * Bind an UDP PCB.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   914   * 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   915   * @param pcb UDP PCB to be bound with a local address ipaddr and port.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   916   * @param ipaddr local IP address to bind with. Use IP_ANY_TYPE to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   917   * bind to all local interfaces.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   918   * @param port local UDP port to bind with. Use 0 to automatically bind
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   919   * to a random port between UDP_LOCAL_PORT_RANGE_START and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   920   * UDP_LOCAL_PORT_RANGE_END.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   921   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   922   * ipaddr & port are expected to be in the same byte order as in the pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   923   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   924   * @return lwIP error code.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   925   * - ERR_OK. Successful. No error occurred.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   926   * - ERR_USE. The specified ipaddr and port are already bound to by
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   927   * another UDP PCB.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   928   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   929   * @see udp_disconnect()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   930   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   931  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   932  udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
; Function udp_bind
.L185:
udp_bind:	.type	func
	sub.a	a10,#16
.L543:
	mov.aa	a13,a4
.L545:
	mov.aa	a12,a5
.L546:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   933  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   934    struct udp_pcb *ipcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   935    u8_t rebind;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   936  #if LWIP_IPV6 && LWIP_IPV6_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   937    ip_addr_t zoned_ipaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   938  #endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   939  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   940    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   941  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   942  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   943    /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   944    if (ipaddr == NULL) {
	jnz.a	a12,.L108
.L621:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   945      ipaddr = IP4_ADDR_ANY;
	lea	a12,ip_addr_any
.L108:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   946    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   947  #else /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   948    LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   949  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   950  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   951    LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
	jnz.a	a13,.L109
.L622:
	movh.a	a15,#@his(.45.str)
	lea	a15,[a15]@los(.45.str)
	st.a	[a10],a15
	mov	d15,#951
	st.w	[a10]4,d15
.L544:
	fcall	.cocofun_62
.L547:
	st.a	[a10]8,a15
	fcall	.cocofun_63
.L548:
	call	Ifx_Lwip_printf
.L549:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   952  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   953    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   954    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   955    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   956  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   957    rebind = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   958    /* Check for double bind and rebind of the same pcb */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   959    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   960      /* is this UDP PCB already on active list? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   961      if (pcb == ipcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   962        rebind = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   963        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   964      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   965    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   966  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   967  #if LWIP_IPV6 && LWIP_IPV6_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   968    /* If the given IP address should have a zone but doesn't, assign one now.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   969     * This is legacy support: scope-aware callers should always provide properly
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   970     * zoned source addresses. Do the zone selection before the address-in-use
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   971     * check below; as such we have to make a temporary copy of the address. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   972    if (IP_IS_V6(ipaddr) && ip6_addr_lacks_zone(ip_2_ip6(ipaddr), IP6_UNKNOWN)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   973      ip_addr_copy(zoned_ipaddr, *ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   974      ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   975      ipaddr = &zoned_ipaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   976    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   977  #endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   978  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   979    /* no port specified? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   980    if (port == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   981      port = udp_new_port();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   982      if (port == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   983        /* no more ports available in local range */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   984        LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   985        return ERR_USE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   986      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   987    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   988      for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   989        if (pcb != ipcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   990          /* By default, we don't allow to bind to a port that any other udp
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   991             PCB is already bound to, unless *all* PCBs with that port have tha
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   992             REUSEADDR flag set. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   993  #if SO_REUSE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   994          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   995              !ip_get_option(ipcb, SOF_REUSEADDR))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   996  #endif /* SO_REUSE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   997          {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   998            /* port matches that of PCB in list and REUSEADDR not set -> reject */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	   999            if ((ipcb->local_port == port) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1000                /* IP address matches or any IP used? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1001                (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1002                ip_addr_isany(&ipcb->local_ip))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1003              /* other PCB already binds to this local IP and port */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1004              LWIP_DEBUGF(UDP_DEBUG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1005                          ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1006              return ERR_USE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1007            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1008          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1009        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1010      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1011    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1012  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1013    ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1014  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1015    pcb->local_port = port;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1016    mib2_udp_bind(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1017    /* pcb not active yet? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1018    if (rebind == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1019      /* place the PCB on the active list if not already there */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1020      pcb->next = udp_pcbs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1021      udp_pcbs = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1022    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1023    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1024    ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1025    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1026    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1027  }
	mov	d2,#-16
	ret
.L109:
	ld.a	a15,udp_pcbs
.L551:
	mov	d8,#0
.L552:
	mov.aa	a2,a15
.L553:
	j	.L111
.L112:
	jne.a	a13,a2,.L113
.L623:
	mov	d8,#1
	j	.L114
.L113:
	ld.a	a2,[a2]12
.L111:
	jnz.a	a2,.L112
.L114:
	jne	d4,#0,.L115
.L624:
	call	udp_new_port
.L550:
	mov	d4,d2
.L554:
	jne	d4,#0,.L116
.L625:
	j	.L117
.L115:
	ld.w	d0,[a12]
.L626:
	j	.L118
.L119:
	jeq.a	a13,a15,.L120
.L627:
	ld.hu	d15,[a15]18
.L556:
	jne	d15,d4,.L121
.L557:
	ld.w	d15,[a15]
.L558:
	jeq	d15,d0,.L122
.L628:
	jeq	d0,#0,.L123
.L629:
	jne	d15,#0,.L124
.L123:
.L122:
.L117:
	mov	d2,#-8
	ret
.L124:
.L121:
.L120:
	ld.a	a15,[a15]12
.L118:
	jnz.a	a15,.L119
.L116:
	ld.w	d15,[a12]
.L630:
	st.w	[a13],d15
.L631:
	st.h	[a13]18,d4
.L632:
	jne	d8,#0,.L126
.L633:
	ld.a	a15,udp_pcbs
.L634:
	st.a	[a13]12,a15
.L635:
	st.a	udp_pcbs,a13
.L126:
	movh.a	a4,#@his(.50.str)
	lea	a4,[a4]@los(.50.str)
	call	Ifx_Lwip_printf
.L555:
	ld.w	d0,[a13]
	movh.a	a4,#@his(.10.str)
	extr.u	d15,d0,#0,#8
	st.w	[a10],d15
	extr.u	d15,d0,#8,#8
	st.w	[a10]4,d15
	extr.u	d15,d0,#16,#8
	st.w	[a10]8,d15
	sh	d15,d0,#-24
	st.w	[a10]12,d15
	lea	a4,[a4]@los(.10.str)
	call	Ifx_Lwip_printf
.L636:
	ld.hu	d15,[a13]18
	st.w	[a10],d15
	movh.a	a4,#@his(.51.str)
	lea	a4,[a4]@los(.51.str)
	call	Ifx_Lwip_printf
.L637:
	mov	d2,#0
	ret
.L323:
	
__udp_bind_function_end:
	.size	udp_bind,__udp_bind_function_end-udp_bind
.L227:
	; End of function
	
	.sdecl	'.text.udp.udp_bind_netif',code,cluster('udp_bind_netif')
	.sect	'.text.udp.udp_bind_netif'
	.align	2
	
	.global	udp_bind_netif

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1028  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1029  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1030   * @ingroup udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1031   * Bind an UDP PCB to a specific netif.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1032   * After calling this function, all packets received via this PCB
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1033   * are guaranteed to have come in via the specified netif, and all
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1034   * outgoing packets will go out via the specified netif.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1035   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1036   * @param pcb UDP PCB to be bound.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1037   * @param netif netif to bind udp pcb to. Can be NULL.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1038   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1039   * @see udp_disconnect()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1040   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1041  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1042  udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
; Function udp_bind_netif
.L187:
udp_bind_netif:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1043  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1044    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1045  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1046    if (netif != NULL) {
	jz.a	a5,.L128
.L642:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1047      pcb->netif_idx = netif_get_index(netif);
	ld.bu	d15,[a5]44
.L643:
	add	d15,#1
	st.b	[a4]8,d15
.L644:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1048    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1049      pcb->netif_idx = NETIF_NO_INDEX;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1050    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1051  }
	ret
.L128:
	mov	d15,#0
	st.b	[a4]8,d15
.L645:
	ret
.L331:
	
__udp_bind_netif_function_end:
	.size	udp_bind_netif,__udp_bind_netif_function_end-udp_bind_netif
.L232:
	; End of function
	
	.sdecl	'.text.udp.udp_connect',code,cluster('udp_connect')
	.sect	'.text.udp.udp_connect'
	.align	2
	
	.global	udp_connect

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1052  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1053  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1054   * @ingroup udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1055   * Sets the remote end of the pcb. This function does not generate any
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1056   * network traffic, but only sets the remote address of the pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1057   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1058   * @param pcb UDP PCB to be connected with remote address ipaddr and port.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1059   * @param ipaddr remote IP address to connect with.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1060   * @param port remote UDP port to connect with.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1061   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1062   * @return lwIP error code
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1063   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1064   * ipaddr & port are expected to be in the same byte order as in the pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1065   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1066   * The udp pcb is bound to a random local port if not already bound.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1067   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1068   * @see udp_disconnect()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1069   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1070  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1071  udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
; Function udp_connect
.L189:
udp_connect:	.type	func
	sub.a	a10,#16
.L559:
	mov.aa	a15,a4
.L560:
	mov.aa	a12,a5
.L565:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1072  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1073    struct udp_pcb *ipcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1074  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1075    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1076  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1077    LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
	mov	d8,d4
	jnz.a	a15,.L130
.L566:
	movh.a	a15,#@his(.52.str)
.L561:
	lea	a15,[a15]@los(.52.str)
	mov	d15,#1077
	j	.L131
.L130:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1078    LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
	jnz.a	a12,.L132
.L650:
	mov	d15,#1078
	movh.a	a15,#@his(.53.str)
.L562:
	lea	a15,[a15]@los(.53.str)

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1079  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1080    if (pcb->local_port == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1081      err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1082      if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1083        return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1084      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1085    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1086  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1087    ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1088  #if LWIP_IPV6 && LWIP_IPV6_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1089    /* If the given IP address should have a zone but doesn't, assign one now,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1090     * using the bound address to make a more informed decision when possible. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1091    if (IP_IS_V6(&pcb->remote_ip) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1092        ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1093      ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1094    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1095  #endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1096  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1097    pcb->remote_port = port;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1098    pcb->flags |= UDP_FLAGS_CONNECTED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1099  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1100    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_connect: connected to "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1101    ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1102                            pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1103    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1104  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1105    /* Insert UDP PCB into the list of active UDP PCBs. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1106    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1107      if (pcb == ipcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1108        /* already on the list, just return */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1109        return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1110      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1111    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1112    /* PCB not yet on the list, add PCB now */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1113    pcb->next = udp_pcbs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1114    udp_pcbs = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1115    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1116  }
.L131:
	st.a	[a10],a15
	st.w	[a10]4,d15
	fcall	.cocofun_62
	st.a	[a10]8,a15
	fcall	.cocofun_63
.L563:
	call	Ifx_Lwip_printf
.L564:
	mov	d2,#-16
	ret
.L132:
	ld.hu	d15,[a15]18
.L651:
	jne	d15,#0,.L134
.L340:
	mov	d4,#0
	mov.aa	a5,a15
.L567:
	call	udp_bind
.L568:
	jne	d2,#0,.L136
.L134:
	ld.w	d15,[a12]
	st.w	[a15]4,d15
.L652:
	st.h	[a15]20,d8
.L653:
	movh.a	a4,#@his(.54.str)
.L654:
	ld.bu	d15,[a15]16
.L655:
	lea	a4,[a4]@los(.54.str)
.L656:
	or	d15,#4
	st.b	[a15]16,d15
.L657:
	call	Ifx_Lwip_printf
.L658:
	ld.w	d0,[a15]4
	movh.a	a4,#@his(.10.str)
	extr.u	d15,d0,#0,#8
	st.w	[a10],d15
	extr.u	d15,d0,#8,#8
	st.w	[a10]4,d15
	extr.u	d15,d0,#16,#8
	st.w	[a10]8,d15
	sh	d15,d0,#-24
	st.w	[a10]12,d15
	lea	a4,[a4]@los(.10.str)
	call	Ifx_Lwip_printf
.L659:
	ld.hu	d15,[a15]20
	st.w	[a10],d15
	movh.a	a4,#@his(.51.str)
	lea	a4,[a4]@los(.51.str)
	call	Ifx_Lwip_printf
.L660:
	ld.a	a2,udp_pcbs
.L661:
	mov.aa	a4,a2
.L569:
	j	.L137
.L138:
	jeq.a	a15,a4,.L139
.L662:
	ld.a	a4,[a4]12
.L137:
	jnz.a	a4,.L138
.L663:
	st.a	[a15]12,a2
.L664:
	st.a	udp_pcbs,a15
.L139:
	mov	d2,#0
.L136:
	ret
.L335:
	
__udp_connect_function_end:
	.size	udp_connect,__udp_connect_function_end-udp_connect
.L237:
	; End of function
	
	.sdecl	'.text.udp.udp_disconnect',code,cluster('udp_disconnect')
	.sect	'.text.udp.udp_disconnect'
	.align	2
	
	.global	udp_disconnect

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1117  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1118  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1119   * @ingroup udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1120   * Remove the remote end of the pcb. This function does not generate
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1121   * any network traffic, but only removes the remote address of the pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1122   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1123   * @param pcb the udp pcb to disconnect.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1124   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1125  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1126  udp_disconnect(struct udp_pcb *pcb)
; Function udp_disconnect
.L191:
udp_disconnect:	.type	func
	sub.a	a10,#16
.L570:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1127  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1128    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1129  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1130    LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
	jnz.a	a4,.L141
.L669:
	movh.a	a15,#@his(.55.str)
	lea	a15,[a15]@los(.55.str)
	st.a	[a10],a15
	mov	d15,#1130
	st.w	[a10]4,d15
.L571:
	fcall	.cocofun_62
.L572:
	st.a	[a10]8,a15
	fcall	.cocofun_63
.L573:
	j	Ifx_Lwip_printf
.L141:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1131  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1132    /* reset remote address association */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1133  #if LWIP_IPV4 && LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1134    if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1135      ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1136    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1137  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1138      ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
	mov	d15,#0
	st.w	[a4]4,d15
.L670:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1139  #if LWIP_IPV4 && LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1140    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1141  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1142    pcb->remote_port = 0;
	st.h	[a4]20,d15
.L671:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1143    pcb->netif_idx = NETIF_NO_INDEX;
	st.b	[a4]8,d15
.L672:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1144    /* mark PCB as unconnected */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1145    udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
	ld.bu	d15,[a4]16
	and	d15,#251
	st.b	[a4]16,d15
.L673:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1146  }
	ret
.L342:
	
__udp_disconnect_function_end:
	.size	udp_disconnect,__udp_disconnect_function_end-udp_disconnect
.L242:
	; End of function
	
	.sdecl	'.text.udp.udp_recv',code,cluster('udp_recv')
	.sect	'.text.udp.udp_recv'
	.align	2
	
	.global	udp_recv

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1147  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1148  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1149   * @ingroup udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1150   * Set a receive callback for a UDP PCB.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1151   * This callback will be called when receiving a datagram for the pcb.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1152   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1153   * @param pcb the pcb for which to set the recv callback
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1154   * @param recv function pointer of the callback function
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1155   * @param recv_arg additional argument to pass to the callback function
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1156   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1157  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1158  udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
; Function udp_recv
.L193:
udp_recv:	.type	func
	sub.a	a10,#16
.L574:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1159  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1160    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1161  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1162    LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
	jnz.a	a4,.L143
.L678:
	movh.a	a15,#@his(.56.str)
	lea	a15,[a15]@los(.56.str)
	st.a	[a10],a15
	mov	d15,#1162
	st.w	[a10]4,d15
.L575:
	fcall	.cocofun_62
.L576:
	st.a	[a10]8,a15
	fcall	.cocofun_63
.L577:
	j	Ifx_Lwip_printf
.L143:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1163  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1164    /* remember recv() callback and user data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1165    pcb->recv = recv;
	st.a	[a4]24,a5
.L679:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1166    pcb->recv_arg = recv_arg;
	st.a	[a4]28,a6
.L680:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1167  }
	ret
.L344:
	
__udp_recv_function_end:
	.size	udp_recv,__udp_recv_function_end-udp_recv
.L247:
	; End of function
	
	.sdecl	'.text.udp.udp_remove',code,cluster('udp_remove')
	.sect	'.text.udp.udp_remove'
	.align	2
	
	.global	udp_remove

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1168  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1169  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1170   * @ingroup udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1171   * Removes and deallocates the pcb.  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1172   * 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1173   * @param pcb UDP PCB to be removed. The PCB is removed from the list of
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1174   * UDP PCB's and the data structure is freed from memory.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1175   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1176   * @see udp_new()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1177   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1178  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1179  udp_remove(struct udp_pcb *pcb)
; Function udp_remove
.L195:
udp_remove:	.type	func
	sub.a	a10,#16
.L578:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1180  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1181    struct udp_pcb *pcb2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1182  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1183    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1184  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1185    LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
	jnz.a	a4,.L145
.L608:
	movh.a	a15,#@his(.57.str)
	lea	a15,[a15]@los(.57.str)
	st.a	[a10],a15
	mov	d15,#1185
	st.w	[a10]4,d15
.L579:
	fcall	.cocofun_62
.L580:
	st.a	[a10]8,a15
	fcall	.cocofun_63
.L581:
	j	Ifx_Lwip_printf
.L145:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1186  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1187    mib2_udp_unbind(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1188    /* pcb to be removed is first in list? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1189    if (udp_pcbs == pcb) {
	ld.a	a15,udp_pcbs
.L582:
	jne.a	a15,a4,.L149
.L609:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1190      /* make list start at 2nd pcb */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1191      udp_pcbs = udp_pcbs->next;
	ld.a	a15,[a4]12
.L583:
	st.a	udp_pcbs,a15
.L610:
	j	.L148

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1192      /* pcb not 1st in list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1193    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1194      for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
.L150:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1195        /* find pcb in udp_pcbs list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1196        if (pcb2->next != NULL && pcb2->next == pcb) {
	ld.a	a2,[a15]12
.L611:
	jz.a	a2,.L151
.L612:
	jne.a	a2,a4,.L152
.L613:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1197          /* remove pcb from list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1198          pcb2->next = pcb->next;
	ld.a	a2,[a4]12
.L614:
	st.a	[a15]12,a2
.L615:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1199          break;
	j	.L153
.L152:
.L151:
	mov.aa	a15,a2
.L149:
	jnz.a	a15,.L150

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1200        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1201      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1202    }
.L153:
.L148:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1203    memp_free(MEMP_UDP_PCB, pcb);
	mov	d4,#0
.L616:
	j	memp_free
.L319:
	
__udp_remove_function_end:
	.size	udp_remove,__udp_remove_function_end-udp_remove
.L222:
	; End of function
	
	.sdecl	'.text.udp.udp_new',code,cluster('udp_new')
	.sect	'.text.udp.udp_new'
	.align	2
	
	.global	udp_new

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1204  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1205  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1206  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1207   * @ingroup udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1208   * Creates a new UDP pcb which can be used for UDP communication. The
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1209   * pcb is not active until it has either been bound to a local address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1210   * or connected to a remote address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1211   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1212   * @return The UDP PCB which was created. NULL if the PCB data structure
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1213   * could not be allocated.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1214   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1215   * @see udp_remove()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1216   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1217  struct udp_pcb* udp_new(void)
; Function udp_new
.L197:
udp_new:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1218  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1219    struct udp_pcb *pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1220    pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
	mov	d4,#0
	call	memp_malloc
.L584:
	mov.aa	a15,a2
.L586:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1221    /* could allocate UDP PCB? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1222    if (pcb != NULL) {
	jz.a	a15,.L154
.L599:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1223      /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1224       * which means checksum is generated over the whole datagram per default
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1225       * (recommended as default by RFC 3828). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1226      /* initialize PCB to all zeroes */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1227      memset(pcb, 0, sizeof(struct udp_pcb));
	mov	d4,#0
	mov.aa	a4,a15
.L585:
	mov	d5,#32
	call	memset
.L587:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1228      pcb->ttl = UDP_TTL;
	mov	d15,#255
	st.b	[a15]11,d15
.L154:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1229  #if LWIP_MULTICAST_TX_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1230      udp_set_multicast_ttl(pcb, UDP_TTL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1231  #endif /* LWIP_MULTICAST_TX_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1232    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1233    return pcb;
	mov.aa	a2,a15
.L588:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1234  }
	ret
.L313:
	
__udp_new_function_end:
	.size	udp_new,__udp_new_function_end-udp_new
.L212:
	; End of function
	
	.sdecl	'.text.udp.udp_new_ip_type',code,cluster('udp_new_ip_type')
	.sect	'.text.udp.udp_new_ip_type'
	.align	2
	
	.global	udp_new_ip_type

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1235  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1236  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1237   * @ingroup udp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1238   * Create a UDP PCB for specific IP type.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1239   * The pcb is not active until it has either been bound to a local address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1240   * or connected to a remote address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1241   * 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1242   * @param type IP address type, see @ref lwip_ip_addr_type definitions.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1243   * If you want to listen to IPv4 and IPv6 (dual-stack) packets,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1244   * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1245   * @return The UDP PCB which was created. NULL if the PCB data structure
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1246   * could not be allocated.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1247   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1248   * @see udp_remove()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1249   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1250  struct udp_pcb *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1251  udp_new_ip_type(u8_t type)
; Function udp_new_ip_type
.L199:
udp_new_ip_type:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1252  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1253    struct udp_pcb *pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1254  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1255    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1256  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1257    pcb = udp_new();
	j	udp_new
.L315:
	
__udp_new_ip_type_function_end:
	.size	udp_new_ip_type,__udp_new_ip_type_function_end-udp_new_ip_type
.L217:
	; End of function
	
	.sdecl	'.text.udp.udp_netif_ip_addr_changed',code,cluster('udp_netif_ip_addr_changed')
	.sect	'.text.udp.udp_netif_ip_addr_changed'
	.align	2
	
	.global	udp_netif_ip_addr_changed

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1258  #if LWIP_IPV4 && LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1259    if (pcb != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1260      IP_SET_TYPE_VAL(pcb->local_ip,  type);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1261      IP_SET_TYPE_VAL(pcb->remote_ip, type);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1262    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1263  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1264    LWIP_UNUSED_ARG(type);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1265  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1266    return pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1267  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1268  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1269  /** This function is called from netif.c when address is changed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1270   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1271   * @param old_addr IP address of the netif before change
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1272   * @param new_addr IP address of the netif after change
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1273   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1274  void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
; Function udp_netif_ip_addr_changed
.L201:
udp_netif_ip_addr_changed:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1275  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1276    struct udp_pcb *upcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1277  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1278    if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
	jz.a	a4,.L157
.L792:
	ld.w	d15,[a4]
	jeq	d15,#0,.L158
.L793:
	jz.a	a5,.L159
.L794:
	ld.w	d15,[a5]
	jeq	d15,#0,.L160
.L795:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1279      for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
	ld.a	a15,udp_pcbs
.L589:
	j	.L161
.L162:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1280        /* PCB bound to current local interface address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1281        if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
	ld.w	d15,[a15]
	ld.w	d0,[a4]
.L796:
	jne	d15,d0,.L163
.L797:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1282          /* The PCB is bound to the old ipaddr and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1283           * is set to bound to the new one instead */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1284          ip_addr_copy(upcb->local_ip, *new_addr);
	ld.w	d15,[a5]
	st.w	[a15],d15
.L163:
	ld.a	a15,[a15]12
.L161:
	jnz.a	a15,.L162
.L160:
.L159:
.L158:
.L157:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1285        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1286      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1287    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1288  }
	ret
.L395:
	
__udp_netif_ip_addr_changed_function_end:
	.size	udp_netif_ip_addr_changed,__udp_netif_ip_addr_changed_function_end-udp_netif_ip_addr_changed
.L287:
	; End of function
	
	.sdecl	'.text.udp.udp_debug_print',code,cluster('udp_debug_print')
	.sect	'.text.udp.udp_debug_print'
	.align	2
	
	.global	udp_debug_print

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1289  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1290  #if UDP_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1291  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1292   * Print UDP header information for debug purposes.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1293   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1294   * @param udphdr pointer to the udp header in memory.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1295   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1296  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1297  udp_debug_print(struct udp_hdr *udphdr)
; Function udp_debug_print
.L203:
udp_debug_print:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1298  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1299    LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1300    LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1301    LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1302                            lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1303    LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1304    LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1305                            lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1306    LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1307  }
	ret
.L393:
	
__udp_debug_print_function_end:
	.size	udp_debug_print,__udp_debug_print_function_end-udp_debug_print
.L282:
	; End of function
	
	.sdecl	'.zdata.udp.udp_port',data,cluster('udp_port')
	.sect	'.zdata.udp.udp_port'
	.align	2
udp_port:	.type	object
	.size	udp_port,2
	.half	49152
	.sdecl	'.zbss.udp.udp_pcbs',data,cluster('udp_pcbs')
	.sect	'.zbss.udp.udp_pcbs'
	.global	udp_pcbs
	.align	4
udp_pcbs:	.type	object
	.size	udp_pcbs,4
	.space	4
	.sdecl	'.rodata.udp..1.str',data,rom
	.sect	'.rodata.udp..1.str'
.1.str:	.type	object
	.size	.1.str,40
	.byte	65,115,115,101
	.byte	114,116,105,111
	.byte	110,32,34,37
	.byte	115,34,32,102
	.byte	97,105,108,101
	.byte	100,32,97,116
	.byte	32,108,105,110
	.byte	101,32,37,100
	.byte	32,105,110,32
	.byte	37,115,10
	.space	1
	.sdecl	'.rodata.udp..3.str',data,rom
	.sect	'.rodata.udp..3.str'
.3.str:	.type	object
	.size	.3.str,46
	.byte	46,46,92,48
	.byte	95,83,114,99
	.byte	92,48,95,65
	.byte	112,112,83,119
	.byte	92,69,116,104
	.byte	101,114,110,101
	.byte	116,92,108,119
	.byte	105,112,92,115
	.byte	114,99,92,99
	.byte	111,114,101,92
	.byte	117,100,112,46
	.byte	99
	.space	1
	.sdecl	'.rodata.udp..4.str',data,rom
	.sect	'.rodata.udp..4.str'
.4.str:	.type	object
	.size	.4.str,37
	.byte	117,100,112,95
	.byte	105,110,112,117
	.byte	116,95,108,111
	.byte	99,97,108,95
	.byte	109,97,116,99
	.byte	104,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,110
	.byte	101,116,105,102
	.space	1
	.sdecl	'.rodata.udp..5.str',data,rom
	.sect	'.rodata.udp..5.str'
.5.str:	.type	object
	.size	.5.str,24
	.byte	117,100,112,95
	.byte	105,110,112,117
	.byte	116,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,112
	.byte	98,117,102
	.space	1
	.sdecl	'.rodata.udp..6.str',data,rom
	.sect	'.rodata.udp..6.str'
.6.str:	.type	object
	.size	.6.str,25
	.byte	117,100,112,95
	.byte	105,110,112,117
	.byte	116,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,110
	.byte	101,116,105,102
	.space	1
	.sdecl	'.rodata.udp..10.str',data,rom
	.sect	'.rodata.udp..10.str'
.10.str:	.type	object
	.size	.10.str,12
	.byte	37,117,46,37
	.byte	117,46,37,117
	.byte	46,37,117
	.space	1
	.sdecl	'.rodata.udp..15.str',data,rom
	.sect	'.rodata.udp..15.str'
.15.str:	.type	object
	.size	.15.str,27
	.byte	112,98,117,102
	.byte	95,114,101,109
	.byte	111,118,101,95
	.byte	104,101,97,100
	.byte	101,114,32,102
	.byte	97,105,108,101
	.byte	100,10
	.space	1
	.sdecl	'.rodata.udp..18.str',data,rom
	.sect	'.rodata.udp..18.str'
.18.str:	.type	object
	.size	.18.str,22
	.byte	117,100,112,95
	.byte	115,101,110,100
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,112,99
	.byte	98
	.space	1
	.sdecl	'.rodata.udp..19.str',data,rom
	.sect	'.rodata.udp..19.str'
.19.str:	.type	object
	.size	.19.str,23
	.byte	117,100,112,95
	.byte	115,101,110,100
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,112,98
	.byte	117,102
	.space	1
	.sdecl	'.rodata.udp..20.str',data,rom
	.sect	'.rodata.udp..20.str'
.20.str:	.type	object
	.size	.20.str,24
	.byte	117,100,112,95
	.byte	115,101,110,100
	.byte	116,111,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	112,99,98
	.space	1
	.sdecl	'.rodata.udp..21.str',data,rom
	.sect	'.rodata.udp..21.str'
.21.str:	.type	object
	.size	.21.str,25
	.byte	117,100,112,95
	.byte	115,101,110,100
	.byte	116,111,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	112,98,117,102
	.space	1
	.sdecl	'.rodata.udp..22.str',data,rom
	.sect	'.rodata.udp..22.str'
.22.str:	.type	object
	.size	.22.str,27
	.byte	117,100,112,95
	.byte	115,101,110,100
	.byte	116,111,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	100,115,116,95
	.byte	105,112
	.space	1
	.sdecl	'.rodata.udp..26.str',data,rom
	.sect	'.rodata.udp..26.str'
.26.str:	.type	object
	.size	.26.str,27
	.byte	117,100,112,95
	.byte	115,101,110,100
	.byte	116,111,95,105
	.byte	102,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,112
	.byte	99,98
	.space	1
	.sdecl	'.rodata.udp..27.str',data,rom
	.sect	'.rodata.udp..27.str'
.27.str:	.type	object
	.size	.27.str,28
	.byte	117,100,112,95
	.byte	115,101,110,100
	.byte	116,111,95,105
	.byte	102,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,112
	.byte	98,117,102
	.space	1
	.sdecl	'.rodata.udp..28.str',data,rom
	.sect	'.rodata.udp..28.str'
.28.str:	.type	object
	.size	.28.str,30
	.byte	117,100,112,95
	.byte	115,101,110,100
	.byte	116,111,95,105
	.byte	102,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,100
	.byte	115,116,95,105
	.byte	112
	.space	1
	.sdecl	'.rodata.udp..29.str',data,rom
	.sect	'.rodata.udp..29.str'
.29.str:	.type	object
	.size	.29.str,29
	.byte	117,100,112,95
	.byte	115,101,110,100
	.byte	116,111,95,105
	.byte	102,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,110
	.byte	101,116,105,102
	.space	1
	.sdecl	'.rodata.udp..30.str',data,rom
	.sect	'.rodata.udp..30.str'
.30.str:	.type	object
	.size	.30.str,31
	.byte	117,100,112,95
	.byte	115,101,110,100
	.byte	116,111,95,105
	.byte	102,95,115,114
	.byte	99,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,112
	.byte	99,98
	.space	1
	.sdecl	'.rodata.udp..31.str',data,rom
	.sect	'.rodata.udp..31.str'
.31.str:	.type	object
	.size	.31.str,32
	.byte	117,100,112,95
	.byte	115,101,110,100
	.byte	116,111,95,105
	.byte	102,95,115,114
	.byte	99,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,112
	.byte	98,117,102
	.space	1
	.sdecl	'.rodata.udp..32.str',data,rom
	.sect	'.rodata.udp..32.str'
.32.str:	.type	object
	.size	.32.str,34
	.byte	117,100,112,95
	.byte	115,101,110,100
	.byte	116,111,95,105
	.byte	102,95,115,114
	.byte	99,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,100
	.byte	115,116,95,105
	.byte	112
	.space	1
	.sdecl	'.rodata.udp..33.str',data,rom
	.sect	'.rodata.udp..33.str'
.33.str:	.type	object
	.size	.33.str,34
	.byte	117,100,112,95
	.byte	115,101,110,100
	.byte	116,111,95,105
	.byte	102,95,115,114
	.byte	99,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,115
	.byte	114,99,95,105
	.byte	112
	.space	1
	.sdecl	'.rodata.udp..34.str',data,rom
	.sect	'.rodata.udp..34.str'
.34.str:	.type	object
	.size	.34.str,33
	.byte	117,100,112,95
	.byte	115,101,110,100
	.byte	116,111,95,105
	.byte	102,95,115,114
	.byte	99,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,110
	.byte	101,116,105,102
	.space	1
	.sdecl	'.rodata.udp..40.str',data,rom
	.sect	'.rodata.udp..40.str'
.40.str:	.type	object
	.size	.40.str,46
	.byte	99,104,101,99
	.byte	107,32,116,104
	.byte	97,116,32,102
	.byte	105,114,115,116
	.byte	32,112,98,117
	.byte	102,32,99,97
	.byte	110,32,104,111
	.byte	108,100,32,115
	.byte	116,114,117,99
	.byte	116,32,117,100
	.byte	112,95,104,100
	.byte	114
	.space	1
	.sdecl	'.rodata.udp..45.str',data,rom
	.sect	'.rodata.udp..45.str'
.45.str:	.type	object
	.size	.45.str,22
	.byte	117,100,112,95
	.byte	98,105,110,100
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,112,99
	.byte	98
	.space	1
	.sdecl	'.rodata.udp..50.str',data,rom
	.sect	'.rodata.udp..50.str'
.50.str:	.type	object
	.size	.50.str,20
	.byte	117,100,112,95
	.byte	98,105,110,100
	.byte	58,32,98,111
	.byte	117,110,100,32
	.byte	116,111,32
	.space	1
	.sdecl	'.rodata.udp..51.str',data,rom
	.sect	'.rodata.udp..51.str'
.51.str:	.type	object
	.size	.51.str,12
	.byte	44,32,112,111
	.byte	114,116,32,37
	.byte	117,41,10
	.space	1
	.sdecl	'.rodata.udp..52.str',data,rom
	.sect	'.rodata.udp..52.str'
.52.str:	.type	object
	.size	.52.str,25
	.byte	117,100,112,95
	.byte	99,111,110,110
	.byte	101,99,116,58
	.byte	32,105,110,118
	.byte	97,108,105,100
	.byte	32,112,99,98
	.space	1
	.sdecl	'.rodata.udp..53.str',data,rom
	.sect	'.rodata.udp..53.str'
.53.str:	.type	object
	.size	.53.str,28
	.byte	117,100,112,95
	.byte	99,111,110,110
	.byte	101,99,116,58
	.byte	32,105,110,118
	.byte	97,108,105,100
	.byte	32,105,112,97
	.byte	100,100,114
	.space	1
	.sdecl	'.rodata.udp..54.str',data,rom
	.sect	'.rodata.udp..54.str'
.54.str:	.type	object
	.size	.54.str,27
	.byte	117,100,112,95
	.byte	99,111,110,110
	.byte	101,99,116,58
	.byte	32,99,111,110
	.byte	110,101,99,116
	.byte	101,100,32,116
	.byte	111,32
	.space	1
	.sdecl	'.rodata.udp..55.str',data,rom
	.sect	'.rodata.udp..55.str'
.55.str:	.type	object
	.size	.55.str,28
	.byte	117,100,112,95
	.byte	100,105,115,99
	.byte	111,110,110,101
	.byte	99,116,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	112,99,98
	.space	1
	.sdecl	'.rodata.udp..56.str',data,rom
	.sect	'.rodata.udp..56.str'
.56.str:	.type	object
	.size	.56.str,22
	.byte	117,100,112,95
	.byte	114,101,99,118
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,112,99
	.byte	98
	.space	1
	.sdecl	'.rodata.udp..57.str',data,rom
	.sect	'.rodata.udp..57.str'
.57.str:	.type	object
	.size	.57.str,24
	.byte	117,100,112,95
	.byte	114,101,109,111
	.byte	118,101,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	112,99,98
	.space	1
	.calls	'udp_input_local_match','Ifx_Lwip_printf'
	.calls	'udp_input','Ifx_Lwip_printf'
	.calls	'udp_input','ip4_addr_isbroadcast_u32'
	.calls	'udp_input','lwip_htons'
	.calls	'udp_input','udp_debug_print'
	.calls	'udp_input','udp_input_local_match'
	.calls	'udp_input','ip_chksum_pseudo'
	.calls	'udp_input','pbuf_remove_header'
	.calls	'udp_input','__INDIRECT__'
	.calls	'udp_input','pbuf_header_force'
	.calls	'udp_input','icmp_dest_unreach'
	.calls	'udp_input','pbuf_free'
	.calls	'udp_send','Ifx_Lwip_printf'
	.calls	'udp_send','udp_sendto'
	.calls	'udp_sendto','Ifx_Lwip_printf'
	.calls	'udp_sendto','netif_get_by_index'
	.calls	'udp_sendto','ip4_route'
	.calls	'udp_sendto','udp_sendto_if'
	.calls	'udp_sendto_if','Ifx_Lwip_printf'
	.calls	'udp_sendto_if','udp_sendto_if_src'
	.calls	'udp_sendto_if_src','Ifx_Lwip_printf'
	.calls	'udp_sendto_if_src','udp_bind'
	.calls	'udp_sendto_if_src','pbuf_add_header'
	.calls	'udp_sendto_if_src','pbuf_alloc'
	.calls	'udp_sendto_if_src','pbuf_chain'
	.calls	'udp_sendto_if_src','lwip_htons'
	.calls	'udp_sendto_if_src','ip_chksum_pseudo'
	.calls	'udp_sendto_if_src','ip4_output_if_src'
	.calls	'udp_sendto_if_src','pbuf_free'
	.calls	'udp_bind','Ifx_Lwip_printf'
	.calls	'udp_bind','udp_new_port'
	.calls	'udp_connect','Ifx_Lwip_printf'
	.calls	'udp_connect','udp_bind'
	.calls	'udp_disconnect','Ifx_Lwip_printf'
	.calls	'udp_recv','Ifx_Lwip_printf'
	.calls	'udp_remove','Ifx_Lwip_printf'
	.calls	'udp_remove','memp_free'
	.calls	'udp_new','memp_malloc'
	.calls	'udp_new','memset'
	.calls	'udp_new_ip_type','udp_new'
	.calls	'udp_input_local_match','.cocofun_62'
	.calls	'udp_input_local_match','.cocofun_63'
	.calls	'udp_input','.cocofun_62'
	.calls	'udp_input','.cocofun_63'
	.calls	'udp_send','.cocofun_62'
	.calls	'udp_send','.cocofun_63'
	.calls	'udp_sendto','.cocofun_62'
	.calls	'udp_sendto','.cocofun_63'
	.calls	'udp_sendto_if','.cocofun_62'
	.calls	'udp_sendto_if','.cocofun_63'
	.calls	'udp_sendto_if_src','.cocofun_62'
	.calls	'udp_sendto_if_src','.cocofun_63'
	.calls	'udp_bind','.cocofun_62'
	.calls	'udp_bind','.cocofun_63'
	.calls	'udp_connect','.cocofun_62'
	.calls	'udp_connect','.cocofun_63'
	.calls	'udp_disconnect','.cocofun_62'
	.calls	'udp_disconnect','.cocofun_63'
	.calls	'udp_recv','.cocofun_62'
	.calls	'udp_recv','.cocofun_63'
	.calls	'udp_remove','.cocofun_62'
	.calls	'udp_remove','.cocofun_63'
	.calls	'udp_init','',0
	.calls	'udp_new_port','',0
	.calls	'udp_input_local_match','',16
	.calls	'.cocofun_63','',0
	.calls	'.cocofun_62','',0
	.calls	'udp_input','',40
	.calls	'udp_send','',16
	.calls	'udp_sendto','',16
	.calls	'udp_sendto_if','',16
	.calls	'udp_sendto_if_src','',24
	.calls	'udp_bind','',16
	.calls	'udp_bind_netif','',0
	.calls	'udp_connect','',16
	.calls	'udp_disconnect','',16
	.calls	'udp_recv','',16
	.calls	'udp_remove','',16
	.calls	'udp_new','',0
	.calls	'udp_new_ip_type','',0
	.calls	'udp_netif_ip_addr_changed','',0
	.extern	Ifx_Lwip_printf
	.extern	pbuf_alloc
	.extern	pbuf_header_force
	.extern	pbuf_add_header
	.extern	pbuf_remove_header
	.extern	pbuf_free
	.extern	pbuf_chain
	.extern	lwip_htons
	.extern	ip4_addr_isbroadcast_u32
	.extern	ip_addr_any
	.extern	memp_malloc
	.extern	memp_free
	.extern	lwip_stats
	.extern	netif_get_by_index
	.extern	ip4_route
	.extern	ip4_output_if_src
	.extern	ip_data
	.extern	ip_chksum_pseudo
	.extern	icmp_dest_unreach
	.extern	memset
	.extern	__INDIRECT__
	.calls	'udp_debug_print','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L205:
	.word	4817
	.half	3
	.word	.L206
	.byte	4
.L204:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L207
	.byte	2
	.byte	'int',0,4,5,3
	.word	158
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	165
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	207
	.byte	7
	.word	207
	.byte	8
	.byte	'__cmpswapw',0
	.word	223
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	228
	.byte	9
	.byte	'value',0
	.word	207
	.byte	9
	.byte	'compare',0
	.word	207
	.byte	0
.L322:
	.byte	2
	.byte	'char',0,1,6,2
	.byte	'char',0,1,6,3
	.word	293
	.byte	7
	.word	301
	.byte	10
	.byte	'Ifx_Lwip_printf',0,1,123,6
	.word	285
	.byte	1,1,1,1,11
	.byte	's',0,1,123,34
	.word	306
	.byte	12,1,123,37,0,13
	.byte	'void',0
.L348:
	.byte	7
	.word	354
.L327:
	.byte	2
	.byte	'unsigned short int',0,2,7
.L316:
	.byte	2
	.byte	'unsigned char',0,1,8,14
	.byte	'pbuf',0,2,186,1,8,16,15
	.byte	'next',0
	.word	.L352-.L205
	.byte	4,2,35,0,15
	.byte	'payload',0
	.word	360
	.byte	4,2,35,4,15
	.byte	'tot_len',0
	.word	365
	.byte	2,2,35,8,15
	.byte	'len',0
	.word	365
	.byte	2,2,35,10,15
	.byte	'type_internal',0
	.word	387
	.byte	1,2,35,12,15
	.byte	'flags',0
	.word	387
	.byte	1,2,35,13,15
	.byte	'ref',0
	.word	387
	.byte	1,2,35,14,15
	.byte	'if_idx',0
	.word	387
	.byte	1,2,35,15,0
.L352:
	.byte	7
	.word	404
	.byte	16,2,89,9,1,17
	.byte	'PBUF_RAW',0,0,17
	.byte	'PBUF_RAW_TX',0,0,17
	.byte	'PBUF_LINK',0,16,17
	.byte	'PBUF_IP',0,36,17
	.byte	'PBUF_TRANSPORT',0,56,0,16,2,145,1,9,2,17
	.byte	'PBUF_ROM',0,1,17
	.byte	'PBUF_REF',0,193,0,17
	.byte	'PBUF_POOL',0,130,3,17
	.byte	'PBUF_RAM',0,128,5,0,10
	.byte	'pbuf_alloc',0,2,147,2,14
	.word	544
	.byte	1,1,1,1,11
	.byte	'l',0,2,147,2,36
	.word	549
	.byte	11
	.byte	'length',0,2,147,2,45
	.word	365
	.byte	11
	.byte	'type',0,2,147,2,63
	.word	619
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'pbuf_header_force',0,2,159,2,6
	.word	387
	.byte	1,1,1,1,11
	.byte	'p',0,2,159,2,37
	.word	544
	.byte	11
	.byte	'header_size',0,2,159,2,46
	.word	740
	.byte	0,10
	.byte	'pbuf_add_header',0,2,160,2,6
	.word	387
	.byte	1,1,1,1,11
	.byte	'p',0,2,160,2,35
	.word	544
	.byte	11
	.byte	'header_size_increment',0,2,160,2,45
	.word	207
	.byte	0,10
	.byte	'pbuf_remove_header',0,2,162,2,6
	.word	387
	.byte	1,1,1,1,11
	.byte	'p',0,2,162,2,38
	.word	544
	.byte	11
	.byte	'header_size',0,2,162,2,48
	.word	207
	.byte	0,10
	.byte	'pbuf_free',0,2,165,2,6
	.word	387
	.byte	1,1,1,1,11
	.byte	'p',0,2,165,2,29
	.word	544
	.byte	0,18
	.byte	'pbuf_chain',0,2,168,2,6,1,1,1,1,11
	.byte	'head',0,2,168,2,30
	.word	544
	.byte	11
	.byte	'tail',0,2,168,2,49
	.word	544
	.byte	0,10
	.byte	'lwip_htons',0,3,96,7
	.word	365
	.byte	1,1,1,1,11
	.byte	'x',0,3,96,24
	.word	365
	.byte	0,2
	.byte	'unsigned long int',0,4,7
.L356:
	.byte	7
	.word	.L590-.L205
	.byte	14
	.byte	'ip4_addr',0,4,51,8,4,15
	.byte	'addr',0
	.word	1072
	.byte	4,2,35,0,0,19
	.word	285
	.byte	1,1,5
	.word	544
	.byte	5
	.word	1093
	.byte	0,7
	.word	1127
	.byte	20
	.byte	'netif_input_fn',0,5,178,1,17
	.word	1145
	.byte	3
	.word	1098
	.byte	7
	.word	1174
	.byte	19
	.word	285
	.byte	1,1,5
	.word	1093
	.byte	5
	.word	544
	.byte	5
	.word	1179
	.byte	0,7
	.word	1184
	.byte	20
	.byte	'netif_output_fn',0,5,189,1,17
	.word	1207
	.byte	19
	.word	285
	.byte	1,1,5
	.word	1093
	.byte	5
	.word	544
	.byte	0,7
	.word	1237
	.byte	20
	.byte	'netif_linkoutput_fn',0,5,212,1,17
	.word	1255
	.byte	21,6
	.word	387
	.byte	22,5,0,21,2
	.word	293
	.byte	22,1,0
.L590:
	.byte	14
	.byte	'netif',0,5,132,2,8,48,15
	.byte	'next',0
	.word	1093
	.byte	4,2,35,0,15
	.byte	'ip_addr',0
	.word	1098
	.byte	4,2,35,4,15
	.byte	'netmask',0
	.word	1098
	.byte	4,2,35,8,15
	.byte	'gw',0
	.word	1098
	.byte	4,2,35,12,15
	.byte	'input',0
	.word	1150
	.byte	4,2,35,16,15
	.byte	'output',0
	.word	1212
	.byte	4,2,35,20,15
	.byte	'linkoutput',0
	.word	1260
	.byte	4,2,35,24,15
	.byte	'state',0
	.word	360
	.byte	4,2,35,28,15
	.byte	'mtu',0
	.word	365
	.byte	2,2,35,32,15
	.byte	'hwaddr',0
	.word	1289
	.byte	6,2,35,34,15
	.byte	'hwaddr_len',0
	.word	387
	.byte	1,2,35,40,15
	.byte	'flags',0
	.word	387
	.byte	1,2,35,41,15
	.byte	'name',0
	.word	1298
	.byte	2,2,35,42,15
	.byte	'num',0
	.word	387
	.byte	1,2,35,44,15
	.byte	'rs_count',0
	.word	387
	.byte	1,2,35,45,0,3
	.word	1307
.L333:
	.byte	7
	.word	1555
	.byte	10
	.byte	'ip4_addr_isbroadcast_u32',0,4,151,1,6
	.word	387
	.byte	1,1,1,1,11
	.byte	'addr',0,4,151,1,37
	.word	1072
	.byte	11
	.byte	'netif',0,4,151,1,63
	.word	1560
	.byte	0,7
	.word	1127
	.byte	7
	.word	1184
	.byte	7
	.word	1237
	.byte	16,6,52,9,1,17
	.byte	'MEMP_UDP_PCB',0,0,17
	.byte	'MEMP_TCP_PCB',0,1,17
	.byte	'MEMP_TCP_PCB_LISTEN',0,2,17
	.byte	'MEMP_TCP_SEG',0,3,17
	.byte	'MEMP_REASSDATA',0,4,17
	.byte	'MEMP_FRAG_PBUF',0,5,17
	.byte	'MEMP_SYS_TIMEOUT',0,6,17
	.byte	'MEMP_PBUF',0,7,17
	.byte	'MEMP_PBUF_POOL',0,8,17
	.byte	'MEMP_MAX',0,9,0,10
	.byte	'memp_malloc',0,6,147,1,7
	.word	360
	.byte	1,1,1,1,11
	.byte	'type',0,6,147,1,26
	.word	1648
	.byte	0,18
	.byte	'memp_free',0,6,149,1,7,1,1,1,1,11
	.byte	'type',0,6,149,1,24
	.word	1648
	.byte	11
	.byte	'mem',0,6,149,1,36
	.word	360
	.byte	0,10
	.byte	'netif_get_by_index',0,5,169,4,15
	.word	1093
	.byte	1,1,1,1,11
	.byte	'idx',0,5,169,4,39
	.word	387
	.byte	0,3
	.word	1098
	.byte	7
	.word	1947
	.byte	10
	.byte	'ip4_route',0,7,65,15
	.word	1093
	.byte	1,1,1,1,11
	.byte	'dest',0,7,65,43
	.word	1952
	.byte	0,10
	.byte	'ip4_output_if_src',0,7,76,7
	.word	285
	.byte	1,1,1,1,11
	.byte	'p',0,7,76,38
	.word	544
	.byte	11
	.byte	'src',0,7,76,59
	.word	1952
	.byte	11
	.byte	'dest',0,7,76,82
	.word	1952
	.byte	11
	.byte	'ttl',0,7,77,13
	.word	387
	.byte	11
	.byte	'tos',0,7,77,23
	.word	387
	.byte	11
	.byte	'proto',0,7,77,33
	.word	387
	.byte	11
	.byte	'netif',0,7,77,54
	.word	1093
	.byte	0,23,1,1,5
	.word	360
	.byte	5
	.word	.L312-.L205
	.byte	5
	.word	544
	.byte	5
	.word	1179
	.byte	5
	.word	365
	.byte	0,7
	.word	2111
.L346:
	.byte	20
	.byte	'udp_recv_fn',0,8,77,16
	.word	2140
	.byte	14
	.byte	'udp_pcb',0,8,81,8,32,15
	.byte	'local_ip',0
	.word	1098
	.byte	4,2,35,0,15
	.byte	'remote_ip',0
	.word	1098
	.byte	4,2,35,4,15
	.byte	'netif_idx',0
	.word	387
	.byte	1,2,35,8,15
	.byte	'so_options',0
	.word	387
	.byte	1,2,35,9,15
	.byte	'tos',0
	.word	387
	.byte	1,2,35,10,15
	.byte	'ttl',0
	.word	387
	.byte	1,2,35,11,15
	.byte	'next',0
	.word	.L312-.L205
	.byte	4,2,35,12,15
	.byte	'flags',0
	.word	387
	.byte	1,2,35,16,15
	.byte	'local_port',0
	.word	365
	.byte	2,2,35,18,15
	.byte	'remote_port',0
	.word	365
	.byte	2,2,35,20,15
	.byte	'recv',0
	.word	2145
	.byte	4,2,35,24,15
	.byte	'recv_arg',0
	.word	360
	.byte	4,2,35,28,0
.L312:
	.byte	7
	.word	2165
	.byte	7
	.word	2111
	.byte	3
	.word	1098
.L325:
	.byte	7
	.word	2393
	.byte	14
	.byte	'udp_hdr',0,9,53,8,8,15
	.byte	'src',0
	.word	365
	.byte	2,2,35,0,15
	.byte	'dest',0
	.word	365
	.byte	2,2,35,2,15
	.byte	'len',0
	.word	365
	.byte	2,2,35,4,15
	.byte	'chksum',0
	.word	365
	.byte	2,2,35,6,0
.L366:
	.byte	7
	.word	2403
	.byte	10
	.byte	'ip_chksum_pseudo',0,10,95,7
	.word	365
	.byte	1,1,1,1,11
	.byte	'p',0,10,95,37
	.word	544
	.byte	11
	.byte	'proto',0,10,95,45
	.word	387
	.byte	11
	.byte	'proto_len',0,10,95,58
	.word	365
	.byte	11
	.byte	'src',0,10,96,25
	.word	2398
	.byte	11
	.byte	'dest',0,10,96,47
	.word	2398
	.byte	0,24
	.byte	'icmp_dur_type',0,11,55,6,1,17
	.byte	'ICMP_DUR_NET',0,0,17
	.byte	'ICMP_DUR_HOST',0,1,17
	.byte	'ICMP_DUR_PROTO',0,2,17
	.byte	'ICMP_DUR_PORT',0,3,17
	.byte	'ICMP_DUR_FRAG',0,4,17
	.byte	'ICMP_DUR_SR',0,5,0,18
	.byte	'icmp_dest_unreach',0,11,81,6,1,1,1,1,11
	.byte	'p',0,11,81,37
	.word	544
	.byte	11
	.byte	't',0,11,81,59
	.word	2575
	.byte	0,10
	.byte	'memset',0,12,56,17
	.word	360
	.byte	1,1,1,1,25,12,56,33
	.word	360
	.byte	25,12,56,36
	.word	158
	.byte	25,12,56,41
	.word	207
	.byte	0,26
	.byte	'__INDIRECT__',0,13,1,1,1,1,1,20
	.byte	'__wchar_t',0,13,1,1
	.word	740
	.byte	20
	.byte	'__size_t',0,13,1,1
	.word	207
	.byte	20
	.byte	'__ptrdiff_t',0,13,1,1
	.word	158
	.byte	27,1,7
	.word	2855
	.byte	20
	.byte	'__codeptr',0,13,1,1
	.word	2857
	.byte	20
	.byte	'__intptr_t',0,13,1,1
	.word	158
	.byte	20
	.byte	'__uintptr_t',0,13,1,1
	.word	207
	.byte	20
	.byte	'size_t',0,14,24,25
	.word	207
	.byte	20
	.byte	'uint8',0,15,108,29
	.word	387
	.byte	20
	.byte	'uint16',0,15,112,29
	.word	365
	.byte	20
	.byte	'uint32',0,15,116,29
	.word	1072
	.byte	20
	.byte	'sint8',0,15,125,29
	.word	285
	.byte	20
	.byte	'sint16',0,15,129,1,29
	.word	740
	.byte	2
	.byte	'long int',0,4,5,20
	.byte	'sint32',0,15,134,1,29
	.word	3008
	.byte	2
	.byte	'long long int',0,8,5,20
	.byte	'sint64',0,15,141,1,29
	.word	3036
	.byte	2
	.byte	'float',0,4,4,20
	.byte	'float32',0,15,170,1,29
	.word	3069
	.byte	20
	.byte	'pvoid',0,16,54,28
	.word	360
	.byte	20
	.byte	'Ifx_TickTime',0,16,76,28
	.word	3036
	.byte	20
	.byte	'u8_t',0,1,85,16
	.word	387
	.byte	20
	.byte	'u16_t',0,1,86,16
	.word	365
	.byte	20
	.byte	'u32_t',0,1,87,16
	.word	1072
	.byte	20
	.byte	's8_t',0,1,88,16
	.word	285
	.byte	20
	.byte	's16_t',0,1,89,16
	.word	740
	.byte	20
	.byte	'intmax_t',0,17,198,2,41
	.word	3036
	.byte	20
	.byte	'err_t',0,18,96,14
	.word	285
	.byte	20
	.byte	'pbuf_layer',0,2,112,3
	.word	549
	.byte	20
	.byte	'pbuf_type',0,2,168,1,3
	.word	619
	.byte	23,1,1,5
	.word	544
	.byte	0,7
	.word	3268
	.byte	20
	.byte	'pbuf_free_custom_fn',0,2,242,1,16
	.word	3277
	.byte	20
	.byte	'ip4_addr_t',0,4,57,25
	.word	1098
	.byte	20
	.byte	'ip_addr_t',0,19,142,2,20
	.word	1098
	.byte	3
	.word	1098
	.byte	28
	.byte	'ip_addr_any',0,19,241,2,24
	.word	3349
	.byte	1,1,20
	.byte	'mem_size_t',0,20,67,15
	.word	365
	.byte	20
	.byte	'memp_t',0,6,56,3
	.word	1648
	.byte	14
	.byte	'stats_proto',0,21,64,8,24,15
	.byte	'xmit',0
	.word	365
	.byte	2,2,35,0,15
	.byte	'recv',0
	.word	365
	.byte	2,2,35,2,15
	.byte	'fw',0
	.word	365
	.byte	2,2,35,4,15
	.byte	'drop',0
	.word	365
	.byte	2,2,35,6,15
	.byte	'chkerr',0
	.word	365
	.byte	2,2,35,8,15
	.byte	'lenerr',0
	.word	365
	.byte	2,2,35,10,15
	.byte	'memerr',0
	.word	365
	.byte	2,2,35,12,15
	.byte	'rterr',0
	.word	365
	.byte	2,2,35,14,15
	.byte	'proterr',0
	.word	365
	.byte	2,2,35,16,15
	.byte	'opterr',0
	.word	365
	.byte	2,2,35,18,15
	.byte	'err',0
	.word	365
	.byte	2,2,35,20,15
	.byte	'cachehit',0
	.word	365
	.byte	2,2,35,22,0,14
	.byte	'stats_mem',0,21,98,8,16,15
	.byte	'name',0
	.word	306
	.byte	4,2,35,0,15
	.byte	'err',0
	.word	365
	.byte	2,2,35,4,15
	.byte	'avail',0
	.word	365
	.byte	2,2,35,6,15
	.byte	'used',0
	.word	365
	.byte	2,2,35,8,15
	.byte	'max',0
	.word	365
	.byte	2,2,35,10,15
	.byte	'illegal',0
	.word	365
	.byte	2,2,35,12,0,7
	.word	3610
	.byte	21,36
	.word	3712
	.byte	22,8,0,14
	.byte	'stats_',0,21,232,1,8,220,1,15
	.byte	'link',0
	.word	3411
	.byte	24,2,35,0,15
	.byte	'etharp',0
	.word	3411
	.byte	24,2,35,24,15
	.byte	'ip_frag',0
	.word	3411
	.byte	24,2,35,48,15
	.byte	'ip',0
	.word	3411
	.byte	24,2,35,72,15
	.byte	'icmp',0
	.word	3411
	.byte	24,2,35,96,15
	.byte	'udp',0
	.word	3411
	.byte	24,2,35,120,15
	.byte	'tcp',0
	.word	3411
	.byte	24,3,35,144,1,15
	.byte	'mem',0
	.word	3610
	.byte	16,3,35,168,1,15
	.byte	'memp',0
	.word	3717
	.byte	36,3,35,184,1,0,28
	.byte	'lwip_stats',0,21,176,2,22
	.word	3726
	.byte	1,1,14
	.byte	'link_changed_s',0,5,213,4,10,1,15
	.byte	'state',0
	.word	387
	.byte	1,2,35,0,0,14
	.byte	'status_changed_s',0,5,219,4,10,1,15
	.byte	'state',0
	.word	387
	.byte	1,2,35,0,0,14
	.byte	'ipv4_changed_s',0,5,225,4,10,12,15
	.byte	'old_address',0
	.word	2398
	.byte	4,2,35,0,15
	.byte	'old_netmask',0
	.word	2398
	.byte	4,2,35,4,15
	.byte	'old_gw',0
	.word	2398
	.byte	4,2,35,8,0,14
	.byte	'ipv6_set_s',0,5,233,4,10,8,15
	.byte	'addr_index',0
	.word	285
	.byte	1,2,35,0,15
	.byte	'old_address',0
	.word	2398
	.byte	4,2,35,4,0,14
	.byte	'ipv6_addr_state_changed_s',0,5,241,4,10,8,15
	.byte	'addr_index',0
	.word	285
	.byte	1,2,35,0,15
	.byte	'old_state',0
	.word	387
	.byte	1,2,35,1,15
	.byte	'address',0
	.word	2398
	.byte	4,2,35,4,0,29,5,210,4,9,12,15
	.byte	'link_changed',0
	.word	3892
	.byte	1,2,35,0,15
	.byte	'status_changed',0
	.word	3929
	.byte	1,2,35,0,15
	.byte	'ipv4_changed',0
	.word	3968
	.byte	12,2,35,0,15
	.byte	'ipv6_set',0
	.word	4048
	.byte	8,2,35,0,15
	.byte	'ipv6_addr_state_changed',0
	.word	4107
	.byte	8,2,35,0,0,3
	.word	4196
	.byte	7
	.word	4322
	.byte	23,1,1,5
	.word	1093
	.byte	5
	.word	365
	.byte	5
	.word	4327
	.byte	0,7
	.word	4332
	.byte	20
	.byte	'netif_ext_callback_fn',0,5,132,5,16
	.word	4351
	.byte	14
	.byte	'ip4_addr_packed',0,22,53,8,4,15
	.byte	'addr',0
	.word	1072
	.byte	4,2,35,0,0,20
	.byte	'ip4_addr_p_t',0,22,61,32
	.word	4387
	.byte	14
	.byte	'ip_hdr',0,22,73,8,20,15
	.byte	'_v_hl',0
	.word	387
	.byte	1,2,35,0,15
	.byte	'_tos',0
	.word	387
	.byte	1,2,35,1,15
	.byte	'_len',0
	.word	365
	.byte	2,2,35,2,15
	.byte	'_id',0
	.word	365
	.byte	2,2,35,4,15
	.byte	'_offset',0
	.word	365
	.byte	2,2,35,6,15
	.byte	'_ttl',0
	.word	387
	.byte	1,2,35,8,15
	.byte	'_proto',0
	.word	387
	.byte	1,2,35,9,15
	.byte	'_chksum',0
	.word	365
	.byte	2,2,35,10,15
	.byte	'src',0
	.word	4387
	.byte	4,2,35,12,15
	.byte	'dest',0
	.word	4387
	.byte	4,2,35,16,0,3
	.word	4444
	.byte	7
	.word	4604
	.byte	14
	.byte	'ip_globals',0,23,107,8,24,15
	.byte	'current_netif',0
	.word	1093
	.byte	4,2,35,0,15
	.byte	'current_input_netif',0
	.word	1093
	.byte	4,2,35,4,15
	.byte	'current_ip4_header',0
	.word	4609
	.byte	4,2,35,8,15
	.byte	'current_ip_header_tot_len',0
	.word	365
	.byte	2,2,35,12,15
	.byte	'current_iphdr_src',0
	.word	1098
	.byte	4,2,35,14,15
	.byte	'current_iphdr_dest',0
	.word	1098
	.byte	4,2,35,18,0,28
	.byte	'ip_data',0,23,128,1,26
	.word	4614
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L206:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,11
	.byte	5,0,3,8,58,15,59,15,57,15,73,19,0,0,12,24,0,58,15,59,15,57,15,0,0,13,59,0,3,8,0,0,14,19,1,3,8,58,15,59
	.byte	15,57,15,11,15,0,0,15,13,0,3,8,73,19,11,15,56,9,0,0,16,4,1,58,15,59,15,57,15,11,15,0,0,17,40,0,3,8,28
	.byte	13,0,0,18,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,19,21,1,73,19,54,15,39,12,0,0,20,22,0
	.byte	3,8,58,15,59,15,57,15,73,19,0,0,21,1,1,11,15,73,19,0,0,22,33,0,47,15,0,0,23,21,1,54,15,39,12,0,0,24,4
	.byte	1,3,8,58,15,59,15,57,15,11,15,0,0,25,5,0,58,15,59,15,57,15,73,19,0,0,26,46,0,3,8,58,15,59,15,57,15,54
	.byte	15,63,12,60,12,0,0,27,21,0,54,15,0,0,28,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,29,23,1,58,15
	.byte	59,15,57,15,11,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L207:
	.word	.L592-.L591
.L591:
	.half	3
	.word	.L594-.L593
.L593:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'cc.h',0,1,0,0
	.byte	'pbuf.h',0,2,0,0
	.byte	'def.h',0,2,0,0
	.byte	'ip4_addr.h',0,2,0,0
	.byte	'netif.h',0,2,0,0
	.byte	'memp.h',0,2,0,0
	.byte	'ip4.h',0,2,0,0
	.byte	'udp.h',0,2,0,0
	.byte	'udp.h',0,3,0,0
	.byte	'inet_chksum.h',0,2,0,0
	.byte	'icmp.h',0,2,0,0
	.byte	'string.h',0,4,0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0
	.byte	'stddef.h',0,4,0,0
	.byte	'Platform_Types.h',0,5,0,0
	.byte	'Ifx_Types.h',0,5,0,0
	.byte	'stdint.h',0,4,0,0
	.byte	'err.h',0,2,0,0
	.byte	'ip_addr.h',0,2,0,0
	.byte	'mem.h',0,2,0,0
	.byte	'stats.h',0,2,0,0
	.byte	'ip4.h',0,3,0,0
	.byte	'ip.h',0,2,0,0,0
.L594:
.L592:
	.sdecl	'.debug_info',debug,cluster('udp_new')
	.sect	'.debug_info'
.L208:
	.word	224
	.half	3
	.word	.L209
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L211,.L210
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_new',0,1,193,9,17
	.word	.L312
	.byte	1,1,1
	.word	.L197,.L313,.L196
	.byte	4
	.word	.L197,.L313
	.byte	5
	.byte	'pcb',0,1,195,9,19
	.word	.L312,.L314
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_new')
	.sect	'.debug_abbrev'
.L209:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_new')
	.sect	'.debug_line'
.L210:
	.word	.L596-.L595
.L595:
	.half	3
	.word	.L598-.L597
.L597:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L598:
	.byte	5,39,7,0,5,2
	.word	.L197
	.byte	3,195,9,1,5,7,9
	.half	.L584-.L197
	.byte	1,5,3,9
	.half	.L586-.L584
	.byte	3,2,1,5,17,7,9
	.half	.L599-.L586
	.byte	3,5,1,5,20,1,5,16,9
	.half	.L587-.L599
	.byte	3,1,1,5,14,1,5,3,9
	.half	.L154-.L587
	.byte	3,5,1,5,1,9
	.half	.L588-.L154
	.byte	3,1,1,7,9
	.half	.L212-.L588
	.byte	0,1,1
.L596:
	.sdecl	'.debug_ranges',debug,cluster('udp_new')
	.sect	'.debug_ranges'
.L211:
	.word	-1,.L197,0,.L212-.L197,0,0
	.sdecl	'.debug_info',debug,cluster('udp_new_ip_type')
	.sect	'.debug_info'
.L213:
	.word	250
	.half	3
	.word	.L214
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L216,.L215
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_new_ip_type',0,1,227,9,1
	.word	.L312
	.byte	1,1,1
	.word	.L199,.L315,.L198
	.byte	4
	.byte	'type',0,1,227,9,22
	.word	.L316,.L317
	.byte	5
	.word	.L199,.L315
	.byte	6
	.byte	'pcb',0,1,229,9,19
	.word	.L312,.L318
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_new_ip_type')
	.sect	'.debug_abbrev'
.L214:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_new_ip_type')
	.sect	'.debug_line'
.L215:
	.word	.L601-.L600
.L600:
	.half	3
	.word	.L603-.L602
.L602:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L603:
	.byte	5,16,7,0,5,2
	.word	.L199
	.byte	3,232,9,1,5,1,7,9
	.half	.L217-.L199
	.byte	3,10,0,1,1
.L601:
	.sdecl	'.debug_ranges',debug,cluster('udp_new_ip_type')
	.sect	'.debug_ranges'
.L216:
	.word	-1,.L199,0,.L217-.L199,0,0
	.sdecl	'.debug_info',debug,cluster('udp_remove')
	.sect	'.debug_info'
.L218:
	.word	241
	.half	3
	.word	.L219
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L221,.L220
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_remove',0,1,155,9,1,1,1,1
	.word	.L195,.L319,.L194
	.byte	4
	.byte	'pcb',0,1,155,9,28
	.word	.L312,.L320
	.byte	5
	.word	.L195,.L319
	.byte	6
	.byte	'pcb2',0,1,157,9,19
	.word	.L312,.L321
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_remove')
	.sect	'.debug_abbrev'
.L219:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_remove')
	.sect	'.debug_line'
.L220:
	.word	.L605-.L604
.L604:
	.half	3
	.word	.L607-.L606
.L606:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L607:
	.byte	5,1,7,0,5,2
	.word	.L195
	.byte	3,154,9,1,5,3,9
	.half	.L578-.L195
	.byte	3,6,1,7,9
	.half	.L608-.L578
	.byte	1,5,7,9
	.half	.L145-.L608
	.byte	3,4,1,5,3,9
	.half	.L582-.L145
	.byte	1,5,24,7,9
	.half	.L609-.L582
	.byte	3,2,1,5,14,9
	.half	.L583-.L609
	.byte	1,5,30,9
	.half	.L610-.L583
	.byte	1,5,15,9
	.half	.L150-.L610
	.byte	3,5,1,5,11,9
	.half	.L611-.L150
	.byte	1,5,44,7,9
	.half	.L612-.L611
	.byte	1,5,25,7,9
	.half	.L613-.L612
	.byte	3,2,1,5,20,9
	.half	.L614-.L613
	.byte	1,5,9,9
	.half	.L615-.L614
	.byte	3,1,1,5,46,9
	.half	.L151-.L615
	.byte	3,123,1,5,39,9
	.half	.L149-.L151
	.byte	1,5,13,7,9
	.half	.L148-.L149
	.byte	3,9,1,5,27,9
	.half	.L616-.L148
	.byte	1,5,1,7,9
	.half	.L222-.L616
	.byte	3,1,0,1,1
.L605:
	.sdecl	'.debug_ranges',debug,cluster('udp_remove')
	.sect	'.debug_ranges'
.L221:
	.word	-1,.L195,0,.L222-.L195,0,0
	.sdecl	'.debug_info',debug,cluster('udp_bind')
	.sect	'.debug_info'
.L223:
	.word	301
	.half	3
	.word	.L224
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L226,.L225
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_bind',0,1,164,7,1
	.word	.L322
	.byte	1,1,1
	.word	.L185,.L323,.L184
	.byte	4
	.byte	'pcb',0,1,164,7,26
	.word	.L312,.L324
	.byte	4
	.byte	'ipaddr',0,1,164,7,48
	.word	.L325,.L326
	.byte	4
	.byte	'port',0,1,164,7,62
	.word	.L327,.L328
	.byte	5
	.word	.L185,.L323
	.byte	6
	.byte	'ipcb',0,1,166,7,19
	.word	.L312,.L329
	.byte	6
	.byte	'rebind',0,1,167,7,8
	.word	.L316,.L330
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_bind')
	.sect	'.debug_abbrev'
.L224:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_bind')
	.sect	'.debug_line'
.L225:
	.word	.L618-.L617
.L617:
	.half	3
	.word	.L620-.L619
.L619:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L620:
	.byte	5,1,7,0,5,2
	.word	.L185
	.byte	3,163,7,1,5,3,9
	.half	.L546-.L185
	.byte	3,12,1,5,14,7,9
	.half	.L621-.L546
	.byte	3,1,1,5,3,9
	.half	.L108-.L621
	.byte	3,6,1,7,9
	.half	.L622-.L108
	.byte	1,5,1,9
	.half	.L549-.L622
	.byte	3,204,0,1,5,15,7,9
	.half	.L109-.L549
	.byte	3,188,127,1,5,10,9
	.half	.L551-.L109
	.byte	3,126,1,5,13,9
	.half	.L552-.L551
	.byte	3,2,1,5,37,9
	.half	.L553-.L552
	.byte	1,5,5,9
	.half	.L112-.L553
	.byte	3,2,1,5,14,7,9
	.half	.L623-.L112
	.byte	3,1,1,5,7,3,1,1,5,50,9
	.half	.L113-.L623
	.byte	3,124,1,5,37,9
	.half	.L111-.L113
	.byte	1,5,3,7,9
	.half	.L114-.L111
	.byte	3,21,1,5,24,7,9
	.half	.L624-.L114
	.byte	3,1,1,5,10,9
	.half	.L550-.L624
	.byte	1,5,5,9
	.half	.L554-.L550
	.byte	3,1,1,5,7,7,9
	.half	.L625-.L554
	.byte	3,2,1,5,16,9
	.half	.L115-.L625
	.byte	3,17,1,5,39,9
	.half	.L626-.L115
	.byte	3,115,1,5,7,9
	.half	.L119-.L626
	.byte	3,1,1,5,20,7,9
	.half	.L627-.L119
	.byte	3,10,1,5,15,9
	.half	.L556-.L627
	.byte	1,5,16,7,9
	.half	.L557-.L556
	.byte	3,2,1,5,56,9
	.half	.L628-.L557
	.byte	1,5,15,7,9
	.half	.L629-.L628
	.byte	3,1,1,5,20,7,9
	.half	.L117-.L629
	.byte	3,4,1,5,1,3,21,1,5,52,7,9
	.half	.L120-.L117
	.byte	3,89,1,5,39,9
	.half	.L118-.L120
	.byte	1,5,16,7,9
	.half	.L116-.L118
	.byte	3,13,1,5,3,9
	.half	.L630-.L116
	.byte	3,12,1,5,19,9
	.half	.L631-.L630
	.byte	3,2,1,5,3,9
	.half	.L632-.L631
	.byte	3,3,1,5,17,7,9
	.half	.L633-.L632
	.byte	3,2,1,5,15,9
	.half	.L634-.L633
	.byte	1,5,14,9
	.half	.L635-.L634
	.byte	3,1,1,5,3,9
	.half	.L126-.L635
	.byte	3,2,1,9
	.half	.L555-.L126
	.byte	3,1,1,9
	.half	.L636-.L555
	.byte	3,1,1,5,10,9
	.half	.L637-.L636
	.byte	3,1,1,5,1,3,1,1,7,9
	.half	.L227-.L637
	.byte	0,1,1
.L618:
	.sdecl	'.debug_ranges',debug,cluster('udp_bind')
	.sect	'.debug_ranges'
.L226:
	.word	-1,.L185,0,.L227-.L185,0,0
	.sdecl	'.debug_info',debug,cluster('udp_bind_netif')
	.sect	'.debug_info'
.L228:
	.word	245
	.half	3
	.word	.L229
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L231,.L230
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_bind_netif',0,1,146,8,1,1,1,1
	.word	.L187,.L331,.L186
	.byte	4
	.byte	'pcb',0,1,146,8,32
	.word	.L312,.L332
	.byte	4
	.byte	'netif',0,1,146,8,57
	.word	.L333,.L334
	.byte	5
	.word	.L187,.L331
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_bind_netif')
	.sect	'.debug_abbrev'
.L229:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_bind_netif')
	.sect	'.debug_line'
.L230:
	.word	.L639-.L638
.L638:
	.half	3
	.word	.L641-.L640
.L640:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L641:
	.byte	5,3,7,0,5,2
	.word	.L187
	.byte	3,149,8,1,5,22,7,9
	.half	.L642-.L187
	.byte	3,1,1,5,20,9
	.half	.L643-.L642
	.byte	1,5,1,9
	.half	.L644-.L643
	.byte	3,4,1,5,22,7,9
	.half	.L128-.L644
	.byte	3,126,1,5,20,1,5,1,9
	.half	.L645-.L128
	.byte	3,2,1,7,9
	.half	.L232-.L645
	.byte	0,1,1
.L639:
	.sdecl	'.debug_ranges',debug,cluster('udp_bind_netif')
	.sect	'.debug_ranges'
.L231:
	.word	-1,.L187,0,.L232-.L187,0,0
	.sdecl	'.debug_info',debug,cluster('udp_connect')
	.sect	'.debug_info'
.L233:
	.word	311
	.half	3
	.word	.L234
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L236,.L235
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_connect',0,1,175,8,1
	.word	.L322
	.byte	1,1,1
	.word	.L189,.L335,.L188
	.byte	4
	.byte	'pcb',0,1,175,8,29
	.word	.L312,.L336
	.byte	4
	.byte	'ipaddr',0,1,175,8,51
	.word	.L325,.L337
	.byte	4
	.byte	'port',0,1,175,8,65
	.word	.L327,.L338
	.byte	5
	.word	.L189,.L335
	.byte	6
	.byte	'ipcb',0,1,177,8,19
	.word	.L312,.L339
	.byte	5
	.word	.L340,.L134
	.byte	6
	.byte	'err',0,1,185,8,11
	.word	.L322,.L341
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_connect')
	.sect	'.debug_abbrev'
.L234:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_connect')
	.sect	'.debug_line'
.L235:
	.word	.L647-.L646
.L646:
	.half	3
	.word	.L649-.L648
.L648:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L649:
	.byte	5,1,7,0,5,2
	.word	.L189
	.byte	3,174,8,1,5,3,9
	.half	.L565-.L189
	.byte	3,6,1,7,9
	.half	.L566-.L565
	.byte	1,9
	.half	.L130-.L566
	.byte	3,1,1,7,9
	.half	.L650-.L130
	.byte	1,5,1,9
	.half	.L564-.L650
	.byte	3,38,1,5,10,7,9
	.half	.L132-.L564
	.byte	3,92,1,5,3,9
	.half	.L651-.L132
	.byte	1,5,50,7,9
	.half	.L340-.L651
	.byte	3,1,1,5,5,9
	.half	.L568-.L340
	.byte	3,1,1,5,3,7,9
	.half	.L134-.L568
	.byte	3,5,1,5,20,9
	.half	.L652-.L134
	.byte	3,10,1,5,3,9
	.half	.L653-.L652
	.byte	3,3,1,5,6,9
	.half	.L654-.L653
	.byte	3,126,1,5,3,9
	.half	.L655-.L654
	.byte	3,2,1,5,14,9
	.half	.L656-.L655
	.byte	3,126,1,5,3,9
	.half	.L657-.L656
	.byte	3,2,1,9
	.half	.L658-.L657
	.byte	3,1,1,9
	.half	.L659-.L658
	.byte	3,2,1,5,15,9
	.half	.L660-.L659
	.byte	3,3,1,5,13,9
	.half	.L661-.L660
	.byte	1,5,37,9
	.half	.L569-.L661
	.byte	1,5,5,9
	.half	.L138-.L569
	.byte	3,1,1,5,50,7,9
	.half	.L662-.L138
	.byte	3,127,1,5,37,9
	.half	.L137-.L662
	.byte	1,5,13,7,9
	.half	.L663-.L137
	.byte	3,7,1,5,12,9
	.half	.L664-.L663
	.byte	3,1,1,5,10,9
	.half	.L139-.L664
	.byte	3,1,1,5,1,9
	.half	.L136-.L139
	.byte	3,1,1,7,9
	.half	.L237-.L136
	.byte	0,1,1
.L647:
	.sdecl	'.debug_ranges',debug,cluster('udp_connect')
	.sect	'.debug_ranges'
.L236:
	.word	-1,.L189,0,.L237-.L189,0,0
	.sdecl	'.debug_info',debug,cluster('udp_disconnect')
	.sect	'.debug_info'
.L238:
	.word	226
	.half	3
	.word	.L239
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L241,.L240
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_disconnect',0,1,230,8,1,1,1,1
	.word	.L191,.L342,.L190
	.byte	4
	.byte	'pcb',0,1,230,8,32
	.word	.L312,.L343
	.byte	5
	.word	.L191,.L342
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_disconnect')
	.sect	'.debug_abbrev'
.L239:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_disconnect')
	.sect	'.debug_line'
.L240:
	.word	.L666-.L665
.L665:
	.half	3
	.word	.L668-.L667
.L667:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L668:
	.byte	5,1,7,0,5,2
	.word	.L191
	.byte	3,229,8,1,5,3,9
	.half	.L570-.L191
	.byte	3,4,1,7,9
	.half	.L669-.L570
	.byte	1,5,5,9
	.half	.L141-.L669
	.byte	3,8,1,5,20,9
	.half	.L670-.L141
	.byte	3,4,1,5,18,9
	.half	.L671-.L670
	.byte	3,1,1,5,3,9
	.half	.L672-.L671
	.byte	3,2,1,5,1,9
	.half	.L673-.L672
	.byte	3,1,1,7,9
	.half	.L242-.L673
	.byte	0,1,1
.L666:
	.sdecl	'.debug_ranges',debug,cluster('udp_disconnect')
	.sect	'.debug_ranges'
.L241:
	.word	-1,.L191,0,.L242-.L191,0,0
	.sdecl	'.debug_info',debug,cluster('udp_recv')
	.sect	'.debug_info'
.L243:
	.word	260
	.half	3
	.word	.L244
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L246,.L245
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_recv',0,1,134,9,1,1,1,1
	.word	.L193,.L344,.L192
	.byte	4
	.byte	'pcb',0,1,134,9,26
	.word	.L312,.L345
	.byte	4
	.byte	'recv',0,1,134,9,43
	.word	.L346,.L347
	.byte	4
	.byte	'recv_arg',0,1,134,9,55
	.word	.L348,.L349
	.byte	5
	.word	.L193,.L344
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_recv')
	.sect	'.debug_abbrev'
.L244:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_recv')
	.sect	'.debug_line'
.L245:
	.word	.L675-.L674
.L674:
	.half	3
	.word	.L677-.L676
.L676:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L677:
	.byte	5,1,7,0,5,2
	.word	.L193
	.byte	3,133,9,1,5,3,9
	.half	.L574-.L193
	.byte	3,4,1,7,9
	.half	.L678-.L574
	.byte	1,5,13,9
	.half	.L143-.L678
	.byte	3,3,1,5,17,9
	.half	.L679-.L143
	.byte	3,1,1,5,1,9
	.half	.L680-.L679
	.byte	3,1,1,7,9
	.half	.L247-.L680
	.byte	0,1,1
.L675:
	.sdecl	'.debug_ranges',debug,cluster('udp_recv')
	.sect	'.debug_ranges'
.L246:
	.word	-1,.L193,0,.L247-.L193,0,0
	.sdecl	'.debug_info',debug,cluster('udp_sendto_if')
	.sect	'.debug_info'
.L248:
	.word	326
	.half	3
	.word	.L249
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L251,.L250
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_sendto_if',0,1,240,4,1
	.word	.L322
	.byte	1,1,1
	.word	.L181,.L350,.L180
	.byte	4
	.byte	'pcb',0,1,240,4,31
	.word	.L312,.L351
	.byte	4
	.byte	'p',0,1,240,4,49
	.word	.L352,.L353
	.byte	4
	.byte	'dst_ip',0,1,241,4,32
	.word	.L325,.L354
	.byte	4
	.byte	'dst_port',0,1,241,4,46
	.word	.L327,.L355
	.byte	4
	.byte	'netif',0,1,241,4,70
	.word	.L356,.L357
	.byte	5
	.word	.L181,.L350
	.byte	6
	.byte	'src_ip',0,1,254,4,20
	.word	.L325,.L358
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_sendto_if')
	.sect	'.debug_abbrev'
.L249:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_sendto_if')
	.sect	'.debug_line'
.L250:
	.word	.L682-.L681
.L681:
	.half	3
	.word	.L684-.L683
.L683:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L684:
	.byte	5,1,7,0,5,2
	.word	.L181
	.byte	3,239,4,1,5,3,9
	.half	.L503-.L181
	.byte	3,16,1,7,9
	.half	.L685-.L503
	.byte	1,9
	.half	.L71-.L685
	.byte	3,1,1,7,9
	.half	.L686-.L71
	.byte	1,9
	.half	.L73-.L686
	.byte	3,1,1,7,9
	.half	.L687-.L73
	.byte	1,9
	.half	.L75-.L687
	.byte	3,1,1,7,9
	.half	.L688-.L75
	.byte	1,5,1,9
	.half	.L505-.L688
	.byte	3,51,1,5,9,7,9
	.half	.L77-.L505
	.byte	3,107,1,9
	.half	.L689-.L77
	.byte	3,1,1,5,16,9
	.half	.L79-.L689
	.byte	3,3,1,5,37,9
	.half	.L506-.L79
	.byte	1,5,12,9
	.half	.L80-.L506
	.byte	3,4,1,5,16,9
	.half	.L690-.L80
	.byte	3,2,1,5,1,3,11,1,5,14,7,9
	.half	.L82-.L690
	.byte	3,120,1,5,61,9
	.half	.L81-.L82
	.byte	3,6,1,5,54,9
	.half	.L691-.L81
	.byte	1,5,1,7,9
	.half	.L252-.L691
	.byte	3,2,0,1,1
.L682:
	.sdecl	'.debug_ranges',debug,cluster('udp_sendto_if')
	.sect	'.debug_ranges'
.L251:
	.word	-1,.L181,0,.L252-.L181,0,0
	.sdecl	'.debug_info',debug,cluster('udp_sendto_if_src')
	.sect	'.debug_info'
.L253:
	.word	415
	.half	3
	.word	.L254
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L256,.L255
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_sendto_if_src',0,1,187,5,1
	.word	.L322
	.byte	1,1,1
	.word	.L183,.L359,.L182
	.byte	4
	.byte	'pcb',0,1,187,5,35
	.word	.L312,.L360
	.byte	4
	.byte	'p',0,1,187,5,53
	.word	.L352,.L361
	.byte	4
	.byte	'dst_ip',0,1,188,5,36
	.word	.L325,.L362
	.byte	4
	.byte	'dst_port',0,1,188,5,50
	.word	.L327,.L363
	.byte	4
	.byte	'netif',0,1,188,5,74
	.word	.L356,.L364
	.byte	4
	.byte	'src_ip',0,1,188,5,98
	.word	.L325,.L365
	.byte	5
	.word	.L183,.L359
	.byte	6
	.byte	'udphdr',0,1,201,5,19
	.word	.L366,.L367
	.byte	6
	.byte	'err',0,1,202,5,9
	.word	.L322,.L368
	.byte	6
	.byte	'q',0,1,203,5,16
	.word	.L352,.L369
	.byte	5
	.word	.L370,.L104
	.byte	6
	.byte	'udpchksum',0,1,216,6,15
	.word	.L327,.L371
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_sendto_if_src')
	.sect	'.debug_abbrev'
.L254:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_sendto_if_src')
	.sect	'.debug_line'
.L255:
	.word	.L693-.L692
.L692:
	.half	3
	.word	.L695-.L694
.L694:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L695:
	.byte	5,1,7,0,5,2
	.word	.L183
	.byte	3,186,5,1,5,3,9
	.half	.L515-.L183
	.byte	3,22,1,7,9
	.half	.L696-.L515
	.byte	1,9
	.half	.L85-.L696
	.byte	3,1,1,7,9
	.half	.L697-.L85
	.byte	1,9
	.half	.L87-.L697
	.byte	3,1,1,9
	.half	.L89-.L87
	.byte	3,1,1,9
	.half	.L91-.L89
	.byte	3,1,1,5,1,9
	.half	.L516-.L91
	.byte	3,184,1,1,5,10,7,9
	.half	.L93-.L516
	.byte	3,221,126,1,5,3,9
	.half	.L698-.L93
	.byte	1,5,44,7,9
	.half	.L699-.L698
	.byte	3,2,1,5,9,9
	.half	.L520-.L699
	.byte	1,5,5,9
	.half	.L521-.L520
	.byte	3,1,1,5,41,7,9
	.half	.L95-.L521
	.byte	3,7,1,5,26,9
	.half	.L700-.L95
	.byte	1,5,7,9
	.half	.L701-.L700
	.byte	1,5,3,9
	.half	.L702-.L701
	.byte	1,5,26,7,9
	.half	.L703-.L702
	.byte	3,4,1,5,3,9
	.half	.L523-.L703
	.byte	1,5,20,7,9
	.half	.L704-.L523
	.byte	3,2,1,5,29,9
	.half	.L705-.L704
	.byte	1,5,39,9
	.half	.L706-.L705
	.byte	1,5,7,9
	.half	.L524-.L706
	.byte	1,5,5,9
	.half	.L525-.L524
	.byte	3,2,1,5,14,7,9
	.half	.L97-.L525
	.byte	3,2,1,5,1,3,143,1,1,5,10,7,9
	.half	.L99-.L97
	.byte	3,243,126,1,5,5,9
	.half	.L707-.L99
	.byte	1,5,21,7,9
	.half	.L708-.L707
	.byte	3,2,1,5,5,9
	.half	.L527-.L708
	.byte	3,3,1,5,7,9
	.half	.L98-.L527
	.byte	3,5,1,5,3,9
	.half	.L101-.L98
	.byte	3,3,1,5,31,9
	.half	.L103-.L101
	.byte	3,3,1,9
	.half	.L530-.L103
	.byte	3,1,1,5,15,9
	.half	.L709-.L530
	.byte	1,5,29,9
	.half	.L710-.L709
	.byte	3,1,1,5,16,9
	.half	.L711-.L710
	.byte	1,5,20,9
	.half	.L712-.L711
	.byte	3,2,1,5,18,1,5,31,9
	.half	.L713-.L712
	.byte	3,62,1,5,17,9
	.half	.L714-.L713
	.byte	1,5,35,9
	.half	.L715-.L714
	.byte	3,5,1,5,65,9
	.half	.L716-.L715
	.byte	1,5,43,7,9
	.half	.L370-.L716
	.byte	3,12,1,5,58,1,5,48,9
	.half	.L717-.L370
	.byte	3,1,1,5,21,9
	.half	.L533-.L717
	.byte	3,5,1,5,24,9
	.half	.L718-.L533
	.byte	3,2,1,5,12,9
	.half	.L104-.L718
	.byte	3,11,1,5,9,9
	.half	.L719-.L104
	.byte	3,7,1,5,7,9
	.half	.L537-.L719
	.byte	1,5,3,3,7,1,5,15,7,9
	.half	.L541-.L537
	.byte	3,2,1,5,3,9
	.half	.L106-.L541
	.byte	3,5,1,9
	.half	.L96-.L106
	.byte	3,1,1,5,1,3,1,1,7,9
	.half	.L257-.L96
	.byte	0,1,1
.L693:
	.sdecl	'.debug_ranges',debug,cluster('udp_sendto_if_src')
	.sect	'.debug_ranges'
.L256:
	.word	-1,.L183,0,.L257-.L183,0,0
	.sdecl	'.debug_info',debug,cluster('udp_sendto')
	.sect	'.debug_info'
.L258:
	.word	303
	.half	3
	.word	.L259
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L261,.L260
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_sendto',0,1,136,4,1
	.word	.L322
	.byte	1,1,1
	.word	.L179,.L372,.L178
	.byte	4
	.byte	'pcb',0,1,136,4,28
	.word	.L312,.L373
	.byte	4
	.byte	'p',0,1,136,4,46
	.word	.L352,.L374
	.byte	4
	.byte	'dst_ip',0,1,137,4,29
	.word	.L325,.L375
	.byte	4
	.byte	'dst_port',0,1,137,4,43
	.word	.L327,.L376
	.byte	5
	.word	.L179,.L372
	.byte	6
	.byte	'netif',0,1,150,4,17
	.word	.L356,.L377
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_sendto')
	.sect	'.debug_abbrev'
.L259:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_sendto')
	.sect	'.debug_line'
.L260:
	.word	.L721-.L720
.L720:
	.half	3
	.word	.L723-.L722
.L722:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L723:
	.byte	5,1,7,0,5,2
	.word	.L179
	.byte	3,135,4,1,5,3,9
	.half	.L492-.L179
	.byte	3,16,1,7,9
	.half	.L487-.L492
	.byte	1,9
	.half	.L60-.L487
	.byte	3,1,1,7,9
	.half	.L724-.L60
	.byte	1,9
	.half	.L62-.L724
	.byte	3,1,1,7,9
	.half	.L725-.L62
	.byte	1,5,1,9
	.half	.L491-.L725
	.byte	3,63,1,5,10,7,9
	.half	.L64-.L491
	.byte	3,73,1,5,3,9
	.half	.L496-.L64
	.byte	1,5,35,7,9
	.half	.L726-.L496
	.byte	3,1,1,5,47,9
	.half	.L494-.L726
	.byte	1,5,15,9
	.half	.L66-.L494
	.byte	3,37,1,5,3,9
	.half	.L67-.L66
	.byte	3,5,1,5,5,7,9
	.half	.L727-.L67
	.byte	3,4,1,5,12,9
	.half	.L495-.L727
	.byte	3,1,1,5,5,9
	.half	.L728-.L495
	.byte	3,127,1,5,1,9
	.half	.L729-.L728
	.byte	3,8,1,5,50,7,9
	.half	.L68-.L729
	.byte	3,126,1,5,1,9
	.half	.L262-.L68
	.byte	3,2,0,1,1
.L721:
	.sdecl	'.debug_ranges',debug,cluster('udp_sendto')
	.sect	'.debug_ranges'
.L261:
	.word	-1,.L179,0,.L262-.L179,0,0
	.sdecl	'.debug_info',debug,cluster('udp_send')
	.sect	'.debug_info'
.L263:
	.word	239
	.half	3
	.word	.L264
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L266,.L265
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_send',0,1,211,3,1
	.word	.L322
	.byte	1,1,1
	.word	.L177,.L378,.L176
	.byte	4
	.byte	'pcb',0,1,211,3,26
	.word	.L312,.L379
	.byte	4
	.byte	'p',0,1,211,3,44
	.word	.L352,.L380
	.byte	5
	.word	.L177,.L378
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_send')
	.sect	'.debug_abbrev'
.L264:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_send')
	.sect	'.debug_line'
.L265:
	.word	.L731-.L730
.L730:
	.half	3
	.word	.L733-.L732
.L732:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L733:
	.byte	5,1,7,0,5,2
	.word	.L177
	.byte	3,210,3,1,5,3,9
	.half	.L481-.L177
	.byte	3,2,1,7,9
	.half	.L734-.L481
	.byte	1,9
	.half	.L55-.L734
	.byte	3,1,1,7,9
	.half	.L735-.L55
	.byte	1,5,1,9
	.half	.L483-.L735
	.byte	3,8,1,5,49,7,9
	.half	.L57-.L483
	.byte	3,127,1,5,33,9
	.half	.L736-.L57
	.byte	1,5,49,9
	.half	.L737-.L736
	.byte	1,5,1,7,9
	.half	.L267-.L737
	.byte	3,1,0,1,1
.L731:
	.sdecl	'.debug_ranges',debug,cluster('udp_send')
	.sect	'.debug_ranges'
.L266:
	.word	-1,.L177,0,.L267-.L177,0,0
	.sdecl	'.debug_info',debug,cluster('udp_input')
	.sect	'.debug_info'
.L268:
	.word	393
	.half	3
	.word	.L269
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L271,.L270
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_input',0,1,194,1,1,1,1,1
	.word	.L175,.L381,.L174
	.byte	4
	.byte	'p',0,1,194,1,24
	.word	.L352,.L382
	.byte	4
	.byte	'inp',0,1,194,1,41
	.word	.L356,.L383
	.byte	5
	.word	.L175,.L381
	.byte	6
	.byte	'udphdr',0,1,196,1,19
	.word	.L366,.L384
	.byte	6
	.byte	'pcb',0,1,197,1,19
	.word	.L312,.L385
	.byte	6
	.byte	'prev',0,1,197,1,25
	.word	.L312,.L386
	.byte	6
	.byte	'uncon_pcb',0,1,198,1,19
	.word	.L312,.L387
	.byte	6
	.byte	'src',0,1,199,1,9
	.word	.L327,.L388
	.byte	6
	.byte	'dest',0,1,199,1,14
	.word	.L327,.L389
	.byte	6
	.byte	'broadcast',0,1,200,1,8
	.word	.L316,.L390
	.byte	6
	.byte	'for_us',0,1,201,1,8
	.word	.L316,.L391
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_input')
	.sect	'.debug_abbrev'
.L269:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_input')
	.sect	'.debug_line'
.L270:
	.word	.L739-.L738
.L738:
	.half	3
	.word	.L741-.L740
.L740:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L741:
	.byte	5,1,7,0,5,2
	.word	.L175
	.byte	3,193,1,1,5,3,9
	.half	.L419-.L175
	.byte	3,13,1,9
	.half	.L21-.L419
	.byte	3,1,1,7,9
	.half	.L742-.L21
	.byte	1,9
	.half	.L22-.L742
	.byte	3,4,1,5,8,9
	.half	.L743-.L22
	.byte	3,3,1,5,3,9
	.half	.L744-.L743
	.byte	1,5,5,7,9
	.half	.L745-.L744
	.byte	3,4,1,9
	.half	.L746-.L745
	.byte	3,4,1,5,31,9
	.half	.L23-.L746
	.byte	3,3,1,5,15,9
	.half	.L431-.L23
	.byte	3,3,1,5,9,9
	.half	.L432-.L431
	.byte	3,5,1,5,13,9
	.half	.L434-.L432
	.byte	3,123,1,5,9,9
	.half	.L436-.L434
	.byte	3,5,1,5,7,9
	.half	.L433-.L436
	.byte	1,5,10,3,1,1,5,8,9
	.half	.L437-.L433
	.byte	1,5,19,3,2,1,5,8,9
	.half	.L439-.L437
	.byte	3,10,1,5,13,9
	.half	.L440-.L439
	.byte	3,1,1,5,14,9
	.half	.L441-.L440
	.byte	3,5,1,5,35,9
	.half	.L442-.L441
	.byte	1,5,13,9
	.half	.L26-.L442
	.byte	3,9,1,5,9,9
	.half	.L443-.L26
	.byte	1,5,42,7,9
	.half	.L747-.L443
	.byte	3,1,1,5,53,9
	.half	.L445-.L747
	.byte	1,5,15,7,9
	.half	.L447-.L445
	.byte	3,1,1,5,7,9
	.half	.L448-.L447
	.byte	1,5,9,7,9
	.half	.L449-.L448
	.byte	3,1,1,5,20,7,9
	.half	.L450-.L449
	.byte	3,4,1,5,56,7,9
	.half	.L748-.L450
	.byte	1,5,63,9
	.half	.L749-.L748
	.byte	1,5,54,7,9
	.half	.L750-.L749
	.byte	3,2,1,5,48,9
	.half	.L751-.L750
	.byte	3,2,1,5,25,9
	.half	.L30-.L751
	.byte	3,2,1,5,15,9
	.half	.L29-.L30
	.byte	3,14,1,5,11,9
	.half	.L752-.L29
	.byte	1,5,12,7,9
	.half	.L753-.L752
	.byte	3,1,1,9
	.half	.L754-.L753
	.byte	3,1,1,5,9,9
	.half	.L36-.L754
	.byte	3,2,1,5,27,7,9
	.half	.L755-.L36
	.byte	3,3,1,5,22,9
	.half	.L457-.L755
	.byte	1,5,21,9
	.half	.L756-.L457
	.byte	3,1,1,5,23,9
	.half	.L458-.L756
	.byte	1,5,21,9
	.half	.L757-.L458
	.byte	1,5,20,9
	.half	.L758-.L757
	.byte	3,1,1,5,33,9
	.half	.L759-.L758
	.byte	3,126,1,5,11,9
	.half	.L38-.L759
	.byte	3,4,1,5,9,9
	.half	.L760-.L38
	.byte	3,2,1,5,10,9
	.half	.L27-.L760
	.byte	3,4,1,5,46,9
	.half	.L761-.L27
	.byte	3,75,1,5,35,9
	.half	.L460-.L761
	.byte	1,5,3,7,9
	.half	.L39-.L460
	.byte	3,56,1,5,9,9
	.half	.L463-.L39
	.byte	3,1,1,5,3,9
	.half	.L41-.L463
	.byte	3,4,1,5,12,7,9
	.half	.L462-.L41
	.byte	3,1,1,5,15,1,5,16,9
	.half	.L42-.L462
	.byte	3,9,1,5,3,9
	.half	.L43-.L42
	.byte	3,5,1,5,19,7,9
	.half	.L762-.L43
	.byte	3,27,1,5,9,9
	.half	.L464-.L762
	.byte	1,5,50,7,9
	.half	.L763-.L464
	.byte	3,1,1,5,32,9
	.half	.L467-.L763
	.byte	3,1,1,5,35,9
	.half	.L466-.L467
	.byte	3,127,1,5,32,3,2,1,5,50,9
	.half	.L764-.L466
	.byte	3,126,1,5,32,9
	.half	.L765-.L764
	.byte	3,1,1,9
	.half	.L766-.L765
	.byte	3,1,1,5,11,9
	.half	.L468-.L766
	.byte	3,126,1,5,31,7,9
	.half	.L45-.L468
	.byte	3,9,1,5,5,9
	.half	.L470-.L45
	.byte	1,5,7,7,9
	.half	.L767-.L470
	.byte	3,2,1,9
	.half	.L768-.L767
	.byte	3,4,1,5,5,9
	.half	.L47-.L768
	.byte	3,3,1,5,14,9
	.half	.L769-.L47
	.byte	3,27,1,5,7,9
	.half	.L770-.L769
	.byte	1,5,22,7,9
	.half	.L771-.L770
	.byte	3,2,1,5,42,9
	.half	.L772-.L771
	.byte	1,5,65,9
	.half	.L473-.L772
	.byte	1,5,42,9
	.half	.L475-.L473
	.byte	1,5,65,9
	.half	.L773-.L475
	.byte	1,5,12,7,9
	.half	.L49-.L773
	.byte	3,12,1,5,26,7,9
	.half	.L774-.L49
	.byte	1,5,38,9
	.half	.L775-.L774
	.byte	3,2,1,5,30,9
	.half	.L776-.L775
	.byte	1,5,38,9
	.half	.L477-.L776
	.byte	1,5,66,9
	.half	.L777-.L477
	.byte	1,5,30,9
	.half	.L778-.L777
	.byte	1,5,9,9
	.half	.L478-.L778
	.byte	3,1,1,5,7,9
	.half	.L52-.L478
	.byte	3,3,1,9
	.half	.L779-.L52
	.byte	3,116,1,5,3,9
	.half	.L46-.L779
	.byte	3,27,1,9
	.half	.L24-.L46
	.byte	3,1,1,5,13,9
	.half	.L44-.L24
	.byte	3,2,1,5,1,9
	.half	.L272-.L44
	.byte	3,3,0,1,1
.L739:
	.sdecl	'.debug_ranges',debug,cluster('udp_input')
	.sect	'.debug_ranges'
.L271:
	.word	-1,.L175,0,.L272-.L175,0,0
	.sdecl	'.debug_info',debug,cluster('udp_init')
	.sect	'.debug_info'
.L273:
	.word	202
	.half	3
	.word	.L274
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L276,.L275
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_init',0,1,87,1,1,1,1
	.word	.L165,.L392,.L164
	.byte	4
	.word	.L165,.L392
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_init')
	.sect	'.debug_abbrev'
.L274:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_init')
	.sect	'.debug_line'
.L275:
	.word	.L781-.L780
.L780:
	.half	3
	.word	.L783-.L782
.L782:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L783:
	.byte	5,1,7,0,5,2
	.word	.L165
	.byte	3,219,0,1,7,9
	.half	.L277-.L165
	.byte	0,1,1
.L781:
	.sdecl	'.debug_ranges',debug,cluster('udp_init')
	.sect	'.debug_ranges'
.L276:
	.word	-1,.L165,0,.L277-.L165,0,0
	.sdecl	'.debug_info',debug,cluster('udp_debug_print')
	.sect	'.debug_info'
.L278:
	.word	230
	.half	3
	.word	.L279
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L281,.L280
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_debug_print',0,1,145,10,1,1,1,1
	.word	.L203,.L393,.L202
	.byte	4
	.byte	'udphdr',0,1,145,10,33
	.word	.L366,.L394
	.byte	5
	.word	.L203,.L393
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_debug_print')
	.sect	'.debug_abbrev'
.L279:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_debug_print')
	.sect	'.debug_line'
.L280:
	.word	.L785-.L784
.L784:
	.half	3
	.word	.L787-.L786
.L786:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L787:
	.byte	5,1,7,0,5,2
	.word	.L203
	.byte	3,154,10,1,7,9
	.half	.L282-.L203
	.byte	0,1,1
.L785:
	.sdecl	'.debug_ranges',debug,cluster('udp_debug_print')
	.sect	'.debug_ranges'
.L281:
	.word	-1,.L203,0,.L282-.L203,0,0
	.sdecl	'.debug_info',debug,cluster('udp_netif_ip_addr_changed')
	.sect	'.debug_info'
.L283:
	.word	283
	.half	3
	.word	.L284
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L286,.L285
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_netif_ip_addr_changed',0,1,250,9,6,1,1,1
	.word	.L201,.L395,.L200
	.byte	4
	.byte	'old_addr',0,1,250,9,49
	.word	.L325,.L396
	.byte	4
	.byte	'new_addr',0,1,250,9,76
	.word	.L325,.L397
	.byte	5
	.word	.L201,.L395
	.byte	6
	.byte	'upcb',0,1,252,9,19
	.word	.L312,.L398
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_netif_ip_addr_changed')
	.sect	'.debug_abbrev'
.L284:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_netif_ip_addr_changed')
	.sect	'.debug_line'
.L285:
	.word	.L789-.L788
.L788:
	.half	3
	.word	.L791-.L790
.L790:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L791:
	.byte	5,8,7,0,5,2
	.word	.L201
	.byte	3,253,9,1,7,9
	.half	.L792-.L201
	.byte	1,5,36,9
	.half	.L793-.L792
	.byte	1,7,9
	.half	.L794-.L793
	.byte	1,5,17,9
	.half	.L795-.L794
	.byte	3,1,1,5,39,9
	.half	.L589-.L795
	.byte	1,5,11,9
	.half	.L162-.L589
	.byte	3,2,1,5,7,9
	.half	.L796-.L162
	.byte	1,5,9,7,9
	.half	.L797-.L796
	.byte	3,3,1,5,52,9
	.half	.L163-.L797
	.byte	3,123,1,5,39,9
	.half	.L161-.L163
	.byte	1,5,1,7,9
	.half	.L157-.L161
	.byte	3,9,1,7,9
	.half	.L287-.L157
	.byte	0,1,1
.L789:
	.sdecl	'.debug_ranges',debug,cluster('udp_netif_ip_addr_changed')
	.sect	'.debug_ranges'
.L286:
	.word	-1,.L201,0,.L287-.L201,0,0
	.sdecl	'.debug_info',debug,cluster('udp_new_port')
	.sect	'.debug_info'
.L288:
	.word	240
	.half	3
	.word	.L289
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L291,.L290
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_new_port',0,1,100,1
	.word	.L327
	.byte	1,1
	.word	.L167,.L399,.L166
	.byte	4
	.word	.L167,.L399
	.byte	5
	.byte	'n',0,1,102,9
	.word	.L327,.L400
	.byte	5
	.byte	'pcb',0,1,103,19
	.word	.L312,.L401
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_new_port')
	.sect	'.debug_abbrev'
.L289:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_new_port')
	.sect	'.debug_line'
.L290:
	.word	.L799-.L798
.L798:
	.half	3
	.word	.L801-.L800
.L800:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L801:
	.byte	5,11,7,0,5,2
	.word	.L167
	.byte	3,229,0,1,5,7,3,4,1,5,15,9
	.half	.L2-.L167
	.byte	1,5,14,3,4,1,5,15,9
	.half	.L407-.L2
	.byte	3,124,1,5,21,9
	.half	.L802-.L407
	.byte	1,5,3,9
	.half	.L803-.L802
	.byte	1,5,14,9
	.half	.L804-.L803
	.byte	3,1,1,5,35,9
	.half	.L805-.L804
	.byte	3,3,1,5,12,9
	.half	.L5-.L805
	.byte	3,1,1,5,5,9
	.half	.L806-.L5
	.byte	1,5,11,7,9
	.half	.L807-.L806
	.byte	3,1,1,5,43,9
	.half	.L808-.L807
	.byte	1,5,7,9
	.half	.L809-.L808
	.byte	1,5,1,7,9
	.half	.L810-.L809
	.byte	3,7,1,5,9,3,122,1,5,46,9
	.half	.L6-.L810
	.byte	3,125,1,5,35,9
	.half	.L4-.L6
	.byte	1,5,1,7,9
	.half	.L811-.L4
	.byte	3,9,1,9
	.half	.L292-.L811
	.byte	0,1,1
.L799:
	.sdecl	'.debug_ranges',debug,cluster('udp_new_port')
	.sect	'.debug_ranges'
.L291:
	.word	-1,.L167,0,.L292-.L167,0,0
	.sdecl	'.debug_info',debug,cluster('udp_input_local_match')
	.sect	'.debug_info'
.L293:
	.word	272
	.half	3
	.word	.L294
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L296,.L295
	.byte	2
	.word	.L204
	.byte	3
	.byte	'udp_input_local_match',0,1,130,1,1
	.word	.L316
	.byte	1,1
	.word	.L169,.L402,.L168
	.byte	4
	.byte	'pcb',0,1,130,1,39
	.word	.L312,.L403
	.byte	4
	.byte	'inp',0,1,130,1,58
	.word	.L356,.L404
	.byte	4
	.byte	'broadcast',0,1,130,1,68
	.word	.L316,.L405
	.byte	5
	.word	.L406
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('udp_input_local_match')
	.sect	'.debug_abbrev'
.L294:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('udp_input_local_match')
	.sect	'.debug_line'
.L295:
	.word	.L813-.L812
.L812:
	.half	3
	.word	.L815-.L814
.L814:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L815:
	.byte	5,1,7,0,5,2
	.word	.L169
	.byte	3,129,1,1,5,3,9
	.half	.L411-.L169
	.byte	3,6,1,7,9
	.half	.L412-.L411
	.byte	1,5,11,9
	.half	.L9-.L412
	.byte	3,3,1,5,7,9
	.half	.L816-.L9
	.byte	1,5,26,7,9
	.half	.L817-.L816
	.byte	3,1,1,5,23,9
	.half	.L818-.L817
	.byte	1,5,13,7,9
	.half	.L10-.L818
	.byte	3,24,1,5,5,9
	.half	.L819-.L10
	.byte	3,123,1,5,13,7,9
	.half	.L820-.L819
	.byte	3,5,1,5,15,7,9
	.half	.L821-.L820
	.byte	3,1,1,5,38,9
	.half	.L822-.L821
	.byte	1,5,45,9
	.half	.L823-.L822
	.byte	1,5,13,7,9
	.half	.L824-.L823
	.byte	3,1,1,5,11,9
	.half	.L825-.L824
	.byte	3,1,1,9
	.half	.L12-.L825
	.byte	3,6,1,5,44,7,9
	.half	.L826-.L12
	.byte	1,5,16,9
	.half	.L13-.L826
	.byte	3,1,1,5,1,3,5,1,5,10,7,9
	.half	.L11-.L13
	.byte	3,127,1,5,1,3,1,1,7,9
	.half	.L297-.L11
	.byte	0,1,1
.L813:
	.sdecl	'.debug_ranges',debug,cluster('udp_input_local_match')
	.sect	'.debug_ranges'
.L296:
	.word	-1,.L169,0,.L297-.L169,0,0
.L406:
	.word	-1,.L169,0,.L402-.L169,-1,.L171,0,.L307-.L171,-1,.L173,0,.L302-.L173,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_62')
	.sect	'.debug_info'
.L298:
	.word	194
	.half	3
	.word	.L299
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L301,.L300
	.byte	2
	.word	.L204
	.byte	3
	.byte	'.cocofun_62',0,1,130,1,1,1
	.word	.L173,.L302,.L172
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_62')
	.sect	'.debug_abbrev'
.L299:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_62')
	.sect	'.debug_line'
.L300:
	.word	.L828-.L827
.L827:
	.half	3
	.word	.L830-.L829
.L829:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L830:
	.byte	5,3,7,0,5,2
	.word	.L173
	.byte	3,135,1,1,9
	.half	.L302-.L173
	.byte	0,1,1,5,3,0,5,2
	.word	.L173
	.byte	3,206,1,1,9
	.half	.L831-.L173
	.byte	3,185,127,1,7,9
	.half	.L302-.L831
	.byte	0,1,1,5,3,0,5,2
	.word	.L173
	.byte	3,207,1,1,9
	.half	.L831-.L173
	.byte	3,184,127,1,7,9
	.half	.L302-.L831
	.byte	0,1,1,5,7,0,5,2
	.word	.L173
	.byte	3,239,2,1,5,3,9
	.half	.L831-.L173
	.byte	3,152,126,1,7,9
	.half	.L302-.L831
	.byte	0,1,1,5,3,0,5,2
	.word	.L173
	.byte	3,213,3,1,9
	.half	.L831-.L173
	.byte	3,178,125,1,7,9
	.half	.L302-.L831
	.byte	0,1,1,5,3,0,5,2
	.word	.L173
	.byte	3,153,4,1,9
	.half	.L831-.L173
	.byte	3,238,124,1,7,9
	.half	.L302-.L831
	.byte	0,1,1,5,3,0,5,2
	.word	.L173
	.byte	3,130,5,1,9
	.half	.L831-.L173
	.byte	3,133,124,1,7,9
	.half	.L302-.L831
	.byte	0,1,1,5,3,0,5,2
	.word	.L173
	.byte	3,212,5,1,9
	.half	.L831-.L173
	.byte	3,179,123,1,7,9
	.half	.L302-.L831
	.byte	0,1,1,5,3,0,5,2
	.word	.L173
	.byte	3,140,6,1,9
	.half	.L831-.L173
	.byte	3,251,122,1,7,9
	.half	.L302-.L831
	.byte	0,1,1,5,3,0,5,2
	.word	.L173
	.byte	3,182,7,1,9
	.half	.L831-.L173
	.byte	3,209,121,1,7,9
	.half	.L302-.L831
	.byte	0,1,1,5,3,0,5,2
	.word	.L173
	.byte	3,181,8,1,9
	.half	.L831-.L173
	.byte	3,210,120,1,7,9
	.half	.L302-.L831
	.byte	0,1,1,5,3,0,5,2
	.word	.L173
	.byte	3,233,8,1,9
	.half	.L831-.L173
	.byte	3,158,120,1,7,9
	.half	.L302-.L831
	.byte	0,1,1,5,3,0,5,2
	.word	.L173
	.byte	3,137,9,1,9
	.half	.L831-.L173
	.byte	3,254,119,1,7,9
	.half	.L302-.L831
	.byte	0,1,1,5,3,0,5,2
	.word	.L173
	.byte	3,160,9,1,9
	.half	.L831-.L173
	.byte	3,231,119,1,7,9
	.half	.L302-.L831
	.byte	0,1,1
.L828:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_62')
	.sect	'.debug_ranges'
.L301:
	.word	-1,.L173,0,.L302-.L173,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_63')
	.sect	'.debug_info'
.L303:
	.word	194
	.half	3
	.word	.L304
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1
	.word	.L306,.L305
	.byte	2
	.word	.L204
	.byte	3
	.byte	'.cocofun_63',0,1,130,1,1,1
	.word	.L171,.L307,.L170
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_63')
	.sect	'.debug_abbrev'
.L304:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_63')
	.sect	'.debug_line'
.L305:
	.word	.L833-.L832
.L832:
	.half	3
	.word	.L835-.L834
.L834:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0,0,0,0,0
.L835:
	.byte	5,3,7,0,5,2
	.word	.L171
	.byte	3,135,1,1,9
	.half	.L307-.L171
	.byte	0,1,1,5,3,0,5,2
	.word	.L171
	.byte	3,206,1,1,9
	.half	.L836-.L171
	.byte	3,185,127,1,7,9
	.half	.L307-.L836
	.byte	0,1,1,5,3,0,5,2
	.word	.L171
	.byte	3,207,1,1,9
	.half	.L836-.L171
	.byte	3,184,127,1,7,9
	.half	.L307-.L836
	.byte	0,1,1,5,7,0,5,2
	.word	.L171
	.byte	3,239,2,1,5,3,9
	.half	.L836-.L171
	.byte	3,152,126,1,7,9
	.half	.L307-.L836
	.byte	0,1,1,5,3,0,5,2
	.word	.L171
	.byte	3,213,3,1,9
	.half	.L836-.L171
	.byte	3,178,125,1,7,9
	.half	.L307-.L836
	.byte	0,1,1,5,3,0,5,2
	.word	.L171
	.byte	3,153,4,1,9
	.half	.L836-.L171
	.byte	3,238,124,1,7,9
	.half	.L307-.L836
	.byte	0,1,1,5,3,0,5,2
	.word	.L171
	.byte	3,130,5,1,9
	.half	.L836-.L171
	.byte	3,133,124,1,7,9
	.half	.L307-.L836
	.byte	0,1,1,5,3,0,5,2
	.word	.L171
	.byte	3,212,5,1,9
	.half	.L836-.L171
	.byte	3,179,123,1,7,9
	.half	.L307-.L836
	.byte	0,1,1,5,3,0,5,2
	.word	.L171
	.byte	3,140,6,1,9
	.half	.L836-.L171
	.byte	3,251,122,1,7,9
	.half	.L307-.L836
	.byte	0,1,1,5,3,0,5,2
	.word	.L171
	.byte	3,182,7,1,9
	.half	.L836-.L171
	.byte	3,209,121,1,7,9
	.half	.L307-.L836
	.byte	0,1,1,5,3,0,5,2
	.word	.L171
	.byte	3,181,8,1,9
	.half	.L836-.L171
	.byte	3,210,120,1,7,9
	.half	.L307-.L836
	.byte	0,1,1,5,3,0,5,2
	.word	.L171
	.byte	3,233,8,1,9
	.half	.L836-.L171
	.byte	3,158,120,1,7,9
	.half	.L307-.L836
	.byte	0,1,1,5,3,0,5,2
	.word	.L171
	.byte	3,137,9,1,9
	.half	.L836-.L171
	.byte	3,254,119,1,7,9
	.half	.L307-.L836
	.byte	0,1,1,5,3,0,5,2
	.word	.L171
	.byte	3,160,9,1,9
	.half	.L836-.L171
	.byte	3,231,119,1,7,9
	.half	.L307-.L836
	.byte	0,1,1
.L833:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_63')
	.sect	'.debug_ranges'
.L306:
	.word	-1,.L171,0,.L307-.L171,0,0
	.sdecl	'.debug_info',debug,cluster('udp_pcbs')
	.sect	'.debug_info'
.L308:
	.word	180
	.half	3
	.word	.L309
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L204
	.byte	3
	.byte	'udp_pcbs',0,13,81,17
	.word	.L312
	.byte	1,5,3
	.word	udp_pcbs
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('udp_pcbs')
	.sect	'.debug_abbrev'
.L309:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('udp_port')
	.sect	'.debug_info'
.L310:
	.word	179
	.half	3
	.word	.L311
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\udp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC375_Ethernet\\Debug\\',0,12,1,2
	.word	.L204
	.byte	3
	.byte	'udp_port',0,13,77,14
	.word	.L327
	.byte	5,3
	.word	udp_port
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('udp_port')
	.sect	'.debug_abbrev'
.L311:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_62')
	.sect	'.debug_loc'
.L172:
	.word	-1,.L173,0,.L302-.L173
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_63')
	.sect	'.debug_loc'
.L170:
	.word	-1,.L171,0,.L307-.L171
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_bind')
	.sect	'.debug_loc'
.L326:
	.word	-1,.L185,0,.L108-.L185
	.half	1
	.byte	101
	.word	.L546-.L185,.L544-.L185
	.half	1
	.byte	108
	.word	.L173-.L185,.L302-.L185
	.half	1
	.byte	108
	.word	.L171-.L185,.L307-.L185
	.half	1
	.byte	108
	.word	.L547-.L185,.L323-.L185
	.half	1
	.byte	108
	.word	0,0
.L329:
	.word	-1,.L185,.L551-.L185,.L112-.L185
	.half	1
	.byte	111
	.word	.L553-.L185,.L550-.L185
	.half	1
	.byte	98
	.word	.L115-.L185,.L119-.L185
	.half	1
	.byte	98
	.word	.L119-.L185,.L556-.L185
	.half	1
	.byte	111
	.word	.L557-.L185,.L558-.L185
	.half	1
	.byte	111
	.word	.L120-.L185,.L116-.L185
	.half	1
	.byte	111
	.word	0,0
.L324:
	.word	-1,.L185,0,.L544-.L185
	.half	1
	.byte	100
	.word	.L545-.L185,.L544-.L185
	.half	1
	.byte	109
	.word	.L173-.L185,.L302-.L185
	.half	1
	.byte	100
	.word	.L173-.L185,.L302-.L185
	.half	1
	.byte	109
	.word	.L547-.L185,.L548-.L185
	.half	1
	.byte	100
	.word	.L171-.L185,.L415-.L185
	.half	1
	.byte	100
	.word	.L171-.L185,.L307-.L185
	.half	1
	.byte	109
	.word	.L547-.L185,.L323-.L185
	.half	1
	.byte	109
	.word	.L109-.L185,.L550-.L185
	.half	1
	.byte	100
	.word	.L115-.L185,.L117-.L185
	.half	1
	.byte	100
	.word	.L120-.L185,.L116-.L185
	.half	1
	.byte	100
	.word	0,0
.L328:
	.word	-1,.L185,0,.L544-.L185
	.half	1
	.byte	84
	.word	.L173-.L185,.L302-.L185
	.half	1
	.byte	84
	.word	.L171-.L185,.L307-.L185
	.half	1
	.byte	84
	.word	.L547-.L185,.L549-.L185
	.half	1
	.byte	84
	.word	.L109-.L185,.L550-.L185
	.half	1
	.byte	84
	.word	.L550-.L185,.L115-.L185
	.half	1
	.byte	82
	.word	.L554-.L185,.L555-.L185
	.half	1
	.byte	84
	.word	0,0
.L330:
	.word	-1,.L185,.L552-.L185,.L323-.L185
	.half	1
	.byte	88
	.word	0,0
.L184:
	.word	-1,.L185,0,.L543-.L185
	.half	2
	.byte	138,0
	.word	.L543-.L185,.L109-.L185
	.half	2
	.byte	138,16
	.word	.L109-.L185,.L109-.L185
	.half	2
	.byte	138,0
	.word	.L109-.L185,.L124-.L185
	.half	2
	.byte	138,16
	.word	.L124-.L185,.L124-.L185
	.half	2
	.byte	138,0
	.word	.L124-.L185,.L323-.L185
	.half	2
	.byte	138,16
	.word	.L323-.L185,.L323-.L185
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_bind_netif')
	.sect	'.debug_loc'
.L334:
	.word	-1,.L187,0,.L331-.L187
	.half	1
	.byte	101
	.word	0,0
.L332:
	.word	-1,.L187,0,.L331-.L187
	.half	1
	.byte	100
	.word	0,0
.L186:
	.word	-1,.L187,0,.L331-.L187
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_connect')
	.sect	'.debug_loc'
.L341:
	.word	-1,.L189,.L568-.L189,.L134-.L189
	.half	1
	.byte	82
	.word	0,0
.L337:
	.word	-1,.L189,.L173-.L189,.L302-.L189
	.half	1
	.byte	101
	.word	.L173-.L189,.L302-.L189
	.half	1
	.byte	108
	.word	.L171-.L189,.L307-.L189
	.half	1
	.byte	101
	.word	.L171-.L189,.L307-.L189
	.half	1
	.byte	108
	.word	0,.L564-.L189
	.half	1
	.byte	101
	.word	.L565-.L189,.L335-.L189
	.half	1
	.byte	108
	.word	.L132-.L189,.L567-.L189
	.half	1
	.byte	101
	.word	0,0
.L339:
	.word	-1,.L189,.L569-.L189,.L136-.L189
	.half	1
	.byte	100
	.word	0,0
.L336:
	.word	-1,.L189,.L560-.L189,.L561-.L189
	.half	1
	.byte	111
	.word	.L130-.L189,.L562-.L189
	.half	1
	.byte	111
	.word	.L173-.L189,.L302-.L189
	.half	1
	.byte	100
	.word	0,.L563-.L189
	.half	1
	.byte	100
	.word	.L171-.L189,.L415-.L189
	.half	1
	.byte	100
	.word	.L132-.L189,.L567-.L189
	.half	1
	.byte	100
	.word	.L132-.L189,.L335-.L189
	.half	1
	.byte	111
	.word	.L567-.L189,.L568-.L189
	.half	1
	.byte	101
	.word	0,0
.L338:
	.word	-1,.L189,.L173-.L189,.L302-.L189
	.half	1
	.byte	84
	.word	.L173-.L189,.L302-.L189
	.half	1
	.byte	88
	.word	.L171-.L189,.L307-.L189
	.half	1
	.byte	84
	.word	.L171-.L189,.L307-.L189
	.half	1
	.byte	88
	.word	0,.L564-.L189
	.half	1
	.byte	84
	.word	.L566-.L189,.L335-.L189
	.half	1
	.byte	88
	.word	.L132-.L189,.L567-.L189
	.half	1
	.byte	84
	.word	0,0
.L188:
	.word	-1,.L189,0,.L559-.L189
	.half	2
	.byte	138,0
	.word	.L559-.L189,.L132-.L189
	.half	2
	.byte	138,16
	.word	.L132-.L189,.L132-.L189
	.half	2
	.byte	138,0
	.word	.L132-.L189,.L335-.L189
	.half	2
	.byte	138,16
	.word	.L335-.L189,.L335-.L189
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_debug_print')
	.sect	'.debug_loc'
.L202:
	.word	-1,.L203,0,.L393-.L203
	.half	2
	.byte	138,0
	.word	0,0
.L394:
	.word	-1,.L203,0,.L393-.L203
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_disconnect')
	.sect	'.debug_loc'
.L343:
	.word	-1,.L191,0,.L571-.L191
	.half	1
	.byte	100
	.word	.L173-.L191,.L302-.L191
	.half	1
	.byte	100
	.word	.L572-.L191,.L573-.L191
	.half	1
	.byte	100
	.word	.L171-.L191,.L415-.L191
	.half	1
	.byte	100
	.word	.L141-.L191,.L342-.L191
	.half	1
	.byte	100
	.word	0,0
.L190:
	.word	-1,.L191,0,.L570-.L191
	.half	2
	.byte	138,0
	.word	.L570-.L191,.L141-.L191
	.half	2
	.byte	138,16
	.word	.L141-.L191,.L141-.L191
	.half	2
	.byte	138,0
	.word	.L141-.L191,.L342-.L191
	.half	2
	.byte	138,16
	.word	.L342-.L191,.L342-.L191
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_init')
	.sect	'.debug_loc'
.L164:
	.word	-1,.L165,0,.L392-.L165
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_input')
	.sect	'.debug_loc'
.L390:
	.word	-1,.L175,.L432-.L175,.L433-.L175
	.half	1
	.byte	82
	.word	.L436-.L175,.L426-.L175
	.half	1
	.byte	88
	.word	.L173-.L175,.L302-.L175
	.half	1
	.byte	88
	.word	.L171-.L175,.L307-.L175
	.half	1
	.byte	88
	.word	.L471-.L175,.L24-.L175
	.half	1
	.byte	88
	.word	0,0
.L389:
	.word	-1,.L175,.L437-.L175,.L439-.L175
	.half	1
	.byte	82
	.word	.L435-.L175,.L426-.L175
	.half	1
	.byte	90
	.word	.L173-.L175,.L302-.L175
	.half	1
	.byte	90
	.word	.L171-.L175,.L307-.L175
	.half	1
	.byte	90
	.word	.L471-.L175,.L24-.L175
	.half	1
	.byte	90
	.word	0,0
.L391:
	.word	-1,.L175,.L43-.L175,.L464-.L175
	.half	1
	.byte	95
	.word	0,0
.L383:
	.word	-1,.L175,0,.L417-.L175
	.half	1
	.byte	101
	.word	.L419-.L175,.L417-.L175
	.half	1
	.byte	108
	.word	.L173-.L175,.L302-.L175
	.half	1
	.byte	108
	.word	.L173-.L175,.L302-.L175
	.half	1
	.byte	101
	.word	.L171-.L175,.L307-.L175
	.half	1
	.byte	108
	.word	.L171-.L175,.L307-.L175
	.half	1
	.byte	101
	.word	.L422-.L175,.L424-.L175
	.half	1
	.byte	108
	.word	.L422-.L175,.L21-.L175
	.half	1
	.byte	101
	.word	.L425-.L175,.L426-.L175
	.half	1
	.byte	108
	.word	.L446-.L175,.L445-.L175
	.half	1
	.byte	101
	.word	.L471-.L175,.L381-.L175
	.half	1
	.byte	108
	.word	0,0
.L382:
	.word	-1,.L175,0,.L417-.L175
	.half	1
	.byte	100
	.word	.L418-.L175,.L417-.L175
	.half	2
	.byte	145,112
	.word	.L420-.L175,.L417-.L175
	.half	1
	.byte	111
	.word	.L173-.L175,.L302-.L175
	.half	1
	.byte	100
	.word	.L173-.L175,.L302-.L175
	.half	2
	.byte	145,112
	.word	.L173-.L175,.L421-.L175
	.half	1
	.byte	111
	.word	.L422-.L175,.L423-.L175
	.half	1
	.byte	100
	.word	.L171-.L175,.L415-.L175
	.half	1
	.byte	100
	.word	.L171-.L175,.L307-.L175
	.half	2
	.byte	145,112
	.word	.L422-.L175,.L424-.L175
	.half	2
	.byte	145,112
	.word	.L425-.L175,.L426-.L175
	.half	2
	.byte	145,112
	.word	.L427-.L175,.L428-.L175
	.half	1
	.byte	111
	.word	.L23-.L175,.L429-.L175
	.half	1
	.byte	111
	.word	.L467-.L175,.L468-.L175
	.half	1
	.byte	100
	.word	.L469-.L175,.L470-.L175
	.half	1
	.byte	100
	.word	.L471-.L175,.L381-.L175
	.half	2
	.byte	145,112
	.word	.L475-.L175,.L49-.L175
	.half	1
	.byte	102
	.word	.L477-.L175,.L478-.L175
	.half	1
	.byte	100
	.word	.L479-.L175,.L52-.L175
	.half	1
	.byte	100
	.word	.L480-.L175,.L381-.L175
	.half	1
	.byte	100
	.word	0,0
.L385:
	.word	-1,.L175,.L441-.L175,.L442-.L175
	.half	1
	.byte	110
	.word	.L442-.L175,.L443-.L175
	.half	1
	.byte	111
	.word	.L26-.L175,.L25-.L175
	.half	2
	.byte	145,120
	.word	.L444-.L175,.L445-.L175
	.half	1
	.byte	100
	.word	.L447-.L175,.L448-.L175
	.half	1
	.byte	111
	.word	.L449-.L175,.L450-.L175
	.half	1
	.byte	110
	.word	.L451-.L175,.L452-.L175
	.half	1
	.byte	110
	.word	.L453-.L175,.L30-.L175
	.half	1
	.byte	111
	.word	.L454-.L175,.L455-.L175
	.half	1
	.byte	111
	.word	.L456-.L175,.L457-.L175
	.half	1
	.byte	111
	.word	.L458-.L175,.L38-.L175
	.half	1
	.byte	111
	.word	.L459-.L175,.L39-.L175
	.half	1
	.byte	111
	.word	.L460-.L175,.L426-.L175
	.half	2
	.byte	145,120
	.word	.L461-.L175,.L462-.L175
	.half	1
	.byte	111
	.word	.L463-.L175,.L41-.L175
	.half	1
	.byte	110
	.word	.L173-.L175,.L302-.L175
	.half	2
	.byte	145,120
	.word	.L171-.L175,.L307-.L175
	.half	2
	.byte	145,120
	.word	.L471-.L175,.L24-.L175
	.half	2
	.byte	145,120
	.word	.L472-.L175,.L473-.L175
	.half	1
	.byte	111
	.word	.L474-.L175,.L49-.L175
	.half	1
	.byte	101
	.word	.L49-.L175,.L476-.L175
	.half	1
	.byte	111
	.word	0,0
.L386:
	.word	-1,.L175,.L440-.L175,.L426-.L175
	.half	1
	.byte	109
	.word	.L173-.L175,.L302-.L175
	.half	1
	.byte	109
	.word	.L171-.L175,.L307-.L175
	.half	1
	.byte	109
	.word	.L471-.L175,.L24-.L175
	.half	1
	.byte	109
	.word	0,0
.L388:
	.word	-1,.L175,.L433-.L175,.L437-.L175
	.half	1
	.byte	82
	.word	.L438-.L175,.L426-.L175
	.half	1
	.byte	89
	.word	.L173-.L175,.L302-.L175
	.half	1
	.byte	89
	.word	.L171-.L175,.L307-.L175
	.half	1
	.byte	89
	.word	.L471-.L175,.L24-.L175
	.half	1
	.byte	89
	.word	.L474-.L175,.L49-.L175
	.half	1
	.byte	84
	.word	0,0
.L174:
	.word	-1,.L175,0,.L416-.L175
	.half	2
	.byte	138,0
	.word	.L416-.L175,.L49-.L175
	.half	2
	.byte	138,40
	.word	.L49-.L175,.L49-.L175
	.half	2
	.byte	138,0
	.word	.L49-.L175,.L381-.L175
	.half	2
	.byte	138,40
	.word	.L381-.L175,.L381-.L175
	.half	2
	.byte	138,0
	.word	0,0
.L384:
	.word	-1,.L175,.L429-.L175,.L430-.L175
	.half	1
	.byte	111
	.word	.L431-.L175,.L426-.L175
	.half	2
	.byte	145,116
	.word	.L434-.L175,.L435-.L175
	.half	1
	.byte	111
	.word	.L435-.L175,.L439-.L175
	.half	1
	.byte	100
	.word	.L465-.L175,.L466-.L175
	.half	1
	.byte	111
	.word	.L173-.L175,.L302-.L175
	.half	2
	.byte	145,116
	.word	.L171-.L175,.L307-.L175
	.half	2
	.byte	145,116
	.word	.L471-.L175,.L24-.L175
	.half	2
	.byte	145,116
	.word	0,0
.L387:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_input_local_match')
	.sect	'.debug_loc'
.L405:
	.word	-1,.L169,0,.L409-.L169
	.half	1
	.byte	84
	.word	.L412-.L169,.L409-.L169
	.half	1
	.byte	88
	.word	.L173-.L169,.L302-.L169
	.half	1
	.byte	84
	.word	.L173-.L169,.L302-.L169
	.half	1
	.byte	88
	.word	.L171-.L169,.L307-.L169
	.half	1
	.byte	84
	.word	.L171-.L169,.L307-.L169
	.half	1
	.byte	88
	.word	.L413-.L169,.L9-.L169
	.half	1
	.byte	84
	.word	.L413-.L169,.L402-.L169
	.half	1
	.byte	88
	.word	0,0
.L404:
	.word	-1,.L169,0,.L409-.L169
	.half	1
	.byte	101
	.word	.L411-.L169,.L409-.L169
	.half	1
	.byte	109
	.word	.L173-.L169,.L302-.L169
	.half	1
	.byte	109
	.word	.L173-.L169,.L302-.L169
	.half	1
	.byte	101
	.word	.L171-.L169,.L307-.L169
	.half	1
	.byte	109
	.word	.L171-.L169,.L307-.L169
	.half	1
	.byte	101
	.word	.L413-.L169,.L402-.L169
	.half	1
	.byte	109
	.word	.L413-.L169,.L9-.L169
	.half	1
	.byte	101
	.word	0,0
.L403:
	.word	-1,.L169,0,.L409-.L169
	.half	1
	.byte	100
	.word	.L410-.L169,.L409-.L169
	.half	1
	.byte	108
	.word	.L173-.L169,.L302-.L169
	.half	1
	.byte	108
	.word	.L173-.L169,.L302-.L169
	.half	1
	.byte	100
	.word	.L413-.L169,.L414-.L169
	.half	1
	.byte	100
	.word	.L171-.L169,.L307-.L169
	.half	1
	.byte	108
	.word	.L171-.L169,.L415-.L169
	.half	1
	.byte	100
	.word	.L413-.L169,.L402-.L169
	.half	1
	.byte	108
	.word	0,0
.L168:
	.word	-1,.L169,0,.L408-.L169
	.half	2
	.byte	138,0
	.word	.L408-.L169,.L18-.L169
	.half	2
	.byte	138,16
	.word	.L18-.L169,.L18-.L169
	.half	2
	.byte	138,0
	.word	.L18-.L169,.L402-.L169
	.half	2
	.byte	138,16
	.word	.L402-.L169,.L402-.L169
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_netif_ip_addr_changed')
	.sect	'.debug_loc'
.L397:
	.word	-1,.L201,0,.L395-.L201
	.half	1
	.byte	101
	.word	0,0
.L396:
	.word	-1,.L201,0,.L395-.L201
	.half	1
	.byte	100
	.word	0,0
.L200:
	.word	-1,.L201,0,.L395-.L201
	.half	2
	.byte	138,0
	.word	0,0
.L398:
	.word	-1,.L201,.L589-.L201,.L157-.L201
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_new')
	.sect	'.debug_loc'
.L314:
	.word	-1,.L197,.L584-.L197,.L585-.L197
	.half	1
	.byte	98
	.word	.L586-.L197,.L313-.L197
	.half	1
	.byte	111
	.word	.L585-.L197,.L587-.L197
	.half	1
	.byte	100
	.word	.L588-.L197,.L313-.L197
	.half	1
	.byte	98
	.word	0,0
.L196:
	.word	-1,.L197,0,.L313-.L197
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_new_ip_type')
	.sect	'.debug_loc'
.L318:
	.word	0,0
.L317:
	.word	-1,.L199,0,.L315-.L199
	.half	1
	.byte	84
	.word	0,0
.L198:
	.word	-1,.L199,0,.L315-.L199
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_new_port')
	.sect	'.debug_loc'
.L400:
	.word	-1,.L167,.L2-.L167,.L399-.L167
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L401:
	.word	-1,.L167,.L407-.L167,.L399-.L167
	.half	1
	.byte	111
	.word	0,0
.L166:
	.word	-1,.L167,0,.L399-.L167
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_recv')
	.sect	'.debug_loc'
.L345:
	.word	-1,.L193,0,.L575-.L193
	.half	1
	.byte	100
	.word	.L173-.L193,.L302-.L193
	.half	1
	.byte	100
	.word	.L576-.L193,.L577-.L193
	.half	1
	.byte	100
	.word	.L171-.L193,.L415-.L193
	.half	1
	.byte	100
	.word	.L143-.L193,.L344-.L193
	.half	1
	.byte	100
	.word	0,0
.L347:
	.word	-1,.L193,0,.L575-.L193
	.half	1
	.byte	101
	.word	.L173-.L193,.L302-.L193
	.half	1
	.byte	101
	.word	.L171-.L193,.L307-.L193
	.half	1
	.byte	101
	.word	.L576-.L193,.L344-.L193
	.half	1
	.byte	101
	.word	0,0
.L349:
	.word	-1,.L193,0,.L575-.L193
	.half	1
	.byte	102
	.word	.L173-.L193,.L302-.L193
	.half	1
	.byte	102
	.word	.L171-.L193,.L307-.L193
	.half	1
	.byte	102
	.word	.L576-.L193,.L344-.L193
	.half	1
	.byte	102
	.word	0,0
.L192:
	.word	-1,.L193,0,.L574-.L193
	.half	2
	.byte	138,0
	.word	.L574-.L193,.L143-.L193
	.half	2
	.byte	138,16
	.word	.L143-.L193,.L143-.L193
	.half	2
	.byte	138,0
	.word	.L143-.L193,.L344-.L193
	.half	2
	.byte	138,16
	.word	.L344-.L193,.L344-.L193
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_remove')
	.sect	'.debug_loc'
.L320:
	.word	-1,.L195,0,.L579-.L195
	.half	1
	.byte	100
	.word	.L173-.L195,.L302-.L195
	.half	1
	.byte	100
	.word	.L580-.L195,.L581-.L195
	.half	1
	.byte	100
	.word	.L171-.L195,.L415-.L195
	.half	1
	.byte	100
	.word	.L145-.L195,.L319-.L195
	.half	1
	.byte	100
	.word	0,0
.L321:
	.word	-1,.L195,.L582-.L195,.L583-.L195
	.half	1
	.byte	111
	.word	.L150-.L195,.L148-.L195
	.half	1
	.byte	111
	.word	0,0
.L194:
	.word	-1,.L195,0,.L578-.L195
	.half	2
	.byte	138,0
	.word	.L578-.L195,.L145-.L195
	.half	2
	.byte	138,16
	.word	.L145-.L195,.L145-.L195
	.half	2
	.byte	138,0
	.word	.L145-.L195,.L319-.L195
	.half	2
	.byte	138,16
	.word	.L319-.L195,.L319-.L195
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_send')
	.sect	'.debug_loc'
.L380:
	.word	-1,.L177,.L173-.L177,.L302-.L177
	.half	1
	.byte	101
	.word	.L171-.L177,.L307-.L177
	.half	1
	.byte	101
	.word	0,.L483-.L177
	.half	1
	.byte	101
	.word	.L57-.L177,.L378-.L177
	.half	1
	.byte	101
	.word	0,0
.L379:
	.word	-1,.L177,.L173-.L177,.L302-.L177
	.half	1
	.byte	100
	.word	0,.L482-.L177
	.half	1
	.byte	100
	.word	.L171-.L177,.L415-.L177
	.half	1
	.byte	100
	.word	.L57-.L177,.L378-.L177
	.half	1
	.byte	100
	.word	0,0
.L176:
	.word	-1,.L177,0,.L481-.L177
	.half	2
	.byte	138,0
	.word	.L481-.L177,.L57-.L177
	.half	2
	.byte	138,16
	.word	.L57-.L177,.L57-.L177
	.half	2
	.byte	138,0
	.word	.L57-.L177,.L378-.L177
	.half	2
	.byte	138,16
	.word	.L378-.L177,.L378-.L177
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_sendto')
	.sect	'.debug_loc'
.L375:
	.word	-1,.L179,.L173-.L179,.L302-.L179
	.half	1
	.byte	102
	.word	.L173-.L179,.L302-.L179
	.half	1
	.byte	109
	.word	.L171-.L179,.L307-.L179
	.half	1
	.byte	102
	.word	.L171-.L179,.L307-.L179
	.half	1
	.byte	109
	.word	0,.L491-.L179
	.half	1
	.byte	102
	.word	.L492-.L179,.L372-.L179
	.half	1
	.byte	109
	.word	.L64-.L179,.L494-.L179
	.half	1
	.byte	102
	.word	.L66-.L179,.L498-.L179
	.half	1
	.byte	102
	.word	.L498-.L179,.L67-.L179
	.half	1
	.byte	100
	.word	.L501-.L179,.L372-.L179
	.half	1
	.byte	102
	.word	0,0
.L376:
	.word	-1,.L179,.L487-.L179,.L488-.L179
	.half	1
	.byte	95
	.word	.L173-.L179,.L302-.L179
	.half	1
	.byte	84
	.word	.L171-.L179,.L307-.L179
	.half	1
	.byte	84
	.word	0,.L491-.L179
	.half	1
	.byte	84
	.word	.L64-.L179,.L495-.L179
	.half	1
	.byte	95
	.word	.L64-.L179,.L496-.L179
	.half	1
	.byte	84
	.word	.L68-.L179,.L372-.L179
	.half	1
	.byte	95
	.word	.L502-.L179,.L372-.L179
	.half	1
	.byte	84
	.word	0,0
.L377:
	.word	-1,.L179,.L494-.L179,.L66-.L179
	.half	1
	.byte	98
	.word	.L67-.L179,.L372-.L179
	.half	1
	.byte	98
	.word	.L502-.L179,.L372-.L179
	.half	1
	.byte	103
	.word	0,0
.L374:
	.word	-1,.L179,.L173-.L179,.L302-.L179
	.half	1
	.byte	101
	.word	.L173-.L179,.L302-.L179
	.half	1
	.byte	108
	.word	.L171-.L179,.L307-.L179
	.half	1
	.byte	101
	.word	.L171-.L179,.L307-.L179
	.half	1
	.byte	108
	.word	0,.L491-.L179
	.half	1
	.byte	101
	.word	.L493-.L179,.L372-.L179
	.half	1
	.byte	108
	.word	.L64-.L179,.L494-.L179
	.half	1
	.byte	101
	.word	.L66-.L179,.L67-.L179
	.half	1
	.byte	101
	.word	.L500-.L179,.L372-.L179
	.half	1
	.byte	101
	.word	0,0
.L373:
	.word	-1,.L179,.L485-.L179,.L486-.L179
	.half	1
	.byte	111
	.word	.L60-.L179,.L489-.L179
	.half	1
	.byte	111
	.word	.L62-.L179,.L488-.L179
	.half	1
	.byte	111
	.word	.L173-.L179,.L302-.L179
	.half	1
	.byte	100
	.word	0,.L490-.L179
	.half	1
	.byte	100
	.word	.L171-.L179,.L415-.L179
	.half	1
	.byte	100
	.word	.L64-.L179,.L494-.L179
	.half	1
	.byte	100
	.word	.L64-.L179,.L497-.L179
	.half	1
	.byte	111
	.word	.L66-.L179,.L498-.L179
	.half	1
	.byte	100
	.word	.L68-.L179,.L372-.L179
	.half	1
	.byte	111
	.word	.L499-.L179,.L372-.L179
	.half	1
	.byte	100
	.word	0,0
.L178:
	.word	-1,.L179,0,.L484-.L179
	.half	2
	.byte	138,0
	.word	.L484-.L179,.L64-.L179
	.half	2
	.byte	138,16
	.word	.L64-.L179,.L64-.L179
	.half	2
	.byte	138,0
	.word	.L64-.L179,.L68-.L179
	.half	2
	.byte	138,16
	.word	.L68-.L179,.L68-.L179
	.half	2
	.byte	138,0
	.word	.L68-.L179,.L372-.L179
	.half	2
	.byte	138,16
	.word	.L372-.L179,.L372-.L179
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_sendto_if')
	.sect	'.debug_loc'
.L354:
	.word	-1,.L181,.L173-.L181,.L302-.L181
	.half	1
	.byte	102
	.word	.L171-.L181,.L307-.L181
	.half	1
	.byte	102
	.word	0,.L505-.L181
	.half	1
	.byte	102
	.word	.L77-.L181,.L350-.L181
	.half	1
	.byte	102
	.word	0,0
.L355:
	.word	-1,.L181,.L173-.L181,.L302-.L181
	.half	1
	.byte	84
	.word	.L171-.L181,.L307-.L181
	.half	1
	.byte	84
	.word	0,.L505-.L181
	.half	1
	.byte	84
	.word	.L77-.L181,.L350-.L181
	.half	1
	.byte	84
	.word	0,0
.L357:
	.word	-1,.L181,.L173-.L181,.L302-.L181
	.half	1
	.byte	103
	.word	.L171-.L181,.L307-.L181
	.half	1
	.byte	103
	.word	0,.L505-.L181
	.half	1
	.byte	103
	.word	.L77-.L181,.L350-.L181
	.half	1
	.byte	103
	.word	0,0
.L353:
	.word	-1,.L181,.L173-.L181,.L302-.L181
	.half	1
	.byte	101
	.word	.L171-.L181,.L307-.L181
	.half	1
	.byte	101
	.word	0,.L505-.L181
	.half	1
	.byte	101
	.word	.L77-.L181,.L350-.L181
	.half	1
	.byte	101
	.word	0,0
.L351:
	.word	-1,.L181,.L173-.L181,.L302-.L181
	.half	1
	.byte	100
	.word	0,.L504-.L181
	.half	1
	.byte	100
	.word	.L171-.L181,.L415-.L181
	.half	1
	.byte	100
	.word	.L77-.L181,.L350-.L181
	.half	1
	.byte	100
	.word	0,0
.L358:
	.word	-1,.L181,.L506-.L181,.L80-.L181
	.half	1
	.byte	111
	.word	.L81-.L181,.L350-.L181
	.half	1
	.byte	111
	.word	0,0
.L180:
	.word	-1,.L181,0,.L503-.L181
	.half	2
	.byte	138,0
	.word	.L503-.L181,.L77-.L181
	.half	2
	.byte	138,16
	.word	.L77-.L181,.L77-.L181
	.half	2
	.byte	138,0
	.word	.L77-.L181,.L82-.L181
	.half	2
	.byte	138,16
	.word	.L82-.L181,.L82-.L181
	.half	2
	.byte	138,0
	.word	.L82-.L181,.L350-.L181
	.half	2
	.byte	138,16
	.word	.L350-.L181,.L350-.L181
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('udp_sendto_if_src')
	.sect	'.debug_loc'
.L362:
	.word	-1,.L183,0,.L508-.L183
	.half	1
	.byte	102
	.word	.L508-.L183,.L510-.L183
	.half	1
	.byte	98
	.word	.L173-.L183,.L302-.L183
	.half	2
	.byte	145,116
	.word	.L171-.L183,.L307-.L183
	.half	2
	.byte	145,116
	.word	.L513-.L183,.L514-.L183
	.half	2
	.byte	145,116
	.word	.L529-.L183,.L359-.L183
	.half	2
	.byte	145,116
	.word	.L535-.L183,.L533-.L183
	.half	1
	.byte	102
	.word	.L539-.L183,.L537-.L183
	.half	1
	.byte	102
	.word	0,0
.L363:
	.word	-1,.L183,.L173-.L183,.L302-.L183
	.half	1
	.byte	88
	.word	.L173-.L183,.L302-.L183
	.half	1
	.byte	84
	.word	.L171-.L183,.L307-.L183
	.half	1
	.byte	88
	.word	.L171-.L183,.L307-.L183
	.half	1
	.byte	84
	.word	.L515-.L183,.L514-.L183
	.half	1
	.byte	88
	.word	0,.L516-.L183
	.half	1
	.byte	84
	.word	.L93-.L183,.L519-.L183
	.half	1
	.byte	84
	.word	.L529-.L183,.L359-.L183
	.half	1
	.byte	88
	.word	0,0
.L368:
	.word	-1,.L183,.L520-.L183,.L95-.L183
	.half	1
	.byte	82
	.word	.L521-.L183,.L95-.L183
	.half	1
	.byte	95
	.word	.L537-.L183,.L106-.L183
	.half	1
	.byte	82
	.word	.L541-.L183,.L359-.L183
	.half	1
	.byte	95
	.word	0,0
.L364:
	.word	-1,.L183,0,.L509-.L183
	.half	1
	.byte	103
	.word	.L509-.L183,.L511-.L183
	.half	1
	.byte	111
	.word	.L173-.L183,.L302-.L183
	.half	2
	.byte	145,120
	.word	.L171-.L183,.L307-.L183
	.half	2
	.byte	145,120
	.word	.L515-.L183,.L514-.L183
	.half	2
	.byte	145,120
	.word	.L93-.L183,.L514-.L183
	.half	1
	.byte	111
	.word	.L173-.L183,.L421-.L183
	.half	1
	.byte	111
	.word	.L529-.L183,.L359-.L183
	.half	2
	.byte	145,120
	.word	.L540-.L183,.L537-.L183
	.half	1
	.byte	103
	.word	0,0
.L361:
	.word	-1,.L183,.L173-.L183,.L302-.L183
	.half	1
	.byte	101
	.word	.L173-.L183,.L302-.L183
	.half	1
	.byte	109
	.word	.L171-.L183,.L307-.L183
	.half	1
	.byte	101
	.word	.L171-.L183,.L307-.L183
	.half	1
	.byte	109
	.word	0,.L516-.L183
	.half	1
	.byte	101
	.word	.L517-.L183,.L514-.L183
	.half	1
	.byte	109
	.word	.L93-.L183,.L519-.L183
	.half	1
	.byte	101
	.word	.L522-.L183,.L523-.L183
	.half	1
	.byte	100
	.word	.L528-.L183,.L527-.L183
	.half	1
	.byte	101
	.word	.L529-.L183,.L359-.L183
	.half	1
	.byte	109
	.word	0,0
.L360:
	.word	-1,.L183,.L173-.L183,.L302-.L183
	.half	1
	.byte	100
	.word	.L173-.L183,.L302-.L183
	.half	1
	.byte	108
	.word	0,.L512-.L183
	.half	1
	.byte	100
	.word	.L171-.L183,.L415-.L183
	.half	1
	.byte	100
	.word	.L171-.L183,.L307-.L183
	.half	1
	.byte	108
	.word	.L518-.L183,.L514-.L183
	.half	1
	.byte	108
	.word	.L93-.L183,.L519-.L183
	.half	1
	.byte	100
	.word	.L519-.L183,.L520-.L183
	.half	1
	.byte	101
	.word	.L529-.L183,.L359-.L183
	.half	1
	.byte	108
	.word	0,0
.L369:
	.word	-1,.L183,.L524-.L183,.L97-.L183
	.half	1
	.byte	98
	.word	.L525-.L183,.L97-.L183
	.half	1
	.byte	110
	.word	.L99-.L183,.L98-.L183
	.half	1
	.byte	110
	.word	.L99-.L183,.L526-.L183
	.half	1
	.byte	98
	.word	.L526-.L183,.L527-.L183
	.half	1
	.byte	100
	.word	.L101-.L183,.L514-.L183
	.half	1
	.byte	110
	.word	.L173-.L183,.L302-.L183
	.half	1
	.byte	110
	.word	.L171-.L183,.L307-.L183
	.half	1
	.byte	110
	.word	.L529-.L183,.L96-.L183
	.half	1
	.byte	110
	.word	.L532-.L183,.L533-.L183
	.half	1
	.byte	100
	.word	.L536-.L183,.L537-.L183
	.half	1
	.byte	100
	.word	.L542-.L183,.L106-.L183
	.half	1
	.byte	100
	.word	0,0
.L365:
	.word	-1,.L183,.L510-.L183,.L92-.L183
	.half	1
	.byte	98
	.word	.L173-.L183,.L302-.L183
	.half	2
	.byte	145,0
	.word	.L171-.L183,.L307-.L183
	.half	2
	.byte	145,0
	.word	0,.L514-.L183
	.half	2
	.byte	145,0
	.word	.L93-.L183,.L520-.L183
	.half	1
	.byte	98
	.word	.L529-.L183,.L359-.L183
	.half	2
	.byte	145,0
	.word	.L534-.L183,.L533-.L183
	.half	1
	.byte	101
	.word	.L538-.L183,.L537-.L183
	.half	1
	.byte	101
	.word	0,0
.L182:
	.word	-1,.L183,0,.L507-.L183
	.half	2
	.byte	138,0
	.word	.L507-.L183,.L93-.L183
	.half	2
	.byte	138,24
	.word	.L93-.L183,.L93-.L183
	.half	2
	.byte	138,0
	.word	.L93-.L183,.L99-.L183
	.half	2
	.byte	138,24
	.word	.L99-.L183,.L99-.L183
	.half	2
	.byte	138,0
	.word	.L99-.L183,.L359-.L183
	.half	2
	.byte	138,24
	.word	.L359-.L183,.L359-.L183
	.half	2
	.byte	138,0
	.word	0,0
.L371:
	.word	-1,.L183,.L533-.L183,.L104-.L183
	.half	1
	.byte	82
	.word	0,0
.L367:
	.word	-1,.L183,.L530-.L183,.L531-.L183
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L837:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('udp_init')
	.sect	'.debug_frame'
	.word	24
	.word	.L837,.L165,.L392-.L165
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('udp_new_port')
	.sect	'.debug_frame'
	.word	24
	.word	.L837,.L167,.L399-.L167
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('udp_input_local_match')
	.sect	'.debug_frame'
	.word	52
	.word	.L837,.L169,.L402-.L169
	.byte	4
	.word	(.L408-.L169)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L18-.L408)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L402-.L18)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('udp_input')
	.sect	'.debug_frame'
	.word	52
	.word	.L837,.L175,.L381-.L175
	.byte	4
	.word	(.L416-.L175)/2
	.byte	19,40,22,26,3,19,138,40,4
	.word	(.L49-.L416)/2
	.byte	19,0,8,26,19,40,22,26,3,19,138,40,4
	.word	(.L381-.L49)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('udp_send')
	.sect	'.debug_frame'
	.word	52
	.word	.L837,.L177,.L378-.L177
	.byte	4
	.word	(.L481-.L177)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L57-.L481)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L378-.L57)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('udp_sendto')
	.sect	'.debug_frame'
	.word	68
	.word	.L837,.L179,.L372-.L179
	.byte	4
	.word	(.L484-.L179)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L64-.L484)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L68-.L64)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L372-.L68)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('udp_sendto_if')
	.sect	'.debug_frame'
	.word	68
	.word	.L837,.L181,.L350-.L181
	.byte	4
	.word	(.L503-.L181)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L77-.L503)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L82-.L77)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L350-.L82)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('udp_sendto_if_src')
	.sect	'.debug_frame'
	.word	68
	.word	.L837,.L183,.L359-.L183
	.byte	4
	.word	(.L507-.L183)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L93-.L507)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L99-.L93)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L359-.L99)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('udp_bind')
	.sect	'.debug_frame'
	.word	68
	.word	.L837,.L185,.L323-.L185
	.byte	4
	.word	(.L543-.L185)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L109-.L543)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L124-.L109)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L323-.L124)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('udp_bind_netif')
	.sect	'.debug_frame'
	.word	20
	.word	.L837,.L187,.L331-.L187
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('udp_connect')
	.sect	'.debug_frame'
	.word	52
	.word	.L837,.L189,.L335-.L189
	.byte	4
	.word	(.L559-.L189)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L132-.L559)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L335-.L132)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('udp_disconnect')
	.sect	'.debug_frame'
	.word	52
	.word	.L837,.L191,.L342-.L191
	.byte	4
	.word	(.L570-.L191)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L141-.L570)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L342-.L141)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('udp_recv')
	.sect	'.debug_frame'
	.word	52
	.word	.L837,.L193,.L344-.L193
	.byte	4
	.word	(.L574-.L193)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L143-.L574)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L344-.L143)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('udp_remove')
	.sect	'.debug_frame'
	.word	52
	.word	.L837,.L195,.L319-.L195
	.byte	4
	.word	(.L578-.L195)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L145-.L578)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L319-.L145)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('udp_new')
	.sect	'.debug_frame'
	.word	12
	.word	.L837,.L197,.L313-.L197
	.sdecl	'.debug_frame',debug,cluster('udp_new_ip_type')
	.sect	'.debug_frame'
	.word	12
	.word	.L837,.L199,.L315-.L199
	.sdecl	'.debug_frame',debug,cluster('udp_netif_ip_addr_changed')
	.sect	'.debug_frame'
	.word	20
	.word	.L837,.L201,.L395-.L201
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('udp_debug_print')
	.sect	'.debug_frame'
	.word	24
	.word	.L837,.L203,.L393-.L203
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L838:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_63')
	.sect	'.debug_frame'
	.word	24
	.word	.L838,.L171,.L307-.L171
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_62')
	.sect	'.debug_frame'
	.word	24
	.word	.L838,.L173,.L302-.L173
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1308  #endif /* UDP_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1309  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\udp.c	  1310  #endif /* LWIP_UDP */

	; Module end
